import TopCatModelCategory.MorphismProperty
import Mathlib.CategoryTheory.Limits.Preserves.Shapes.BinaryProducts

namespace CategoryTheory

open Limits

variable {C : Type*} [Category C]

namespace Limits.BinaryFan.IsLimit

variable {X‚ÇÅ X‚ÇÇ : C} {c : BinaryFan X‚ÇÅ X‚ÇÇ} (hc : IsLimit c)
  {T : C} (f‚ÇÅ : T ‚ü∂ X‚ÇÅ) (f‚ÇÇ : T ‚ü∂ X‚ÇÇ)

def lift : T ‚ü∂ c.pt :=
  (Limits.BinaryFan.IsLimit.lift' hc f‚ÇÅ f‚ÇÇ).1

@[reassoc (attr := simp)]
lemma lift_fst : lift hc f‚ÇÅ f‚ÇÇ ‚â´ c.fst = f‚ÇÅ :=
  (Limits.BinaryFan.IsLimit.lift' hc f‚ÇÅ f‚ÇÇ).2.1

@[reassoc (attr := simp)]
lemma lift_snd : lift hc f‚ÇÅ f‚ÇÇ ‚â´ c.snd = f‚ÇÇ :=
  (Limits.BinaryFan.IsLimit.lift' hc f‚ÇÅ f‚ÇÇ).2.2

lemma exists_lift
    {X‚ÇÅ X‚ÇÇ : C} {c : BinaryFan X‚ÇÅ X‚ÇÇ} (hc : IsLimit c)
    {T : C} (f‚ÇÅ : T ‚ü∂ X‚ÇÅ) (f‚ÇÇ : T ‚ü∂ X‚ÇÇ) :
    ‚àÉ œÜ, œÜ ‚â´ c.fst = f‚ÇÅ ‚àß œÜ ‚â´ c.snd = f‚ÇÇ :=
  ‚ü®lift hc f‚ÇÅ f‚ÇÇ, by simp, by simp‚ü©

end Limits.BinaryFan.IsLimit

namespace MorphismProperty

structure TrivialBundleWithFiber (F : C) {E B : C} (p : E ‚ü∂ B) where
  r : E ‚ü∂ F
  isLimit : IsLimit (BinaryFan.mk p r)

namespace TrivialBundleWithFiber

variable {F E B : C} {p : E ‚ü∂ B} (h : TrivialBundleWithFiber F p)

lemma ext_iff {h‚ÇÅ h‚ÇÇ : TrivialBundleWithFiber F p} :
    h‚ÇÅ = h‚ÇÇ ‚Üî h‚ÇÅ.r = h‚ÇÇ.r := by
  constructor
  ¬∑ rintro rfl
    rfl
  ¬∑ obtain ‚ü®r‚ÇÅ, h‚ÇÅ‚ü© := h‚ÇÅ
    obtain ‚ü®r‚ÇÇ, h‚ÇÇ‚ü© := h‚ÇÇ
    rintro rfl
    obtain rfl : h‚ÇÅ = h‚ÇÇ := by subsingleton
    rfl

@[ext]
lemma ext {h‚ÇÅ h‚ÇÇ : TrivialBundleWithFiber F p} (eq : h‚ÇÅ.r = h‚ÇÇ.r) : h‚ÇÅ = h‚ÇÇ := by
  rwa [ext_iff]

@[simps]
def chg {F' : C} (e : F' ‚âÖ F) : TrivialBundleWithFiber F' p where
  r := h.r ‚â´ e.inv
  isLimit := by
    let e' : pair B F' ‚âÖ pair B F := mapPairIso (Iso.refl _) e
    refine (IsLimit.equivOfNatIsoOfIso e' _ _ ?_).2 h.isLimit
    refine BinaryFan.ext (Iso.refl _) ?_ ?_
    all_goals
      dsimp [Cones.postcompose, BinaryFan.fst, BinaryFan.snd, e']
      simp

@[simps]
noncomputable def pullback {E' B' : C} {p' : E' ‚ü∂ B'} {f : B' ‚ü∂ B} {f' : E' ‚ü∂ E}
    (sq : IsPullback f' p' p f) :
    TrivialBundleWithFiber F p' where
  r := f' ‚â´ h.r
  isLimit :=
    BinaryFan.isLimitMk
      (fun s ‚Ü¶ sq.lift (BinaryFan.IsLimit.lift' h.isLimit (s.fst ‚â´ f) s.snd).1 s.fst
        (BinaryFan.IsLimit.lift' _ _ _).2.1)
      (fun s ‚Ü¶ by simp)
      (fun s ‚Ü¶ by simpa using (BinaryFan.IsLimit.lift' h.isLimit (s.fst ‚â´ f) s.snd).2.2)
      (fun s m hm‚ÇÅ hm‚ÇÇ ‚Ü¶ by
        apply sq.hom_ext
        ¬∑ apply BinaryFan.IsLimit.hom_ext h.isLimit
          ¬∑ dsimp
            rw [Category.assoc, IsPullback.lift_fst, sq.w, reassoc_of% hm‚ÇÅ]
            exact (BinaryFan.IsLimit.lift' h.isLimit (s.fst ‚â´ f) s.snd).2.1.symm
          ¬∑ dsimp
            rw [Category.assoc, IsPullback.lift_fst, hm‚ÇÇ]
            exact (BinaryFan.IsLimit.lift' h.isLimit (s.fst ‚â´ f) s.snd).2.2.symm
        ¬∑ simp [hm‚ÇÅ])

variable (p) in
def ofIsTerminal (hB : IsTerminal B) : TrivialBundleWithFiber E p where
  r := ùüô E
  isLimit :=
    BinaryFan.isLimitMk (fun s ‚Ü¶ s.snd) (fun s ‚Ü¶ hB.hom_ext _ _)
      (fun s ‚Ü¶ by simp)
      (fun s m _ hm ‚Ü¶ by simpa using hm)

@[simps hom]
def isoOfIsTerminal (h : TrivialBundleWithFiber F p) (hB : IsTerminal B) : E ‚âÖ F where
  hom := h.r
  inv := (BinaryFan.IsLimit.lift' h.isLimit (hB.from _) (ùüô _)).1
  hom_inv_id := by
    apply BinaryFan.IsLimit.hom_ext h.isLimit
    ¬∑ apply hB.hom_ext
    ¬∑ have := (BinaryFan.IsLimit.lift' h.isLimit (hB.from _) (ùüô _)).2.2
      dsimp at this ‚ä¢
      simp [this]
  inv_hom_id := (BinaryFan.IsLimit.lift' h.isLimit (hB.from _) (ùüô _)).2.2

lemma isPullback_of_isTerminal {T : C} (hT : IsTerminal T) :
    IsPullback h.r p (hT.from _) (hT.from _) where
  w := by simp
  isLimit' := ‚ü®
    PullbackCone.IsLimit.mk _
      (fun s ‚Ü¶ (BinaryFan.IsLimit.lift' h.isLimit s.snd s.fst).1)
      (fun s ‚Ü¶ (BinaryFan.IsLimit.lift' h.isLimit s.snd s.fst).2.2)
      (fun s ‚Ü¶ (BinaryFan.IsLimit.lift' h.isLimit s.snd s.fst).2.1)
      (fun s m hm‚ÇÅ hm‚ÇÇ ‚Ü¶ by
        apply BinaryFan.IsLimit.hom_ext h.isLimit
        ¬∑ exact hm‚ÇÇ.trans (BinaryFan.IsLimit.lift' h.isLimit s.snd s.fst).2.1.symm
        ¬∑ exact hm‚ÇÅ.trans (BinaryFan.IsLimit.lift' h.isLimit s.snd s.fst).2.2.symm)‚ü©

lemma exists_iso {E' : C} {p' : E' ‚ü∂ B} (h' : TrivialBundleWithFiber F p') :
    ‚àÉ (e : E ‚âÖ E'), e.hom ‚â´ p' = p ‚àß e.hom ‚â´ h'.r = h.r := by
  obtain ‚ü®hom, h‚ÇÅ, h‚ÇÇ‚ü© := BinaryFan.IsLimit.exists_lift h'.isLimit p h.r
  obtain ‚ü®inv, h‚ÇÉ, h‚ÇÑ‚ü© := BinaryFan.IsLimit.exists_lift h.isLimit p' h'.r
  dsimp at h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ
  refine ‚ü®
    { hom := hom
      inv := inv
      hom_inv_id := ?_
      inv_hom_id := ?_ }, ?_, ?_‚ü©
  ¬∑ apply BinaryFan.IsLimit.hom_ext h.isLimit <;> aesop
  ¬∑ apply BinaryFan.IsLimit.hom_ext h'.isLimit <;> aesop
  ¬∑ aesop
  ¬∑ aesop

@[simps]
def ofIso {E' : C} (e : E' ‚âÖ E) {p' : E' ‚ü∂ B} (hp' : e.hom ‚â´ p = p') :
    TrivialBundleWithFiber F p' where
  r := e.hom ‚â´ h.r
  isLimit := IsLimit.ofIsoLimit h.isLimit (BinaryFan.ext e (by aesop) (by simp)).symm

lemma isPullback {E' B' : C} {p' : E' ‚ü∂ B'} (h' : TrivialBundleWithFiber F p')
    (t : E' ‚ü∂ E) (b : B' ‚ü∂ B) (h‚ÇÅ : t ‚â´ p = p' ‚â´ b) (h‚ÇÇ : t ‚â´ h.r = h'.r) :
    IsPullback t p' p b where
  isLimit' :=
    ‚ü®Limits.PullbackCone.IsLimit.mk _
      (fun s ‚Ü¶ BinaryFan.IsLimit.lift h'.isLimit s.snd (s.fst ‚â´ h.r))
      (fun s ‚Ü¶ by
        have h‚ÇÉ := BinaryFan.IsLimit.lift_fst h'.isLimit s.snd (s.fst ‚â´ h.r)
        have h‚ÇÑ := BinaryFan.IsLimit.lift_snd h'.isLimit s.snd (s.fst ‚â´ h.r)
        dsimp at h‚ÇÉ h‚ÇÑ
        apply BinaryFan.IsLimit.hom_ext h.isLimit
        ¬∑ dsimp
          rw [Category.assoc, h‚ÇÅ, reassoc_of% h‚ÇÉ, s.condition]
        ¬∑ dsimp
          rw [Category.assoc, h‚ÇÇ, h‚ÇÑ])
      (fun s ‚Ü¶ BinaryFan.IsLimit.lift_fst h'.isLimit s.snd (s.fst ‚â´ h.r))
      (fun s m hm‚ÇÅ hm‚ÇÇ ‚Ü¶ by
        have h‚ÇÉ := BinaryFan.IsLimit.lift_fst h'.isLimit s.snd (s.fst ‚â´ h.r)
        have h‚ÇÑ := BinaryFan.IsLimit.lift_snd h'.isLimit s.snd (s.fst ‚â´ h.r)
        dsimp at h‚ÇÉ h‚ÇÑ
        apply BinaryFan.IsLimit.hom_ext h'.isLimit
        ¬∑ dsimp
          rw [hm‚ÇÇ, h‚ÇÉ]
        ¬∑ dsimp
          rw [h‚ÇÑ, ‚Üê h‚ÇÇ, reassoc_of% hm‚ÇÅ])‚ü©

noncomputable def map {D : Type*} [Category D] (G : C ‚•§ D) [PreservesLimit (pair B F) G] :
    TrivialBundleWithFiber (G.obj F) (G.map p) where
  r := G.map h.r
  isLimit := mapIsLimitOfPreservesOfIsLimit _ _ _ h.isLimit

end TrivialBundleWithFiber

def trivialBundlesWithFiber (F : C) : MorphismProperty C :=
  fun _ _ p ‚Ü¶ Nonempty (TrivialBundleWithFiber F p)

instance (F : C) : (trivialBundlesWithFiber F).IsStableUnderBaseChange where
  of_isPullback sq h := ‚ü®h.some.pullback sq‚ü©

def trivialBundles : MorphismProperty C :=
  ‚®Ü F, trivialBundlesWithFiber F

lemma trivialBundlesWithFiber_le_trivialBundles (F : C) :
    trivialBundlesWithFiber F ‚â§ trivialBundles :=
  le_iSup _ _

lemma mem_trivialBundles_iff {X Y : C} (p : X ‚ü∂ Y) :
    trivialBundles p ‚Üî ‚àÉ F, Nonempty (TrivialBundleWithFiber F p) := by
  simp [trivialBundles]
  rfl

instance : (trivialBundles (C := C)).IsStableUnderBaseChange := by
  dsimp only [trivialBundles]
  infer_instance

lemma trivialBundles.of_isPullback_of_fac {E E' B B' : C} {p' : E' ‚ü∂ B'} {p : E ‚ü∂ B}
    {f : B' ‚ü∂ B} {f' : E' ‚ü∂ E} (sq : IsPullback f' p' p f)
    {T : C} (hT : IsTerminal T) (a : B' ‚ü∂ T) (b : T ‚ü∂ B) (fac : a ‚â´ b = f)
    [HasPullback p b] :
    trivialBundles p' := by
  have sq : IsPullback (pullback.lift f' (p' ‚â´ a) (by rw [Category.assoc, fac, sq.w]))
      p' (pullback.snd p b) a := IsPullback.of_right (by aesop) (by simp)
      (IsPullback.of_hasPullback p b)
  refine MorphismProperty.of_isPullback sq ?_
  simp only [trivialBundles, iSup_iff]
  exact ‚ü®_, ‚ü®TrivialBundleWithFiber.ofIsTerminal (pullback.snd p b) hT‚ü©‚ü©

instance (F : C) : (trivialBundlesWithFiber F).IsStableUnderBaseChange where
  of_isPullback {X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ t f' f b} sq := by
    rintro ‚ü®hf‚ü©
    exact ‚ü®hf.pullback sq‚ü©

end MorphismProperty

end CategoryTheory
