import TopCatModelCategory.MorphismProperty

namespace CategoryTheory

open Limits

variable {C : Type*} [Category C]

namespace MorphismProperty

structure TrivialBundleWithFiber (F : C) {E B : C} (p : E ‚ü∂ B) where
  r : E ‚ü∂ F
  isLimit : IsLimit (BinaryFan.mk p r)

namespace TrivialBundleWithFiber

variable {F E B : C} {p : E ‚ü∂ B} (h : TrivialBundleWithFiber F p)

noncomputable def pullback {E' B' : C} {p' : E' ‚ü∂ B'} {f : B' ‚ü∂ B} {f' : E' ‚ü∂ E}
    (sq : IsPullback f' p' p f) :
    TrivialBundleWithFiber F p' where
  r := f' ‚â´ h.r
  isLimit :=
    BinaryFan.isLimitMk
      (fun s ‚Ü¶ sq.lift (BinaryFan.IsLimit.lift' h.isLimit (s.fst ‚â´ f) s.snd).1 s.fst
        (BinaryFan.IsLimit.lift' _ _ _).2.1)
      (fun s ‚Ü¶ by simp)
      (fun s ‚Ü¶ by simpa using (BinaryFan.IsLimit.lift' h.isLimit (s.fst ‚â´ f) s.snd).2.2)
      (fun s m hm‚ÇÅ hm‚ÇÇ ‚Ü¶ by
        apply sq.hom_ext
        ¬∑ apply BinaryFan.IsLimit.hom_ext h.isLimit
          ¬∑ dsimp
            rw [Category.assoc, IsPullback.lift_fst, sq.w, reassoc_of% hm‚ÇÅ]
            exact (BinaryFan.IsLimit.lift' h.isLimit (s.fst ‚â´ f) s.snd).2.1.symm
          ¬∑ dsimp
            rw [Category.assoc, IsPullback.lift_fst, hm‚ÇÇ]
            exact (BinaryFan.IsLimit.lift' h.isLimit (s.fst ‚â´ f) s.snd).2.2.symm
        ¬∑ simp [hm‚ÇÅ])

variable (p) in
def ofIsTerminal (hB : IsTerminal B) : TrivialBundleWithFiber E p where
  r := ùüô E
  isLimit :=
    BinaryFan.isLimitMk (fun s ‚Ü¶ s.snd) (fun s ‚Ü¶ hB.hom_ext _ _)
      (fun s ‚Ü¶ by simp)
      (fun s m _ hm ‚Ü¶ by simpa using hm)

@[simps hom]
def isoOfIsTerminal (h : TrivialBundleWithFiber F p) (hB : IsTerminal B) : E ‚âÖ F where
  hom := h.r
  inv := (BinaryFan.IsLimit.lift' h.isLimit (hB.from _) (ùüô _)).1
  hom_inv_id := by
    apply BinaryFan.IsLimit.hom_ext h.isLimit
    ¬∑ apply hB.hom_ext
    ¬∑ have := (BinaryFan.IsLimit.lift' h.isLimit (hB.from _) (ùüô _)).2.2
      dsimp at this ‚ä¢
      simp [this]
  inv_hom_id := (BinaryFan.IsLimit.lift' h.isLimit (hB.from _) (ùüô _)).2.2

end TrivialBundleWithFiber

def trivialBundlesWithFiber (F : C) : MorphismProperty C :=
  fun _ _ p ‚Ü¶ Nonempty (TrivialBundleWithFiber F p)

instance (F : C) : (trivialBundlesWithFiber F).IsStableUnderBaseChange where
  of_isPullback sq h := ‚ü®h.some.pullback sq‚ü©

def trivialBundles : MorphismProperty C :=
  ‚®Ü F, trivialBundlesWithFiber F

instance : (trivialBundles (C := C)).IsStableUnderBaseChange := by
  dsimp only [trivialBundles]
  infer_instance

lemma trivialBundles.of_isPullback_of_fac {E E' B B' : C} {p' : E' ‚ü∂ B'} {p : E ‚ü∂ B}
    {f : B' ‚ü∂ B} {f' : E' ‚ü∂ E} (sq : IsPullback f' p' p f)
    {T : C} (hT : IsTerminal T) (a : B' ‚ü∂ T) (b : T ‚ü∂ B) (fac : a ‚â´ b = f)
    [HasPullback p b] :
    trivialBundles p' := by
  have sq : IsPullback (pullback.lift f' (p' ‚â´ a) (by rw [Category.assoc, fac, sq.w]))
      p' (pullback.snd p b) a := IsPullback.of_right (by aesop) (by simp)
      (IsPullback.of_hasPullback p b)
  refine MorphismProperty.of_isPullback sq ?_
  simp only [trivialBundles, iSup_iff]
  exact ‚ü®_, ‚ü®TrivialBundleWithFiber.ofIsTerminal (pullback.snd p b) hT‚ü©‚ü©

end MorphismProperty

end CategoryTheory
