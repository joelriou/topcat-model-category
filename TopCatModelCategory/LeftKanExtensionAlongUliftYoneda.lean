import Mathlib.CategoryTheory.Limits.Presheaf

universe w v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

open Opposite Limits

namespace Limits

variable {C D : Type*} [Category C] [Category D]
  {F : C ‚•§ D} (c : Cocone F)

lemma nonempty_isColimit_cocone_iff_of_isTerminal {X : C} (hX : IsTerminal X) :
    Nonempty (IsColimit c) ‚Üî IsIso (c.Œπ.app X) := by
  constructor
  ¬∑ rintro ‚ü®hc‚ü©
    let s : Cocone F :=
      { pt := F.obj X
        Œπ :=
          { app Y := F.map (hX.from Y)
            naturality _ _ _ := by simp [‚Üê F.map_comp] } }
    exact ‚ü®hc.desc s, by aesop_cat, hc.hom_ext (fun Y ‚Ü¶ by aesop_cat)‚ü©
  ¬∑ intro
    exact ‚ü®{
      desc s := inv (c.Œπ.app X) ‚â´ s.Œπ.app X
      fac s Y := by
        rw [‚Üê c.w_assoc (hX.from Y), IsIso.hom_inv_id_assoc, s.w]
      uniq s m hm := by simp [‚Üê hm X]
    }‚ü©

end Limits

section

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]

@[simps]
def uliftYoneda.initialElement (X : C) :
    (uliftYoneda.{w}.obj X).Elements :=
  Functor.elementsMk (uliftYoneda.{w}.obj X) (op X) (uliftYonedaEquiv (ùüô _))

def uliftYoneda.isInitialInitialElement (X : C) :
    IsInitial (initialElement.{w} X) :=
  IsInitial.ofUniqueHom (fun e ‚Ü¶ CategoryOfElements.homMk _ _ e.2.down.op
    (ULift.down_injective (by simp [uliftYonedaEquiv]))) (by
      rintro e ‚ü®f, hf‚ü©
      dsimp at f hf
      ext
      simp [‚Üê hf, uliftYonedaEquiv])

end

namespace Presheaf

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]
  {A : C ‚•§ D}

variable (E : Functor.LeftExtension uliftYoneda.{w} A)

section

variable (P : C·µí·µñ ‚•§ Type max w v‚ÇÅ)

@[simps]
def coconeOfLeftExtension :
    Cocone ((CategoryOfElements.œÄ P).leftOp ‚ãô A) where
  pt := E.right.obj P
  Œπ :=
    { app e := E.hom.app e.unop.1.unop ‚â´ E.right.map (uliftYonedaEquiv.symm e.unop.2)
      naturality {e e'} f := by
        dsimp
        simp only [NatTrans.naturality_assoc, Functor.comp_obj, Functor.comp_map,
          Category.comp_id, ‚Üê Functor.map_comp]
        congr
        rw [‚Üê uliftYonedaEquiv_symm_map, CategoryOfElements.map_snd] }

variable {E P} in
def isColimitCoconeOfLeftExtensionEquiv :
     IsColimit (coconeOfLeftExtension E P) ‚âÉ
      (E.IsPointwiseLeftKanExtensionAt P) := by
  refine Equiv.trans ?_
    (IsColimit.whiskerEquivalenceEquiv
      (CategoryOfElements.costructuredArrowULiftYonedaEquivalence.{w} P)).symm
  exact (IsColimit.equivOfNatIsoOfIso (Iso.refl _) _ _ (Cocones.ext (Iso.refl _)))

lemma nonempty_coconeOfLextExtension_iff :
    Nonempty (IsColimit (coconeOfLeftExtension E P)) ‚Üî
      Nonempty (E.IsPointwiseLeftKanExtensionAt P) :=
  isColimitCoconeOfLeftExtensionEquiv.nonempty_congr

end

lemma nonempty_isPointwiseLeftKanExtensionAt_uliftYoneda_obj_iff (X : C) :
    Nonempty (E.IsPointwiseLeftKanExtensionAt (uliftYoneda.{w}.obj X)) ‚Üî
      IsIso (E.hom.app X) := by
  simp [‚Üê nonempty_coconeOfLextExtension_iff,
    nonempty_isColimit_cocone_iff_of_isTerminal _
    (terminalOpOfInitial (uliftYoneda.isInitialInitialElement.{w} X))]

lemma isPointwiseLeftKanExtensionAt_iff_of_isIso [IsIso E.hom]
    (P : C·µí·µñ ‚•§ Type max w v‚ÇÅ) :
    Nonempty (E.IsPointwiseLeftKanExtensionAt P) ‚Üî
      PreservesColimit (functorToRepresentables P) E.right := by
  rw [‚Üê nonempty_coconeOfLextExtension_iff]
  trans Nonempty (IsColimit (E.right.mapCocone (coconeOfRepresentable P)))
  ¬∑ exact (IsColimit.equivOfNatIsoOfIso
      (Functor.isoWhiskerLeft (CategoryOfElements.œÄ P).leftOp (asIso E.hom)) _ _
        (by exact Cocones.ext (Iso.refl _))).nonempty_congr
  ¬∑ constructor
    ¬∑ rintro ‚ü®h‚ü©
      exact preservesColimit_of_preserves_colimit_cocone (colimitOfRepresentable P) h
    ¬∑ intro
      exact ‚ü®isColimitOfPreserves E.right (colimitOfRepresentable P)‚ü©

lemma isPointwiseLeftKanExtension_along_uliftYoneda_iff_isIso_and_preservesColimit :
    Nonempty E.IsPointwiseLeftKanExtension ‚Üî
      (IsIso E.hom ‚àß ‚àÄ (P : C·µí·µñ ‚•§ Type max w v‚ÇÅ),
        PreservesColimit (functorToRepresentables P) E.right) := by
  constructor
  ¬∑ rintro ‚ü®h‚ü©
    have : IsIso E.hom := by
      rw [NatTrans.isIso_iff_isIso_app]
      intro P
      rw [‚Üê nonempty_isPointwiseLeftKanExtensionAt_uliftYoneda_obj_iff]
      exact ‚ü®h _‚ü©
    exact ‚ü®inferInstance, fun P ‚Ü¶ (isPointwiseLeftKanExtensionAt_iff_of_isIso E P).1 ‚ü®h P‚ü©‚ü©
  ¬∑ rintro ‚ü®_, h‚ü©
    refine ‚ü®fun P ‚Ü¶ Nonempty.some ?_‚ü©
    rw [isPointwiseLeftKanExtensionAt_iff_of_isIso]
    apply h

/-lemma isPointwiseLeftKanExtension_along_uliftYoneda_iff_isIso_and_preservesColimitsOfSize :
    Nonempty E.IsPointwiseLeftKanExtension ‚Üî
      (IsIso E.hom ‚àß PreservesColimitsOfSize.{v‚ÇÅ, max w u‚ÇÅ v‚ÇÅ} E.right) := by
  sorry-/

lemma isLeftKanExtension_along_uliftYoneda_iff'
    [uliftYoneda.{w}.HasPointwiseLeftKanExtension A]
    (L : (C·µí·µñ ‚•§ Type (max w v‚ÇÅ)) ‚•§ D)
    (Œ± : A ‚ü∂ uliftYoneda.{w} ‚ãô L) :
    L.IsLeftKanExtension Œ± ‚Üî IsIso Œ± ‚àß
      ‚àÄ (P : C·µí·µñ ‚•§ Type max w v‚ÇÅ),
        PreservesColimit (functorToRepresentables P) L := by
  have := isPointwiseLeftKanExtension_along_uliftYoneda_iff_isIso_and_preservesColimit (Functor.LeftExtension.mk _ Œ±)
  dsimp at this
  rw [‚Üê this]
  constructor
  ¬∑ intro h
    exact ‚ü®Functor.isPointwiseLeftKanExtensionOfIsLeftKanExtension _ _‚ü©
  ¬∑ rintro ‚ü®h‚ü©
    exact h.isLeftKanExtension

/-lemma isLeftKanExtension_along_uliftYoneda_iff''
    [uliftYoneda.{w}.HasPointwiseLeftKanExtension A]
    (L : (C·µí·µñ ‚•§ Type (max w v‚ÇÅ)) ‚•§ D)
    (Œ± : A ‚ü∂ uliftYoneda.{w} ‚ãô L) :
    L.IsLeftKanExtension Œ± ‚Üî IsIso Œ± ‚àß
      Limits.PreservesColimitsOfSize.{v‚ÇÅ, max w u‚ÇÅ v‚ÇÅ} L := by
  have := isPointwiseLeftKanExtension_along_uliftYoneda_iff (Functor.LeftExtension.mk _ Œ±)
  dsimp at this
  rw [‚Üê this]
  constructor
  ¬∑ intro h
    exact ‚ü®Functor.isPointwiseLeftKanExtensionOfIsLeftKanExtension _ _‚ü©
  ¬∑ rintro ‚ü®h‚ü©
    exact h.isLeftKanExtension-/


end Presheaf

end CategoryTheory
