import TopCatModelCategory.Convenient.Limits
import TopCatModelCategory.Convenient.Open
import TopCatModelCategory.TopCat.Limits
import TopCatModelCategory.ColimitsType
import TopCatModelCategory.CommSq
import TopCatModelCategory.MorphismPropertyLocally
import Mathlib.CategoryTheory.MorphismProperty.Limits
import Mathlib.CategoryTheory.Sites.Pretopology
import Mathlib.Topology.Sets.Opens

universe w v t u

namespace CategoryTheory.Sieve

variable {C : Type*} [Category C] {S : C} {Œπ : Type*}
  {X : Œπ ‚Üí C} (f : ‚àÄ i, X i ‚ü∂ S) (T : Sieve S)

lemma ofArrows_le_iff :
    Sieve.ofArrows _ f ‚â§ T ‚Üî ‚àÄ (i : Œπ), T (f i) := by
  constructor
  ¬∑ intro h i
    exact h _ (ofArrows_mk X f i)
  ¬∑ intro h
    rintro _ _ ‚ü®_, _, _, ‚ü®i‚ü©, rfl‚ü©
    exact T.downward_closed (h i) _

end CategoryTheory.Sieve

open CategoryTheory Topology Limits

variable {Œπ : Type t} {X : Œπ ‚Üí Type u} [‚àÄ i, TopologicalSpace (X i)]

namespace TopCat

def openImmersions : MorphismProperty TopCat.{v} :=
  fun _ _ f ‚Ü¶ IsOpenEmbedding f

lemma openImmersions_iff {Y Z : TopCat.{v}} (f : Y ‚ü∂ Z) :
    openImmersions f ‚Üî IsOpenEmbedding f := Iff.rfl

instance : openImmersions.{v}.IsMultiplicative where
  id_mem _ := IsOpenEmbedding.id
  comp_mem _ _ h‚ÇÅ h‚ÇÇ := h‚ÇÇ.comp h‚ÇÅ

lemma openImmersions.of_isIso {Y Z : TopCat.{v}} (f : Y ‚ü∂ Z) [IsIso f] :
    openImmersions f :=
  (homeoOfIso (asIso f)).isOpenEmbedding

instance : (openImmersions.{v}).RespectsIso :=
  MorphismProperty.respectsIso_of_isStableUnderComposition
    (fun _ _ f (_ : IsIso f) ‚Ü¶ openImmersions.of_isIso f)

lemma openImmersions.exists_iso {X Y : TopCat.{v}} {f : X ‚ü∂ Y}
    (hf : openImmersions f) :
    ‚àÉ (U : TopologicalSpace.Opens Y) (e : X ‚âÖ TopCat.of U),
      e.hom ‚â´ ofHom ‚ü®_, continuous_subtype_val‚ü© = f := by
  refine ‚ü®‚ü®Set.range f, hf.isOpen_range‚ü©, isoOfHomeo hf.homeoRange, rfl‚ü©

instance : openImmersions.{v}.IsStableUnderBaseChange where
  of_isPullback {X‚ÇÉ X‚ÇÇ X‚ÇÅ X‚ÇÑ b r t l} sq hr := by
    obtain ‚ü®U, e‚ÇÇ, fac‚ü© := hr.exists_iso
    obtain ‚ü®e‚ÇÅ, h‚ÇÅ, h‚ÇÇ‚ü© := sq.exists_iso_of_isos (TopCat.isPullbackRestrictPreimage b U).flip e‚ÇÇ
      (Iso.refl _) (Iso.refl _) (by simpa using fac.symm) (by simp)
    dsimp at h‚ÇÇ
    rw [Category.comp_id] at h‚ÇÇ
    have h : openImmersions (ofHom ‚ü®_, continuous_subtype_val‚ü© : of (b ‚Åª¬π' U) ‚ü∂ X‚ÇÉ) :=
      (U.isOpen.preimage b.hom.continuous).isOpenEmbedding_subtypeVal
    exact (MorphismProperty.arrow_mk_iso_iff _ (Arrow.isoMk e‚ÇÅ (Iso.refl _))).2 h

end TopCat

namespace GeneratedByTopCat

def openImmersions : MorphismProperty (GeneratedByTopCat.{v} X) :=
    TopCat.openImmersions.{v}.inverseImage toTopCat

lemma openImmersions.of_isIso {Y Z : GeneratedByTopCat.{v} X} (f : Y ‚ü∂ Z) [IsIso f] :
    openImmersions f :=
  TopCat.openImmersions.of_isIso _

instance :
    (openImmersions.{v} (X := X)).IsMultiplicative := by
  dsimp only [openImmersions]
  infer_instance

instance : (openImmersions.{v} (X := X)).RespectsIso :=
  MorphismProperty.respectsIso_of_isStableUnderComposition
    (fun _ _ f (_ : IsIso f) ‚Ü¶ openImmersions.of_isIso f)

section

variable [‚àÄ (i : Œπ) (U : TopologicalSpace.Opens (X i)), IsGeneratedBy X U]

lemma openImmersions.preservesLimit_cospan {Y Z : GeneratedByTopCat.{v} X} {f : Y ‚ü∂ Z}
    (hf : openImmersions f) ‚¶ÉT : GeneratedByTopCat.{v} X‚¶Ñ (p : T ‚ü∂ Z) :
    PreservesLimit (cospan f p) toTopCat := by
  let c‚ÇÅ : PullbackCone (toTopCat.map f) (toTopCat.map p) :=
    PullbackCone.mk _ _ pullback.condition
  let hc‚ÇÅ : IsLimit c‚ÇÅ := pullbackIsPullback _ _
  let e : cospan f p ‚ãô (TopCat.generatedBy X).Œπ ‚âÖ cospan (toTopCat.map f) (toTopCat.map p) :=
    cospanCompIso _ _ _
  let c‚ÇÇ : Cone (cospan f p ‚ãô (TopCat.generatedBy X).Œπ) := (Cones.postcompose e.inv).obj c‚ÇÅ
  let hc‚ÇÇ : IsLimit c‚ÇÇ := (IsLimit.postcomposeInvEquiv (cospanCompIso _ _ _) _).2 hc‚ÇÅ
  refine ObjectProperty.preservesLimit_of_limit_cone_comp_Œπ _ c‚ÇÇ hc‚ÇÇ ?_
  have hsnd : TopCat.openImmersions c‚ÇÅ.snd :=
    MorphismProperty.of_isPullback (IsPullback.of_hasPullback _ _) hf
  exact hsnd.isGeneratedBy (X := X)

instance : (openImmersions.{v} (X := X)).IsStableUnderBaseChange where
  of_isPullback {X‚ÇÉ X‚ÇÇ X‚ÇÅ X‚ÇÑ b r t l} sq hr := by
    have := hr.preservesLimit_cospan
    exact MorphismProperty.of_isPullback (P := TopCat.openImmersions)
      (sq.map toTopCat) hr

end

structure OpenCover (S : GeneratedByTopCat.{v} X) where
  Œπ : Type w
  U (i : Œπ) : GeneratedByTopCat.{v} X
  p (i : Œπ) : U i ‚ü∂ S
  hp (i : Œπ) : openImmersions (p i)
  union_range_eq_univ :
    ‚ãÉ (i : Œπ), Set.range (toTopCat.map (p i)) = .univ := by cat_disch

namespace OpenCover

variable {S : GeneratedByTopCat.{v} X}

section

variable (c : OpenCover.{w} S)

abbrev sieve : Sieve S := .ofArrows _ (fun i ‚Ü¶ c.p i)

lemma exists_eq (s : toTopCat.obj S) :
    ‚àÉ (i : c.Œπ) (u : toTopCat.obj (c.U i)),
      toTopCat.map (c.p i) u = s := by
  simpa [‚Üê c.union_range_eq_univ] using Set.mem_univ s

end

def id : OpenCover.{w} S where
  Œπ := PUnit
  U _ := S
  p _ := ùüô _
  hp _ := MorphismProperty.id_mem _ _

end OpenCover

variable [‚àÄ (i : Œπ) (U : TopologicalSpace.Opens (X i)), IsGeneratedBy X U]

def grothendieckTopology :
    GrothendieckTopology (GeneratedByTopCat.{v} X) where
  sieves Y S := ‚àÉ (c : OpenCover.{v} Y), c.sieve ‚â§ S
  top_mem' Y := ‚ü®.id, by simp‚ü©
  pullback_stable' := by
    rintro Y Z S f ‚ü®c, hc‚ü©
    refine ‚ü®{
      Œπ := c.Œπ
      U := _
      p i := pullback.snd (c.p i) f
      hp i := MorphismProperty.of_isPullback (IsPullback.of_hasPullback (c.p i) f) (c.hp i)
      union_range_eq_univ := by
        ext z
        simp only [ObjectProperty.Œπ_obj, ObjectProperty.Œπ_map, Set.mem_iUnion, Set.mem_range,
          Set.mem_univ, iff_true]
        obtain ‚ü®i, u, hu‚ü© := c.exists_eq (f z)
        obtain ‚ü®p, rfl, rfl‚ü© := ((Types.isPullback_iff _ _ _ _).1
          ((IsPullback.of_hasPullback (c.p i) f).map (forget _))).2.2 _ _ hu
        exact ‚ü®i, p, rfl‚ü© }, ?_‚ü©
    rw [Sieve.ofArrows_le_iff]
    dsimp
    intro i
    rw [‚Üê pullback.condition]
    exact hc _ (c.sieve.downward_closed (Sieve.ofArrows_mk _ _ _) _)
  transitive' := by
    rintro Y S ‚ü®c, hc‚ü© T hT
    replace hT (i : c.Œπ) := hT (hc _ (Sieve.ofArrows_mk _ _ i))
    choose c' hc' using hT
    refine ‚ü®{
      Œπ := Œ£ (i : c.Œπ), (c' i).Œπ
      U := fun ‚ü®i, i'‚ü© ‚Ü¶ (c' i).U i'
      p := fun ‚ü®i, i'‚ü© ‚Ü¶ (c' i).p i' ‚â´ c.p i
      hp := fun ‚ü®i, i'‚ü© ‚Ü¶ MorphismProperty.comp_mem _ _ _ ((c' i).hp _) (c.hp _)
      union_range_eq_univ := by
        ext y
        simp only [ObjectProperty.Œπ_obj, ObjectProperty.Œπ_map, Set.mem_iUnion, Set.mem_range,
          Sigma.exists, Set.mem_univ, iff_true]
        obtain ‚ü®i, u, rfl‚ü© := c.exists_eq y
        obtain ‚ü®i', v, rfl‚ü© := (c' i).exists_eq u
        exact ‚ü®i, i', v, rfl‚ü© }, ?_‚ü©
    rw [Sieve.ofArrows_le_iff]
    dsimp
    rintro ‚ü®i, i'‚ü©
    exact hc' i _ (Sieve.ofArrows_mk _ _ _)

lemma locallyTarget_grothendieckTopology_iff (W : MorphismProperty (GeneratedByTopCat.{v} X))
    [W.IsStableUnderBaseChange]
    {Y Z : GeneratedByTopCat.{v} X} (f : Y ‚ü∂ Z) :
    W.locallyTarget grothendieckTopology f ‚Üî
      ‚àÄ (z : Z), ‚àÉ (U : GeneratedByTopCat.{v} X) (i : U ‚ü∂ Z)
        (_ : openImmersions i) (_ : z ‚àà Set.range i), Nonempty (W.Over f i) := by
  constructor
  ¬∑ rintro ‚ü®U, hU‚ü© z
    have := Set.mem_univ z
    rw [‚Üê U.union_range_eq_univ] at this
    simp only [ObjectProperty.Œπ_obj, ObjectProperty.Œπ_map, Set.mem_iUnion, Set.mem_range] at this
    obtain ‚ü®i, y, rfl‚ü© := this
    exact ‚ü®U.U i, U.p i, U.hp i, Set.mem_range_self y, hU _ (Sieve.ofArrows_mk _ _ _)‚ü©
  ¬∑ rintro h
    choose U p h‚ÇÅ h‚ÇÇ h‚ÇÉ using h
    exact ‚ü®{
        Œπ := Z.obj
        U := U
        p := p
        hp := h‚ÇÅ }, by rwa [Sieve.ofArrows_le_iff]‚ü©

end GeneratedByTopCat
