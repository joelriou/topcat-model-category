import TopCatModelCategory.II
import Mathlib.Data.Fin.VecNotation

open CategoryTheory Simplicial

universe v u u‚ÇÅ u‚ÇÇ u‚ÇÉ

section

variable {I‚ÇÅ : Type u‚ÇÅ} [Preorder I‚ÇÅ] [OrderBot I‚ÇÅ] [OrderTop I‚ÇÅ]
  {I‚ÇÇ : Type u‚ÇÇ} [Preorder I‚ÇÇ] [OrderBot I‚ÇÇ] [OrderTop I‚ÇÇ]
  {I‚ÇÉ : Type u‚ÇÉ} [Preorder I‚ÇÉ] [OrderBot I‚ÇÉ] [OrderTop I‚ÇÉ]

variable (I‚ÇÅ I‚ÇÇ) in
@[ext]
structure IntervalHom where
  orderHom : I‚ÇÅ ‚Üío I‚ÇÇ
  map_bot' : orderHom ‚ä• = ‚ä• := by aesop
  map_top' : orderHom ‚ä§ = ‚ä§ := by aesop

namespace IntervalHom

attribute [simp] map_bot' map_top'

variable (I‚ÇÅ) in
@[simps]
def id : IntervalHom I‚ÇÅ I‚ÇÅ where
  orderHom := .id

@[simps]
def comp (g : IntervalHom I‚ÇÇ I‚ÇÉ) (f : IntervalHom I‚ÇÅ I‚ÇÇ) : IntervalHom I‚ÇÅ I‚ÇÉ where
  orderHom := g.orderHom.comp f.orderHom

instance : FunLike (IntervalHom I‚ÇÅ I‚ÇÇ) I‚ÇÅ I‚ÇÇ where
  coe f := f.orderHom
  coe_injective' _ _ _ := by aesop

@[simp]
lemma map_bot (f : IntervalHom I‚ÇÅ I‚ÇÇ) : f ‚ä• = ‚ä• := f.map_bot'

@[simp]
lemma map_top (f : IntervalHom I‚ÇÅ I‚ÇÇ) : f ‚ä§ = ‚ä§ := f.map_top'

@[simps]
def toULift : IntervalHom I‚ÇÅ (ULift.{v} I‚ÇÅ) where
  orderHom := ‚ü®ULift.up, fun _ _ h ‚Ü¶ h‚ü©

@[simps]
def fromULift : IntervalHom (ULift.{v} I‚ÇÅ) I‚ÇÅ where
  orderHom := ‚ü®ULift.down, fun _ _ h ‚Ü¶ h‚ü©

open Simplicial Vector
instance : Unique (IntervalHom (Fin 2) I‚ÇÅ) where
  default :=
    { orderHom := ‚ü®![‚ä•, ‚ä§], by
        rw [Fin.monotone_iff_le_succ]
        aesop‚ü© }
  uniq f := by
    ext i
    fin_cases i
    ¬∑ exact f.map_bot
    ¬∑ exact f.map_top

end IntervalHom

end

open CategoryTheory Opposite

namespace CategoryTheory

structure Interval where private mk ::
  I : Type u
  [linearOrder : LinearOrder I]
  [orderBot : OrderBot I]
  [orderTop : OrderTop I]

namespace Interval

abbrev of (I : Type u) [LinearOrder I] [OrderBot I] [OrderTop I] : Interval.{u} := mk I

variable (X Y : Interval.{u})

instance : CoeSort Interval.{u} (Type u) where
  coe := I

instance : LinearOrder X := X.linearOrder
instance : OrderBot X := X.orderBot
instance : OrderTop X := X.orderTop

@[ext]
structure Hom where
  hom : IntervalHom X Y

variable {X Y}

instance : FunLike (Hom X Y) X Y where
  coe f := f.hom
  coe_injective' _ _ _ := by aesop

instance : Category Interval.{u} where
  Hom := Hom
  id X := { hom := .id _ }
  comp f g := { hom := g.hom.comp f.hom}

instance : ConcreteCategory Interval.{u} Hom where
  hom := id
  ofHom := id

abbrev homMk (f : IntervalHom X Y) : X ‚ü∂ Y where
  hom := f

@[ext]
lemma hom_ext {f g : X ‚ü∂ Y} (h : f.hom = g.hom) : f = g := Hom.ext h

def uliftFunctor : Interval.{u} ‚•§ Interval.{max u v} where
  obj X := .of (ULift X)
  map f := homMk
    { orderHom := OrderHom.comp ‚ü®ULift.up, fun _ _ h ‚Ü¶ by exact h‚ü©
        (OrderHom.comp f.hom.orderHom ‚ü®ULift.down, fun _ _ h ‚Ü¶ by exact h‚ü©) }

end Interval

end CategoryTheory

namespace SimplexCategory

namespace Hom

def toIntervalHom {n m : SimplexCategory} (f : n ‚ü∂ m) :
    IntervalHom (Fin (m.len + 2)) (Fin (n.len + 2)) where
  orderHom := (II.map f).unop.toOrderHom
  map_bot' := II.map'_zero _
  map_top' := II.map'_last _

@[simp]
lemma toIntervalHom_id (n : SimplexCategory) :
    toIntervalHom (ùüô n) = .id _ := by
  dsimp [toIntervalHom]
  aesop

@[simp]
lemma toIntervalHom_comp {n m p : SimplexCategory} (f : n ‚ü∂ m) (g : m ‚ü∂ p) :
    toIntervalHom (f ‚â´ g) = f.toIntervalHom.comp g.toIntervalHom := by
  dsimp [toIntervalHom]
  aesop

end Hom

@[simps]
def toInterval‚ÇÄ : SimplexCategory ‚•§ Interval.{0}·µí·µñ where
  obj n := op (Interval.of (Fin (n.len + 2)))
  map f := Quiver.Hom.op (Interval.homMk (f.toIntervalHom))

instance : toInterval‚ÇÄ.Faithful where
  map_injective {n m f‚ÇÅ f‚ÇÇ} h :=
    II.map_injective (Quiver.Hom.unop_inj (by
      ext i : 3
      exact ConcreteCategory.congr_hom ((Quiver.Hom.op_inj (C := Interval.{0}) h)) i))

namespace toInterval‚ÇÄFull

variable {n m : ‚Ñï} (g : Interval.of (Fin (m + 2)) ‚ü∂ Interval.of (Fin (n + 2)))

section

variable (i : Fin (n + 1))

def finset : Finset (Fin (m + 1)) :=
  { j : Fin (m + 1) | g j.castSucc ‚â§ i.castSucc }

@[simp]
lemma mem_finset_iff (j : Fin (m + 1)) :
    j ‚àà finset g i ‚Üî g j.castSucc ‚â§ i.castSucc := by
  simp [finset]

lemma mem_finset_of_le {j‚ÇÅ j‚ÇÇ : Fin (m + 1)} (hj : j‚ÇÅ ‚â§ j‚ÇÇ) (hj‚ÇÇ : j‚ÇÇ ‚àà finset g i) :
    j‚ÇÅ ‚àà finset g i := by
  rw [mem_finset_iff] at hj‚ÇÇ ‚ä¢
  exact le_trans (g.hom.orderHom.monotone (by simpa)) hj‚ÇÇ

lemma zero_mem_finset : 0 ‚àà finset g i := by
  rw [mem_finset_iff]
  exact le_of_eq_of_le (IntervalHom.map_bot _) (Fin.zero_le _)

lemma nonempty_finset : (finset g i).Nonempty := ‚ü®_, zero_mem_finset _ _‚ü©

def f (i : Fin (n + 1)) : Fin (m + 1) :=
  (finset g i).max' (nonempty_finset _ _)

lemma f_mem_finset : f g i ‚àà finset g i := Finset.max'_mem _ _

lemma le_iff (i : Fin (n + 1)) (j : Fin (m + 1)) :
    j ‚â§ f g i ‚Üî g j.castSucc ‚â§ i.castSucc := by
  rw [‚Üê mem_finset_iff]
  exact ‚ü®fun h ‚Ü¶ mem_finset_of_le _ _ h (f_mem_finset _ _), Finset.le_max' _ _‚ü©

end

lemma monotone_f : Monotone (f g) := by
  intro i‚ÇÅ i‚ÇÇ h
  rw [le_iff]
  exact le_trans ((le_iff _ _ _).1 (le_refl _)) (Fin.castSucc_le_castSucc_iff.2 h)

open ConcreteCategory

lemma map'_f_apply (j : Fin (m + 2)) :
    II.map' ‚ü®f g, monotone_f g‚ü© j = g j := by
  obtain ‚ü®j, rfl‚ü© | rfl := Fin.eq_castSucc_or_eq_last j
  ¬∑ by_cases h : g j.castSucc = Fin.last (n + 1)
    ¬∑ rw [h, II.map'_eq_last_iff]
      intro i
      simp only [OrderHom.coe_mk, Fin.castSucc_lt_castSucc_iff]
      rw [‚Üê not_le, le_iff]
      intro h'
      rw [h, ‚Üê not_lt] at h'
      exact h' (Fin.castSucc_lt_last i)
    ¬∑ obtain ‚ü®i, hi‚ü© := Fin.eq_castSucc_of_ne_last h
      rw [II.map'_eq_iff]
      constructor
      ¬∑ rw [II.mem_finset_iff]
        refine Or.inr ‚ü®h, ?_‚ü©
        dsimp
        rw [Fin.castSucc_le_castSucc_iff, le_iff, Fin.castSucc_castPred]
      ¬∑ intro k
        obtain ‚ü®k, rfl‚ü© | rfl := Fin.eq_castSucc_or_eq_last k
        ¬∑ intro h'
          simpa only [II.castSucc_mem_finset_iff, OrderHom.coe_mk,
            Fin.castSucc_le_castSucc_iff, le_iff] using h'
        ¬∑ simpa using Fin.le_last _
  ¬∑ dsimp
    simpa only [II.map'_last] using g.hom.map_top.symm

end toInterval‚ÇÄFull

open toInterval‚ÇÄFull in
instance : toInterval‚ÇÄ.Full where
  map_surjective g := ‚ü®Hom.mk ‚ü®f g.unop, monotone_f g.unop‚ü©,
    Quiver.Hom.unop_inj (by ext; apply map'_f_apply)‚ü©

def toInterval : SimplexCategory ‚•§ Interval.{u}·µí·µñ :=
  toInterval‚ÇÄ ‚ãô Interval.uliftFunctor.op

end SimplexCategory

namespace IntervalHom

open SimplexCategory.toInterval‚ÇÄFull in
lemma exists_simplexCategoryHom {n m : ‚Ñï} (g : IntervalHom (Fin (m + 2)) (Fin (n + 2))) :
    ‚àÉ (f : ‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚¶å), f.toIntervalHom = g :=
  ‚ü®.mk ‚ü®_, monotone_f ‚ü®g‚ü©‚ü©, by
    ext i : 3
    exact map'_f_apply ‚ü®g‚ü© i‚ü©

end IntervalHom
