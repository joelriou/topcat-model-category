import TopCatModelCategory.TrivialBundle
import TopCatModelCategory.MorphismPropertyLocally
import TopCatModelCategory.CommSq
import TopCatModelCategory.Pullback
import Mathlib.CategoryTheory.Monoidal.Cartesian.Basic

namespace CategoryTheory

open MorphismProperty MonoidalCategory
  CartesianMonoidalCategory Limits

variable {C : Type*} [Category C]

namespace MorphismProperty

namespace TrivialBundleWithFiber

section

variable {F Y Y' X X' : C} {f : Y ‚ü∂ X} (hf : TrivialBundleWithFiber F f)
  {f' : Y' ‚ü∂ X'} (hf' : TrivialBundleWithFiber F f')
  {t : Y' ‚ü∂ Y} {b : X' ‚ü∂ X} (sq : IsPullback t f' f b)

include hf in
lemma exists_of_splitMono [IsSplitMono b] :
    ‚àÉ (h : TrivialBundleWithFiber F f), h.pullback sq = hf' := by
  obtain ‚ü®u, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ‚ü© : ‚àÉ (u : Y ‚ü∂ Y'), u ‚â´ t ‚â´ hf.r = hf.r ‚àß
      u ‚â´ t ‚â´ f = f ‚â´ retraction b ‚â´ b ‚àß u ‚â´ f' = f ‚â´ retraction b := by
    obtain ‚ü®œÜ, h‚ÇÅ, h‚ÇÇ‚ü© :=
      BinaryFan.IsLimit.exists_lift hf.isLimit (f ‚â´ retraction b ‚â´ b) hf.r
    dsimp at œÜ h‚ÇÅ h‚ÇÇ
    obtain ‚ü®u, rfl, h‚ÇÑ‚ü© := sq.exists_lift œÜ (f ‚â´ retraction b) (by simpa)
    simp only [Category.assoc] at h‚ÇÅ h‚ÇÇ
    exact ‚ü®u, h‚ÇÇ, h‚ÇÅ, h‚ÇÑ‚ü©
  have sq' : IsPullback (u ‚â´ t) f f (retraction b ‚â´ b) :=
    hf.isPullback hf _ _ (by simpa) (by simpa)
  have sq'' : IsPullback u f f' (retraction b) := IsPullback.of_right sq' h‚ÇÉ sq
  have htut : t ‚â´ u ‚â´ t = t := by
    apply BinaryFan.IsLimit.hom_ext hf.isLimit <;> dsimp
    ¬∑ rw [Category.assoc, Category.assoc, h‚ÇÇ, ‚Üê sq''.w_assoc, reassoc_of% h‚ÇÉ,
        sq.w_assoc, IsSplitMono.id_assoc, sq.w]
    ¬∑ rw [Category.assoc, Category.assoc, h‚ÇÅ]
  have htu : t ‚â´ u = ùüô Y' := by
    apply sq.hom_ext
    ¬∑ simpa
    ¬∑ dsimp
      rw [Category.id_comp, Category.assoc, ‚Üê cancel_mono b,
        Category.assoc, Category.assoc, ‚Üê sq.w, reassoc_of% htut]
  refine ‚ü®hf'.pullback sq'', ?_‚ü©
  ext
  simp [reassoc_of% htu]

end

section

variable {F Y X : C} {f : Y ‚ü∂ X} (hf : TrivialBundleWithFiber F f)

section

variable {c : BinaryFan X F} (hc : IsLimit c)

def isoOfIsLimit : Y ‚âÖ c.pt := hf.isLimit.conePointUniqueUpToIso hc

@[reassoc (attr := simp)]
lemma isoOfIsLimit_hom_fst : (hf.isoOfIsLimit hc).hom ‚â´ c.fst = f :=
  hf.isLimit.conePointUniqueUpToIso_hom_comp hc ‚ü®.left‚ü©

@[reassoc (attr := simp)]
lemma isoOfIsLimit_hom_snd : (hf.isoOfIsLimit hc).hom ‚â´ c.snd = hf.r :=
  hf.isLimit.conePointUniqueUpToIso_hom_comp hc ‚ü®.right‚ü©

end

section

variable [CartesianMonoidalCategory C]

def isoTensor : Y ‚âÖ X ‚äó F := hf.isoOfIsLimit (tensorProductIsBinaryProduct _ _)

@[reassoc (attr := simp)]
lemma isoTensor_hom_fst : hf.isoTensor.hom ‚â´ fst _ _ = f :=
  isoOfIsLimit_hom_fst _ _

@[reassoc (attr := simp)]
lemma isoTensor_hom_snd : hf.isoTensor.hom ‚â´ snd _ _ = hf.r :=
  isoOfIsLimit_hom_snd _ _

end

end

variable [CartesianMonoidalCategory C] {X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ Y‚ÇÑ F : C}
  {t : X‚ÇÅ ‚ü∂ X‚ÇÇ} {l : X‚ÇÅ ‚ü∂ X‚ÇÉ} {r : X‚ÇÇ ‚ü∂ X‚ÇÑ} {b : X‚ÇÉ ‚ü∂ X‚ÇÑ}
  {t' : Y‚ÇÅ ‚ü∂ Y‚ÇÇ} {l' : Y‚ÇÅ ‚ü∂ Y‚ÇÉ} {r' : Y‚ÇÇ ‚ü∂ Y‚ÇÑ} {b' : Y‚ÇÉ ‚ü∂ Y‚ÇÑ}
  (sq : IsPushout t l r b) (sq' : IsPushout t' l' r' b')
  {p‚ÇÅ : Y‚ÇÅ ‚ü∂ X‚ÇÅ} {p‚ÇÇ : Y‚ÇÇ ‚ü∂ X‚ÇÇ} {p‚ÇÉ : Y‚ÇÉ ‚ü∂ X‚ÇÉ} {p‚ÇÑ : Y‚ÇÑ ‚ü∂ X‚ÇÑ}
  (sq‚ÇÅ‚ÇÇ : IsPullback t' p‚ÇÅ p‚ÇÇ t) (sq‚ÇÇ‚ÇÑ : IsPullback r' p‚ÇÇ p‚ÇÑ r)
  (sq‚ÇÅ‚ÇÉ : IsPullback l' p‚ÇÅ p‚ÇÉ l) (sq‚ÇÉ‚ÇÑ : IsPullback b' p‚ÇÉ p‚ÇÑ b)
  (h‚ÇÇ : TrivialBundleWithFiber F p‚ÇÇ) (h‚ÇÉ : TrivialBundleWithFiber F p‚ÇÉ)
  [PreservesColimit (span t l) (tensorRight F)]

include sq sq' in
lemma exists_gluing (h‚ÇÅ : h‚ÇÇ.pullback sq‚ÇÅ‚ÇÇ = h‚ÇÉ.pullback sq‚ÇÅ‚ÇÉ) :
    ‚àÉ (h‚ÇÑ : TrivialBundleWithFiber F p‚ÇÑ),
      h‚ÇÑ.pullback sq‚ÇÇ‚ÇÑ = h‚ÇÇ ‚àß h‚ÇÑ.pullback sq‚ÇÉ‚ÇÑ = h‚ÇÉ := by
  simp only [ext_iff, pullback_r] at h‚ÇÅ
  obtain ‚ü®f, hf‚ÇÇ, hf‚ÇÉ‚ü© := sq'.exists_desc h‚ÇÇ.r h‚ÇÉ.r h‚ÇÅ
  obtain ‚ü®e‚ÇÑ, comm‚ÇÅ, comm‚ÇÇ‚ü© :=
    IsPushout.exists_iso_of_isos sq' (sq.map (tensorRight F))
      (h‚ÇÇ.pullback sq‚ÇÅ‚ÇÇ).isoTensor h‚ÇÇ.isoTensor h‚ÇÉ.isoTensor
        (by dsimp; ext <;> simp [sq‚ÇÅ‚ÇÇ.w])
        (by dsimp; ext <;> simp [sq‚ÇÅ‚ÇÉ.w, h‚ÇÅ])
  refine ‚ü®‚ü®f, IsLimit.ofIsoLimit (tensorProductIsBinaryProduct X‚ÇÑ F)
      ((Fan.ext e‚ÇÑ ?_).symm)‚ü©,
    by ext; assumption, by ext; assumption‚ü©
  rintro (_ | _)
  ¬∑ apply sq'.hom_ext <;> dsimp [Fan.proj]
    ¬∑ simpa [reassoc_of% comm‚ÇÅ] using sq‚ÇÇ‚ÇÑ.w
    ¬∑ simpa [reassoc_of% comm‚ÇÇ] using sq‚ÇÉ‚ÇÑ.w
  ¬∑ apply sq'.hom_ext <;> dsimp [Fan.proj]
    ¬∑ simpa [reassoc_of% comm‚ÇÅ]
    ¬∑ simpa [reassoc_of% comm‚ÇÇ]

include sq sq' sq‚ÇÅ‚ÇÇ sq‚ÇÅ‚ÇÉ sq‚ÇÉ‚ÇÑ h‚ÇÉ in
lemma exists_gluing_of_isSplitMono [IsSplitMono l] :
    ‚àÉ (h‚ÇÑ : TrivialBundleWithFiber F p‚ÇÑ),
      h‚ÇÑ.pullback sq‚ÇÇ‚ÇÑ = h‚ÇÇ := by
  obtain ‚ü®h‚ÇÉ', h‚ü© := h‚ÇÉ.exists_of_splitMono (h‚ÇÇ.pullback sq‚ÇÅ‚ÇÇ) sq‚ÇÅ‚ÇÉ
  obtain ‚ü®h‚ÇÑ, eq, _‚ü© := exists_gluing sq sq' sq‚ÇÅ‚ÇÇ sq‚ÇÇ‚ÇÑ sq‚ÇÅ‚ÇÉ sq‚ÇÉ‚ÇÑ h‚ÇÇ h‚ÇÉ' h.symm
  exact ‚ü®h‚ÇÑ, eq‚ü©

end TrivialBundleWithFiber

namespace TrivialBundleWithFiberOver

lemma nonempty_of_isPushout_of_isSplitMono [HasPullbacks C]
    [CartesianMonoidalCategory C] {B : C} {X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : CategoryTheory.Over B}
    {t : X‚ÇÅ ‚ü∂ X‚ÇÇ} {l : X‚ÇÅ ‚ü∂ X‚ÇÉ} {r : X‚ÇÇ ‚ü∂ X‚ÇÑ} {b : X‚ÇÉ ‚ü∂ X‚ÇÑ}
    (sq : IsPushout t l r b) [IsSplitMono l.left]
    {E : C} (p : E ‚ü∂ B) {F : C}
    (h‚ÇÇ : TrivialBundleWithFiberOver F p X‚ÇÇ.hom)
    (h‚ÇÉ : TrivialBundleWithFiberOver F p X‚ÇÉ.hom)
    [PreservesColimit (span t.left l.left) (tensorRight F)]
    [PreservesColimit (span t l) (CategoryTheory.Over.pullback p)] :
    Nonempty (TrivialBundleWithFiberOver F p X‚ÇÑ.hom) := by
  have : PreservesColimit (span ((Over.forget B).map t)
      ((Over.forget B).map l)) (tensorRight F) := by
    assumption
  have : IsSplitMono ((Over.forget B).map l) := by assumption
  obtain ‚ü®h‚ÇÑ, _‚ü© := TrivialBundleWithFiber.exists_gluing_of_isSplitMono
    (sq.map (Over.forget _)) (sq.map (CategoryTheory.Over.pullback p ‚ãô Over.forget _))
    (Over.isPullback_map_left p _) (Over.isPullback_map_left p _)
    (Over.isPullback_map_left p _) (Over.isPullback_map_left p _)
    (h‚ÇÇ.trivialBundleWithFiber (IsPullback.of_hasPullback _ _).flip)
    (h‚ÇÉ.trivialBundleWithFiber (IsPullback.of_hasPullback _ _).flip)
  exact ‚ü®{
    sq := (IsPullback.of_hasPullback _ _).flip
    h := h‚ÇÑ
  }‚ü©

end TrivialBundleWithFiberOver

end MorphismProperty


end CategoryTheory
