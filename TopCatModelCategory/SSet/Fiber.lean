import TopCatModelCategory.SSet.Basic
import TopCatModelCategory.SSet.Subcomplex
import TopCatModelCategory.SSet.CategoryWithFibrations
import TopCatModelCategory.IsFibrant

universe u

open HomotopicalAlgebra CategoryTheory Limits Simplicial Opposite Category
  SSet.modelCategoryQuillen

namespace SSet

instance (n : SimplexCategory·µí·µñ) : Subsingleton (Œî[0].obj n) where
  allEq f g := by
    obtain ‚ü®f, rfl‚ü© := stdSimplex.objEquiv.symm.surjective f
    obtain ‚ü®g, rfl‚ü© := stdSimplex.objEquiv.symm.surjective g
    obtain rfl : f = g := by
      ext i : 3
      dsimp
      apply Subsingleton.elim
    rfl

instance (n : SimplexCategory·µí·µñ) : Unique (Œî[0].obj n) where
  default := stdSimplex.objEquiv.symm (SimplexCategory.const _ _ 0)
  uniq _ := Subsingleton.elim _ _

variable {X Y : SSet.{u}}

def isTerminal (F : SSet.{u}) [‚àÄ (n : SimplexCategory·µí·µñ), Unique (F.obj n)] :
    IsTerminal F :=
  IsTerminal.ofUniqueHom
    (fun X ‚Ü¶ {
      app _ _ := default
      naturality _ _ _ := by ext; apply Subsingleton.elim _ _ })
    (fun X m ‚Ü¶ by ext : 2; apply Subsingleton.elim)

def stdSimplex.objZeroIsTerminal :
    IsTerminal (Œî[0] : SSet.{u}) := isTerminal _

namespace Subcomplex

instance {n : SimplexCategory·µí·µñ} (x : X _‚¶ã0‚¶å) :
    Unique ((ofSimplex x).obj n) where
  default := ‚ü®X.map ((SimplexCategory.const _ _ 0).op) x, _, rfl‚ü©
  uniq := by
    rintro ‚ü®y, hy‚ü©
    simp only [mem_ofSimplex_obj_iff] at hy
    obtain ‚ü®f, rfl‚ü© := hy
    obtain rfl := Subsingleton.elim f (SimplexCategory.const _ _ 0)
    rfl

instance {n : SimplexCategory·µí·µñ} (x : X _‚¶ã0‚¶å) :
    Unique ((ofSimplex x : SSet.{u}).obj n) :=
  inferInstanceAs (Unique ((ofSimplex x).obj n))

noncomputable def ofSimplexIsTerminal (x : X _‚¶ã0‚¶å) :
    IsTerminal (ofSimplex x : SSet.{u}) :=
  isTerminal _

lemma ofSimplex_Œπ_app_zero (x : X _‚¶ã0‚¶å) (y) :
    (ofSimplex x).Œπ.app (op ‚¶ã0‚¶å) y = x := by
  rw [Subsingleton.elim y ‚ü®x, by exact mem_ofSimplex_obj x‚ü©, Subpresheaf.Œπ_app]

@[simp]
lemma ofSimplex_Œπ (x : X _‚¶ã0‚¶å) : (ofSimplex x).Œπ = SSet.const x := by
  ext n ‚ü®_, ‚ü®u‚ü©, rfl‚ü©
  obtain rfl := Subsingleton.elim u (SimplexCategory.const _ _ 0)
  rfl

@[simp]
lemma ofSimplex_obj‚ÇÄ (x : X _‚¶ã0‚¶å) :
    (ofSimplex x).obj (op ‚¶ã0‚¶å) = {x} := by
  ext y
  simp only [Set.mem_singleton_iff, mem_ofSimplex_obj_iff']
  constructor
  ¬∑ rintro ‚ü®y, _, rfl‚ü©
    simp
  ¬∑ rintro rfl
    exact ‚ü®yonedaEquiv (ùüô _), by simp‚ü©

lemma preimage_isPullback (B : Y.Subcomplex) (f : X ‚ü∂ Y) :
    IsPullback (B.preimage f).Œπ (B.fromPreimage f) f B.Œπ where
  w := rfl
  isLimit' := ‚ü®PullbackCone.IsLimit.mk _
      (fun s ‚Ü¶ Subcomplex.lift s.fst (by
        ext n x
        have := congr_fun (NatTrans.congr_app s.condition n) x
        dsimp at this
        simp [this]))
      (fun s ‚Ü¶ rfl)
      (fun s ‚Ü¶ by
        rw [‚Üê cancel_mono B.Œπ]
        exact s.condition)
      (fun s m h‚ÇÅ h‚ÇÇ ‚Ü¶ by
        rw [‚Üê cancel_mono (B.preimage f).Œπ]
        exact h‚ÇÅ)‚ü©

instance (B : Y.Subcomplex) (f : X ‚ü∂ Y) [hf : Fibration f] :
    Fibration (C := SSet.{u}) (B.fromPreimage f) := by
  rw [fibration_iff] at hf ‚ä¢
  exact MorphismProperty.of_isPullback (C := SSet) (preimage_isPullback B f) hf

section

variable (f : X ‚ü∂ Y) (y : Y _‚¶ã0‚¶å)

def fiber : X.Subcomplex := (Subcomplex.ofSimplex y).preimage f

@[simp]
lemma mem_fiber_obj_zero_iff (x : X _‚¶ã0‚¶å) :
    x ‚àà (fiber f y).obj (op ‚¶ã0‚¶å) ‚Üî f.app _ x = y := by
  simp [fiber]

lemma mem_fiber_obj_iff {n : SimplexCategory} (x : X.obj (op n)) :
    x ‚àà (fiber f y).obj _ ‚Üî f.app _ x = Y.map (n.const ‚¶ã0‚¶å 0).op y := by
  simp [fiber, mem_ofSimplex‚ÇÄ_obj_iff]

@[simp]
lemma range_le_fiber_iff {Z : SSet.{u}} (g : Z ‚ü∂ X) :
    Subcomplex.range g ‚â§ fiber f y ‚Üî g ‚â´ f = const y := by
  dsimp only [fiber]
  rw [‚Üê image_le_iff, le_ofSimplex_iff, ‚Üê range_comp,
    ‚Üê cancel_epi (toRangeSubcomplex (g ‚â´ f)),
    toRangeSubcomplex_Œπ, comp_const]

lemma le_fiber_iff (A : X.Subcomplex) :
    A ‚â§ fiber f y ‚Üî A.Œπ ‚â´ f = const y := by
  dsimp only [fiber]
  rw [‚Üê image_le_iff, le_ofSimplex_iff,
    ‚Üê cancel_epi (A.toImage f), comp_const, toImage_Œπ]

@[reassoc (attr := simp)]
lemma fiber_Œπ_comp : (fiber f y).Œπ ‚â´ f = const y := by
  rw [‚Üê le_fiber_iff]

instance isFibrant_fiber [Fibration f] : IsFibrant (C := SSet.{u}) (fiber f y) :=
  (isFibrant_iff_of_isTerminal (C := SSet.{u})
    ((Subcomplex.ofSimplex y).fromPreimage f) (isTerminal _)).2 inferInstance

lemma fiber_isPullback :
    IsPullback (fiber f y).Œπ (stdSimplex.objZeroIsTerminal.from _) f
      (yonedaEquiv.symm y) := by
  let e : Subpresheaf.toPresheaf (Subcomplex.ofSimplex y) ‚âÖ Œî[0] :=
    IsTerminal.uniqueUpToIso (isTerminal _) (isTerminal _)
  refine IsPullback.of_iso ((Subcomplex.ofSimplex y).preimage_isPullback f)
    (Iso.refl _) (Iso.refl _) e (Iso.refl _) (by aesop)
    (by apply (isTerminal _).hom_ext) (by simp) ?_
  ¬∑ dsimp
    rw [Subcomplex.ofSimplex_Œπ, comp_id, yonedaEquiv_symm_zero, comp_const]

variable {y} in
@[simps]
def fiber.basePoint {x : X _‚¶ã0‚¶å} (hx : f.app _ x = y) :
    (Subcomplex.fiber f y : SSet) _‚¶ã0‚¶å :=
  ‚ü®x, by simpa [Subcomplex.fiber]‚ü©

end

section

variable (f : X ‚ü∂ Y) {X' Y' : SSet.{u}} (f' : X' ‚ü∂ Y') (Œ± : X ‚ü∂ X')
    (Œ≤ : Y ‚ü∂ Y') (fac : Œ± ‚â´ f' = f ‚â´ Œ≤) (y : Y _‚¶ã0‚¶å) (y' : Y' _‚¶ã0‚¶å) (h : Œ≤.app _ y = y')

def mapFiber :
    (fiber f y : SSet) ‚ü∂ fiber f' y' :=
  Subcomplex.lift (Subcomplex.Œπ _ ‚â´ Œ±) (by
    apply le_antisymm (by simp)
    have : (range (fiber f y).Œπ).Œπ ‚â´ f = const y := by simp [‚Üê range_le_fiber_iff]
    rw [‚Üê Subcomplex.image_le_iff, Subcomplex.image_top,
      Subcomplex.range_comp, Subcomplex.le_fiber_iff,
      ‚Üê cancel_epi (Subcomplex.toImage _ _),
      toImage_Œπ_assoc, comp_const, fac, reassoc_of% this, const_comp, h])

@[reassoc (attr := simp)]
lemma mapFiber_Œπ :
    mapFiber f f' Œ± Œ≤ fac y y' h ‚â´ (fiber f' y').Œπ =
      (fiber f y).Œπ ‚â´ Œ± := rfl

@[simp]
lemma mapFiber_app_basePoint {x : X _‚¶ã0‚¶å} (hx : f.app _ x = y):
    (mapFiber f f' Œ± Œ≤ fac y y' h).app _ (fiber.basePoint f hx) =
      fiber.basePoint f' (x := Œ±.app _ x) (by
        rw [‚Üê h, ‚Üê hx]
        apply congr_fun (congr_app fac (op ‚¶ã0‚¶å))) :=
  rfl

end

end Subcomplex

end SSet
