import TopCatModelCategory.SSet.PtSimplex

open HomotopicalAlgebra CategoryTheory Simplicial Limits Opposite

universe u

namespace SSet

namespace KanComplex

def œÄ (n : ‚Ñï) (X : SSet.{u}) (x : X _[0]) : Type u :=
  Subcomplex.RelativeMorphism.HomotopyClass
    (subcomplexBoundary n) (Subcomplex.ofSimplex x)
      (const ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©)

def œÄ.mk {n : ‚Ñï} {X : SSet.{u}} {x : X _[0]}
  (f : X.PtSimplex n x) : œÄ n X x := f.homotopyClass

lemma œÄ.mk_surjective {n : ‚Ñï} {X : SSet.{u}} {x : X _[0]} :
    Function.Surjective (œÄ.mk : _ ‚Üí œÄ n X x) :=
  Quot.mk_surjective

instance (n : ‚Ñï) (X : SSet.{u}) (x : X _[0]) : One (œÄ n X x) where
  one := Subcomplex.RelativeMorphism.const.homotopyClass

section

variable {X Y : SSet.{u}} (f : X ‚ü∂ Y) (n : ‚Ñï)
  (x : X _[0]) (y : Y _[0]) (h : f.app _ x = y)

def mapœÄ (p : œÄ n X x) : œÄ n Y y :=
  p.postcomp (.ofSimplex‚ÇÄ f x y h) (by rw [comp_const])

variable {Z : SSet.{u}} (g : Y ‚ü∂ Z) (z : Z _[0]) (h' : g.app _ y = z)

lemma mapœÄ_mapœÄ (p : œÄ n X x) :
    mapœÄ g n y z h' (mapœÄ f n x y h p) =
      mapœÄ (f ‚â´ g) n x z (by simp [h, h']) p := by
  obtain ‚ü®h, rfl‚ü© := p.eq_homotopyClass
  rfl

lemma mapœÄ_comp_mapœÄ :
    mapœÄ g n y z h' ‚àò mapœÄ f n x y h = mapœÄ (f ‚â´ g) n x z (by simp [h, h']) := by
  ext
  apply mapœÄ_mapœÄ

@[simp]
lemma mapœÄ_id (p : œÄ n X x) :
    mapœÄ (ùüô X) n x x rfl p = p := by
  obtain ‚ü®h, rfl‚ü© := p.eq_homotopyClass
  rfl

def mapœÄEquivOfIso (e : X ‚âÖ Y) (n : ‚Ñï) (x : X _[0]) (y : Y _[0]) (h : e.hom.app _ x = y) :
    œÄ n X x ‚âÉ œÄ n Y y where
  toFun := mapœÄ e.hom n x y h
  invFun := mapœÄ e.inv n y x (by simp [‚Üê h])
  left_inv _ := by simp [mapœÄ_mapœÄ]
  right_inv _ := by simp [mapœÄ_mapœÄ]

end

namespace œÄ

variable {X : SSet.{u}}  {x : X _[0]} {n : ‚Ñï} [IsFibrant X]

lemma mk_eq_mk_iff (p q : X.PtSimplex n x) :
    mk p = mk q ‚Üî Nonempty (p.RelStruct‚ÇÄ q) := sorry

noncomputable def mul' (p q : X.PtSimplex (n + 1) x) (i : Fin (n + 1)) :
    X.PtSimplex (n + 1) x :=
  (PtSimplex.MulStruct.nonempty p q i).choose

noncomputable def mulStruct (p q : X.PtSimplex (n + 1) x) (i : Fin (n + 1)) :
    PtSimplex.MulStruct p q (mul' p q i) i :=
  (PtSimplex.MulStruct.nonempty p q i).choose_spec.some

noncomputable def mul (i : Fin (n + 1)) (g‚ÇÅ g‚ÇÇ : œÄ (n + 1) X x) : œÄ (n + 1) X x := by
  refine Quot.lift‚ÇÇ (fun p q ‚Ü¶ mk (mul' p q i)) ?_ ?_ g‚ÇÅ g‚ÇÇ
  ¬∑ rintro p q q' ‚ü®h : q.Homotopy q'‚ü©
    dsimp
    sorry
  ¬∑ rintro p p' q ‚ü®h : p.Homotopy p'‚ü©
    dsimp
    sorry

lemma mul_mk_eq_iff {g‚ÇÅ g‚ÇÇ g‚ÇÅ‚ÇÇ : X.PtSimplex (n + 1) x} {i : Fin (n + 1)} :
    mul i (mk g‚ÇÅ) (mk g‚ÇÇ) = mk g‚ÇÅ‚ÇÇ ‚Üî
      Nonempty (PtSimplex.MulStruct g‚ÇÅ g‚ÇÇ g‚ÇÅ‚ÇÇ i) := by
  sorry

lemma mul_eq_of_mulStruct {g‚ÇÅ g‚ÇÇ g‚ÇÅ‚ÇÇ : X.PtSimplex (n + 1) x} {i : Fin (n + 1)}
    (h : PtSimplex.MulStruct g‚ÇÅ g‚ÇÇ g‚ÇÅ‚ÇÇ i) : mul i (mk g‚ÇÅ) (mk g‚ÇÇ) = mk g‚ÇÅ‚ÇÇ := by
  rw [mul_mk_eq_iff]
  exact ‚ü®h‚ü©

lemma mul_assoc (i : Fin (n + 1)) (g‚ÇÅ g‚ÇÇ g‚ÇÉ : œÄ (n + 1) X x) :
    mul i (mul i g‚ÇÅ g‚ÇÇ) g‚ÇÉ = mul i g‚ÇÅ (mul i g‚ÇÇ g‚ÇÉ) := by
  obtain ‚ü®p‚ÇÅ, rfl‚ü© := g‚ÇÅ.mk_surjective
  obtain ‚ü®p‚ÇÇ, rfl‚ü© := g‚ÇÇ.mk_surjective
  obtain ‚ü®p‚ÇÉ, rfl‚ü© := g‚ÇÉ.mk_surjective
  exact mul_eq_of_mulStruct
    (PtSimplex.MulStruct.assoc (mulStruct p‚ÇÅ p‚ÇÇ i) (mulStruct p‚ÇÇ p‚ÇÉ i)
      (mulStruct p‚ÇÅ (mul' p‚ÇÇ p‚ÇÉ i) i))

@[simp]
lemma one_mul (i : Fin (n + 1)) (g : œÄ (n + 1) X x) :
    mul i 1 g = g := by
  obtain ‚ü®p, rfl‚ü© := g.mk_surjective
  exact mul_eq_of_mulStruct (PtSimplex.MulStruct.oneMul p i)

@[simp]
lemma mul_one (i : Fin (n + 1)) (g : œÄ (n + 1) X x) :
    mul i g 1 = g := by
  obtain ‚ü®p, rfl‚ü© := g.mk_surjective
  exact mul_eq_of_mulStruct (PtSimplex.MulStruct.mulOne p i)

noncomputable instance : Mul (œÄ (n + 1) X x) where
  mul := mul 0

noncomputable instance : Monoid (œÄ (n + 1) X x) where
  mul_assoc := mul_assoc 0
  one_mul := one_mul 0
  mul_one := mul_one 0

/-
variable {X : SSet.{u}} {x : X _[0]} {n : ‚Ñï}

@[reassoc]
lemma comp_map_eq_const
    (s : Subcomplex.RelativeMorphism (subcomplexBoundary n) _
      (const ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©))
    {Y : SSet.{u}} (œÜ : Y ‚ü∂ Œî[n]) [Y.HasDimensionLT n] :
    œÜ ‚â´ s.map = const x := by
  refine (Subcomplex.lift œÜ ?_) ‚â´= s.comm
  apply le_antisymm (by simp)
  rw [‚Üê Subcomplex.image_le_iff, Subcomplex.image_top,
    standardSimplex.subcomplex_le_boundary_iff]
  intro h
  replace h : standardSimplex.id n ‚àà (Subcomplex.range œÜ).obj _ := by simp [h]
  obtain ‚ü®x, hx‚ü© := h
  have : ¬¨ (x ‚àà Y.Degenerate n) := by
    intro hx'
    have := degenerate_map hx' œÜ
    simp [hx, mem_degenerate_iff_non_mem_nondegenerate,
      standardSimplex.non_degenerate_top_dim] at this
  simp [Y.degenerate_eq_top_of_hasDimensionLT n n (by rfl)] at this

@[reassoc (attr := simp)]
lemma Œ¥_map (s : Subcomplex.RelativeMorphism (subcomplexBoundary (n + 1)) _
      (const ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©)) (i : Fin (n + 2)) :
    standardSimplex.map (SimplexCategory.Œ¥ i) ‚â´ s.map = const x :=
  comp_map_eq_const _ _

section

variable {i : Fin (n + 2)}
  (œÜ : ({i}·∂ú : Set _) ‚Üí Subcomplex.RelativeMorphism (subcomplexBoundary n) _
      (const ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©))

lemma exists_subcomplexHorn_desc :
    ‚àÉ (f : Œõ[(n + 1), i] ‚ü∂ X), ‚àÄ (j : ({i}·∂ú : Set _)),
      subcomplexHorn.faceŒπ i j.1 j.2 ‚â´ f =
        (standardSimplex.faceSingletonComplIso j.1).inv ‚â´ (œÜ j).map :=
  ‚ü®(subcomplexHorn.isColimit.{u} i).desc (Multicofork.ofœÄ _ _
      (fun j ‚Ü¶ (standardSimplex.faceSingletonComplIso j.1).inv ‚â´ (œÜ j).map) (by
        rintro ‚ü®‚ü®j, j'‚ü©, hjj'‚ü©
        simp only [Set.mem_setOf_eq] at hjj'
        dsimp
        rw [‚Üê Category.assoc, ‚Üê Category.assoc]
        let S : Finset (Fin (n + 2)) := {j.1, j'.1}
        have hS : S.card = 2 := Finset.card_pair (fun h ‚Ü¶ by
          rw [‚Üê Subtype.ext_iff] at h
          simp [h] at hjj')
        have : HasDimensionLT (Subpresheaf.toPresheaf (standardSimplex.face.{u}
            (S·∂ú : Finset (Fin (n + 2))))) n := by
          apply standardSimplex.face_hasDimensionLT
          rw [‚Üê Nat.add_le_add_iff_right (n := S.card),
            Finset.card_compl_add_card, Fintype.card_fin, hS]
        rw [comp_map_eq_const, comp_map_eq_const])),
    fun j ‚Ü¶ (subcomplexHorn.isColimit i).fac _ (.right j)‚ü©

end

structure MulStruct
    (g‚ÇÅ g‚ÇÇ g‚ÇÅ‚ÇÇ : Subcomplex.RelativeMorphism (subcomplexBoundary (n + 1)) _
      (const ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©))
      (i : Fin (n + 1)) where
  map : Œî[n + 2] ‚ü∂ X
  h‚ÇÅ : standardSimplex.map (SimplexCategory.Œ¥ (i.succ.succ)) ‚â´ map = g‚ÇÅ.map
  h‚ÇÇ : standardSimplex.map (SimplexCategory.Œ¥ (i.castSucc.castSucc)) ‚â´ map = g‚ÇÇ.map
  h_of_lt (j : Fin (n + 3)) (hj : j < i.castSucc.castSucc) :
    standardSimplex.map (SimplexCategory.Œ¥ j) ‚â´ map = const x
  h_of_gt (j : Fin (n + 3)) (hj : i.succ.succ < j) :
    standardSimplex.map (SimplexCategory.Œ¥ j) ‚â´ map = const x
  h‚ÇÅ‚ÇÇ : standardSimplex.map (SimplexCategory.Œ¥ (i.castSucc.succ)) ‚â´ map = g‚ÇÅ‚ÇÇ.map

namespace MulStruct

def mulOne (g : Subcomplex.RelativeMorphism (subcomplexBoundary (n + 1)) _
      (const ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©)) (i : Fin (n + 1)) :
      MulStruct g .const g i where
  map := standardSimplex.map (SimplexCategory.œÉ i.succ) ‚â´ g.map
  h‚ÇÅ := by
    rw [‚Üê Functor.map_comp_assoc, SimplexCategory.Œ¥_comp_œÉ_succ,
      CategoryTheory.Functor.map_id, Category.id_comp]
  h‚ÇÇ := by
    simp [‚Üê Functor.map_comp_assoc,
      SimplexCategory.Œ¥_comp_œÉ_of_le (i := i.castSucc) (j := i) (by rfl)]
  h‚ÇÅ‚ÇÇ := by
    rw [‚Üê Functor.map_comp_assoc, Fin.succ_castSucc, SimplexCategory.Œ¥_comp_œÉ_self,
      CategoryTheory.Functor.map_id, Category.id_comp]
  h_of_lt j hj := by
    have hj' : j ‚â† Fin.last _ := by
      rintro rfl
      rw [Fin.lt_iff_val_lt_val, Fin.val_last, Fin.coe_castSucc] at hj
      omega
    have := SimplexCategory.Œ¥_comp_œÉ_of_le (i := j.castPred hj') (j := i) hj.le
    rw [Fin.castSucc_castPred] at this
    simp [‚Üê Functor.map_comp_assoc, this]
  h_of_gt j hj := by
    obtain ‚ü®j, rfl‚ü© := j.eq_succ_of_ne_zero (by rintro rfl; simp at hj)
    have := SimplexCategory.Œ¥_comp_œÉ_of_gt (i := j) (j := i.succ.castPred (fun h ‚Ü¶ by
      rw [h, Fin.lt_iff_val_lt_val] at hj
      dsimp at hj
      omega))
      (by simpa using hj)
    simp only [Fin.castSucc_castPred] at this
    simp [‚Üê Functor.map_comp_assoc, this]

def oneMul (g : Subcomplex.RelativeMorphism (subcomplexBoundary (n + 1)) _
      (const ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©)) (i : Fin (n + 1)) :
      MulStruct .const g g i where
  map := standardSimplex.map (SimplexCategory.œÉ i.castSucc) ‚â´ g.map
  h‚ÇÅ := by
    rw [‚Üê Functor.map_comp_assoc, SimplexCategory.Œ¥_comp_œÉ_of_gt (by simp)]
    simp
  h‚ÇÇ := by
    rw [‚Üê Functor.map_comp_assoc, SimplexCategory.Œ¥_comp_œÉ_self]
    simp
  h‚ÇÅ‚ÇÇ := by
    rw [‚Üê Functor.map_comp_assoc, SimplexCategory.Œ¥_comp_œÉ_succ]
    simp
  h_of_lt j hj := by
    have hj' : j ‚â† Fin.last _ := fun hj' ‚Ü¶ by
      simp only [hj', Fin.lt_iff_val_lt_val, Fin.val_last, Fin.coe_castSucc] at hj
      omega
    obtain ‚ü®i, rfl‚ü© := i.eq_succ_of_ne_zero (by rintro rfl; simp at hj)
    have this := SimplexCategory.Œ¥_comp_œÉ_of_le (i := j.castPred hj')
      (j := i.castSucc) (by
        simp only [Fin.lt_iff_val_lt_val, Fin.coe_castSucc, Fin.val_succ] at hj
        simp only [Fin.le_iff_val_le_val, Fin.coe_castPred, Fin.coe_castSucc]
        omega)
    rw [Fin.castSucc_castPred] at this
    simp [‚Üê Functor.map_comp_assoc, ‚Üê Fin.succ_castSucc, this]
  h_of_gt j hj := by
    obtain ‚ü®j, rfl‚ü© := j.eq_succ_of_ne_zero (by rintro rfl; simp at hj)
    simp only [Fin.succ_lt_succ_iff] at hj
    simp [‚Üê Functor.map_comp_assoc,
      SimplexCategory.Œ¥_comp_œÉ_of_gt (i.castSucc_lt_succ.trans hj)]

end MulStruct

variable [IsFibrant X]

lemma exists_mulStruct
    (g‚ÇÅ g‚ÇÇ : Subcomplex.RelativeMorphism (subcomplexBoundary (n + 1)) _
      (const ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©)) (i : Fin (n + 1)) :
    ‚àÉ g‚ÇÅ‚ÇÇ, Nonempty (MulStruct g‚ÇÅ g‚ÇÇ g‚ÇÅ‚ÇÇ i) := by
  let œÜ (j : ({i.castSucc.succ}·∂ú : Set _)) :
    (subcomplexBoundary (n + 1)).RelativeMorphism _
      (const ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©) :=
    if j.1 = i.succ.succ then g‚ÇÅ else
      if j.1 = i.castSucc.castSucc then g‚ÇÇ else .const
  obtain ‚ü®f, hf‚ü© := exists_subcomplexHorn_desc œÜ
  obtain ‚ü®Œ±, hŒ±‚ü© := anodyneExtensions.exists_lift_of_isFibrant f
    (anodyneExtensions.subcomplexHorn_Œπ_mem _ _)
  have hŒ±' (j : Fin (n + 3)) (hj : j ‚â† i.castSucc.succ) :
      standardSimplex.map (SimplexCategory.Œ¥ j) ‚â´ Œ± = (œÜ ‚ü®j, hj‚ü©).map := by
    rw [‚Üê cancel_epi (standardSimplex.faceSingletonComplIso j).inv]
    replace hf := hf ‚ü®j, hj‚ü©
    rw [‚Üê subcomplexHorn.faceSingletonComplIso_inv_Œπ] at hf
    dsimp at hf
    rw [‚Üê hf, ‚Üê hŒ±]
    rfl
  let g‚ÇÅ‚ÇÇ : (subcomplexBoundary (n + 1)).RelativeMorphism _
    (const ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©) :=
    { map := standardSimplex.map (SimplexCategory.Œ¥ (i.castSucc.succ)) ‚â´ Œ±
      comm := by
        ext j : 1
        rw [Subcomplex.ofSimplex_Œπ, comp_const, comp_const,
          subcomplexBoundary.Œπ_Œπ_assoc, ‚Üê Functor.map_comp_assoc]
        by_cases h : j ‚â§ i.castSucc
        ¬∑ rw [SimplexCategory.Œ¥_comp_Œ¥ h, Functor.map_comp_assoc, hŒ±', Œ¥_map]
          rw [Fin.succ_castSucc]
          rintro hj
          simp only [Fin.castSucc_inj] at hj
          simp [hj] at h
        ¬∑ simp only [not_le, Fin.castSucc_lt_iff_succ_le] at h
          rw [Fin.succ_castSucc, ‚Üê SimplexCategory.Œ¥_comp_Œ¥ h,
            Functor.map_comp_assoc, hŒ±', Œ¥_map]
          simp only [ne_eq, Fin.succ_inj]
          rintro rfl
          simp at h }
  refine ‚ü®g‚ÇÅ‚ÇÇ, ‚ü®{
    map := Œ±
    h‚ÇÅ := by
      rw [hŒ±' i.succ.succ (by simp [Fin.ext_iff])]
      dsimp [œÜ]
      rw [if_pos rfl]
    h‚ÇÇ := by
      rw [hŒ±' i.castSucc.castSucc (by simp [Fin.ext_iff])]
      dsimp [œÜ]
      rw [if_neg, if_pos rfl]
      simp [Fin.ext_iff]
      omega
    h‚ÇÅ‚ÇÇ := rfl
    h_of_lt j hj := by
      rw [hŒ±' j (by rintro rfl; simp [Fin.lt_iff_val_lt_val] at hj)]
      dsimp [œÜ]
      rw [if_neg, if_neg, Subcomplex.RelativeMorphism.const_map]
      ¬∑ rintro rfl
        simp [Fin.lt_iff_val_lt_val] at hj
      ¬∑ rintro rfl
        simp [Fin.lt_iff_val_lt_val] at hj
        omega
    h_of_gt j hj := by
      rw [hŒ±' j (by rintro rfl; simp [Fin.lt_iff_val_lt_val] at hj)]
      dsimp [œÜ]
      rw [if_neg, if_neg, Subcomplex.RelativeMorphism.const_map]
      ¬∑ rintro rfl
        simp [Fin.lt_iff_val_lt_val] at hj
        omega
      ¬∑ rintro rfl
        simp [Fin.lt_iff_val_lt_val] at hj }‚ü©‚ü©

lemma mk_eq_mk_iff
    (g‚ÇÅ g‚ÇÇ : Subcomplex.RelativeMorphism (subcomplexBoundary (n + 1)) _
      (const ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©)) :
    œÄ.mk g‚ÇÅ = œÄ.mk g‚ÇÇ ‚Üî Nonempty (MulStruct .const g‚ÇÅ g‚ÇÇ 0) := sorry

lemma mk_eq_one_iff
    (g : Subcomplex.RelativeMorphism (subcomplexBoundary (n + 1)) _
      (const ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©)) :
    œÄ.mk g = 1 ‚Üî Nonempty (MulStruct .const g .const 0) := by
  apply mk_eq_mk_iff

lemma mk_eq_one_iff'
    (g : Subcomplex.RelativeMorphism (subcomplexBoundary (n + 1)) _
      (const ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©)) :
    œÄ.mk g = 1 ‚Üî
      ‚àÉ (f : Œî[n + 2] ‚ü∂ X), standardSimplex.map (SimplexCategory.Œ¥ 0) ‚â´ f = g.map ‚àß
        ‚àÄ (i : Fin (n + 2)),
          standardSimplex.map (SimplexCategory.Œ¥ i.succ) ‚â´ f = const x := by
  rw [mk_eq_one_iff]
  constructor
  ¬∑ rintro ‚ü®h‚ü©
    refine ‚ü®h.map, h.h‚ÇÇ, fun i ‚Ü¶ ?_‚ü©
    obtain rfl | ‚ü®i, rfl‚ü© := i.eq_zero_or_eq_succ
    ¬∑ exact h.h‚ÇÅ‚ÇÇ
    ¬∑ obtain rfl | ‚ü®i, rfl‚ü© := i.eq_zero_or_eq_succ
      ¬∑ exact h.h‚ÇÅ
      ¬∑ exact h.h_of_gt _ (by simp [Fin.lt_iff_val_lt_val])
  ¬∑ rintro ‚ü®f, hf‚ÇÅ, hf‚ÇÇ‚ü©
    exact ‚ü®{
      map := f
      h‚ÇÅ := hf‚ÇÇ 1
      h‚ÇÇ := hf‚ÇÅ
      h‚ÇÅ‚ÇÇ := hf‚ÇÇ 0
      h_of_lt j hj := by simp at hj
      h_of_gt j hj := by
        obtain ‚ü®j, rfl‚ü© := j.eq_succ_of_ne_zero (by rintro rfl; simp at hj)
        exact hf‚ÇÇ j }‚ü©

noncomputable def mul'
    (g‚ÇÅ g‚ÇÇ : Subcomplex.RelativeMorphism (subcomplexBoundary (n + 1)) _
      (const ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©)) :
    Subcomplex.RelativeMorphism (subcomplexBoundary (n + 1)) _
      (const ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©) :=
  (exists_mulStruct g‚ÇÅ g‚ÇÇ 0).choose

noncomputable def mulStruct (g‚ÇÅ g‚ÇÇ : Subcomplex.RelativeMorphism (subcomplexBoundary (n + 1)) _
      (const ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©)) :
      MulStruct g‚ÇÅ g‚ÇÇ (mul' g‚ÇÅ g‚ÇÇ) 0 :=
  (exists_mulStruct g‚ÇÅ g‚ÇÇ 0).choose_spec.some

noncomputable instance : Mul (œÄ (n + 1) X x) where
  mul := Quot.lift‚ÇÇ (fun g‚ÇÅ g‚ÇÇ ‚Ü¶ (mul' g‚ÇÅ g‚ÇÇ).homotopyClass) sorry sorry

lemma MulStruct.eq‚ÇÄ {g‚ÇÅ g‚ÇÇ g‚ÇÅ‚ÇÇ : Subcomplex.RelativeMorphism (subcomplexBoundary (n + 1)) _
      (const ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©)} (h : MulStruct g‚ÇÅ g‚ÇÇ g‚ÇÅ‚ÇÇ 0) :
    œÄ.mk g‚ÇÅ * œÄ.mk g‚ÇÇ = œÄ.mk g‚ÇÅ‚ÇÇ := sorry

noncomputable instance : Monoid (œÄ (n + 1) X x) where
  mul_assoc := sorry
  one_mul Œ≥ := by
    obtain ‚ü®g, rfl‚ü© := Œ≥.mk_surjective
    exact (MulStruct.oneMul g 0).eq‚ÇÄ
  mul_one Œ≥ := by
    obtain ‚ü®g, rfl‚ü© := Œ≥.mk_surjective
    exact (MulStruct.mulOne g 0).eq‚ÇÄ

-/
end œÄ

end KanComplex

end SSet
