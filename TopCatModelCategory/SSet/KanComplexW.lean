import TopCatModelCategory.SSet.FundamentalGroupoidAction

universe u

open CategoryTheory HomotopicalAlgebra Simplicial SSet.modelCategoryQuillen Simplicial

namespace SSet

namespace KanComplex

def W : MorphismProperty SSet.{u} := fun X Y f ‚Ü¶
  ‚àÉ (_ : IsFibrant X) (_ : IsFibrant Y),
    (mapFundamentalGroupoid f).IsEquivalence ‚àß
      ‚àÄ (n : ‚Ñï) (x : X _‚¶ã0‚¶å) (y : Y _‚¶ã0‚¶å) (h : f.app _ x = y),
        Function.Bijective (mapœÄ f n x y h)

variable {X Y : SSet.{u}} (f : X ‚ü∂ Y)

lemma W.mk [IsFibrant X] [IsFibrant Y] (h‚ÇÄ‚ÇÅ : (mapFundamentalGroupoid f).IsEquivalence)
    (h : ‚àÄ (n : ‚Ñï) (x : X _‚¶ã0‚¶å) (y : Y _‚¶ã0‚¶å) (h : f.app _ x = y),
      Function.Bijective (mapœÄ f n x y h)) : W f :=
  ‚ü®inferInstance, inferInstance, h‚ÇÄ‚ÇÅ, h‚ü©

variable {f}

lemma W.isFibrant_src (hf : W f) : IsFibrant X := hf.choose

lemma W.isFibrant_tgt (hf : W f) : IsFibrant Y := hf.choose_spec.choose

lemma W.isEquivalence [IsFibrant X] [IsFibrant Y] (hf : W f) :
    (mapFundamentalGroupoid f).IsEquivalence :=
  hf.choose_spec.choose_spec.1

lemma W.bijective (hf : W f) (n : ‚Ñï) (x : X _‚¶ã0‚¶å) (y : Y _‚¶ã0‚¶å) (h : f.app _ x = y) :
    Function.Bijective (mapœÄ f n x y h) :=
  hf.choose_spec.choose_spec.2 n x y h

lemma W.bijective_of_iso {n : ‚Ñï} [IsFibrant X] [IsFibrant Y]
    {x y : FundamentalGroupoid X} (e : x ‚âÖ y)
    (hx : Function.Bijective (mapœÄ f n x.pt _ rfl)) :
    Function.Bijective (mapœÄ f n y.pt _ rfl) := by
  rw [‚Üê isIso_iff_bijective] at hx ‚ä¢
  exact (NatTrans.isIso_app_iff_of_iso
    (FundamentalGroupoid.actionMap f n) e).1 hx

variable (f) in
lemma W.of_iso [IsIso f] [IsFibrant X] [IsFibrant Y] : W f := by
  apply W.mk
  ¬∑ infer_instance
  ¬∑ intro n x y h
    exact (mapœÄEquivOfIso (asIso f) n x y h).bijective

variable (X) in
lemma W.id [IsFibrant X] : W (ùüô X) := W.of_iso _

variable (f) {Z : SSet.{u}} (g : Y ‚ü∂ Z)

lemma W.comp (hf : W f) (hg : W g) : W (f ‚â´ g) := by
  have := hf.isFibrant_src
  have := hf.isFibrant_tgt
  have := hg.isFibrant_tgt
  apply W.mk
  ¬∑ have := hf.isEquivalence
    have := hg.isEquivalence
    exact Functor.isEquivalence_of_iso
      (compMapFundamentalGroupoidIso f g).symm
  ¬∑ rintro n x _ rfl
    dsimp
    rw [‚Üê mapœÄ_comp_mapœÄ f n x _ rfl g _ rfl]
    exact (hg.bijective n _ _ rfl).comp (hf.bijective n x _ rfl)

lemma W.of_postcomp (hg : W g) (hfg : W (f ‚â´ g)) : W f := by
  have := hg.isFibrant_src
  have := hg.isFibrant_tgt
  have := hfg.isFibrant_src
  apply W.mk
  ¬∑ have := hg.isEquivalence
    have := hfg.isEquivalence
    have := Functor.isEquivalence_of_iso
      (compMapFundamentalGroupoidIso f g)
    exact Functor.isEquivalence_of_comp_right _
      (mapFundamentalGroupoid g)
  ¬∑ rintro n x _ rfl
    rw [‚Üê Function.Bijective.of_comp_iff' (hg.bijective n (f.app _ x) _ rfl),
      mapœÄ_comp_mapœÄ f n x _ rfl g _ rfl]
    exact hfg.bijective n x _ rfl

lemma W.of_precomp (hf : W f) (hfg : W (f ‚â´ g)) : W g := by
  have := hf.isFibrant_src
  have := hf.isFibrant_tgt
  have := hfg.isFibrant_tgt
  apply W.mk
  ¬∑ have := hf.isEquivalence
    have := hfg.isEquivalence
    have := Functor.isEquivalence_of_iso
      (compMapFundamentalGroupoidIso f g)
    exact Functor.isEquivalence_of_comp_left
      (mapFundamentalGroupoid f) _
  ¬∑ rintro n y _ rfl
    have hg (x : X _‚¶ã0‚¶å) : Function.Bijective (mapœÄ g n (f.app _ x) _ rfl) := by
      rw [‚Üê Function.Bijective.of_comp_iff _ (hf.bijective n x _ rfl),
        mapœÄ_comp_mapœÄ f n x _ rfl g _ rfl]
      exact hfg.bijective n x _ rfl
    have := hf.isEquivalence
    exact W.bijective_of_iso
      (e := (mapFundamentalGroupoid f).objObjPreimageIso _) (hg _)

instance : W.{u}.HasTwoOutOfThreeProperty where
  comp_mem f g hf hg := W.comp f g hf hg
  of_postcomp f g hg hfg := W.of_postcomp f g hg hfg
  of_precomp f g hf hfg := W.of_precomp f g hf hfg

lemma isFibrant_of_retract {X Y : SSet.{u}} (r : Retract X Y) [hY : IsFibrant Y] : IsFibrant X := by
  rw [isFibrant_iff, HomotopicalAlgebra.fibration_iff] at hY ‚ä¢
  refine MorphismProperty.of_retract ?_ hY
  exact
    { i := Arrow.homMk r.i (ùüô _)
      r := Arrow.homMk r.r (ùüô _) }

attribute [local simp] mapœÄ_mapœÄ

@[simps]
def retractArrowMapœÄ {X X' Y Y' : SSet.{u}} {f : X ‚ü∂ X'} {g : Y ‚ü∂ Y'} (r : RetractArrow f g)
    (n : ‚Ñï) (x : X _‚¶ã0‚¶å) (x' : X' _‚¶ã0‚¶å) (hxx' : f.app _ x = x')
    (y : Y _‚¶ã0‚¶å) (y' : Y' _‚¶ã0‚¶å) (hyy' : g.app _ y = y') (hy : r.left.i.app _ x = y) :
    RetractArrow (C := Type _) (mapœÄ f n x x' hxx') (mapœÄ g n y y' hyy') where
  i := Arrow.homMk (mapœÄ r.left.i n x y hy) ((mapœÄ r.right.i n x' y' (by
        subst hxx' hyy' hy
        exact congr_fun (congr_app r.i_w.symm _) x)))
  r := Arrow.homMk
      (mapœÄ r.left.r n y x (by
        subst hy
        exact congr_fun (congr_app r.left.retract _) x))
      (mapœÄ r.right.r n y' x' (by
        subst hxx' hyy' hy
        have : r.left.i ‚â´ g ‚â´ r.right.r = f := by simp
        exact congr_fun (congr_app this _) x))

open MorphismProperty

section

variable {X X' Y Y' : SSet.{u}} [IsFibrant X] [IsFibrant X'] [IsFibrant Y] [IsFibrant Y']
  {f : X ‚ü∂ X'} {g : Y ‚ü∂ Y'} (r : RetractArrow f g)

include r

lemma essSurj_mapFundamentalGroupoid_of_retract
    [(mapFundamentalGroupoid g).EssSurj] :
    (mapFundamentalGroupoid f).EssSurj where
  mem_essImage x' :=
    ‚ü®(mapFundamentalGroupoid r.left.r).obj
      ((mapFundamentalGroupoid g).objPreimage
      ((mapFundamentalGroupoid r.right.i).obj x')),
        ‚ü®((compMapFundamentalGroupoidIso' r.left.r f (g ‚â´ r.right.r) (by simp)).symm).app _ ‚â™‚â´
          (compMapFundamentalGroupoidIso g r.right.r).app _ ‚â™‚â´
          (mapFundamentalGroupoid r.right.r).mapIso
            (((mapFundamentalGroupoid g).objObjPreimageIso
            ((mapFundamentalGroupoid r.right.i).obj x'))) ‚â™‚â´
          (compMapFundamentalGroupoidIso' r.right.i r.right.r (ùüô _) (by simp)).app _ ‚â™‚â´
          eqToIso (by
            apply FundamentalGroupoid.objEquiv.injective
            dsimp
            have := congr_app r.right.retract (Opposite.op ‚¶ã0‚¶å)
            exact (congr_fun this _).trans (congr_fun this _))‚ü©‚ü©

noncomputable def retractArrowMapFundamentalGroupoidMap (x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X) :
  RetractArrow (C := Type _)
    ((mapFundamentalGroupoid f).map (X := x‚ÇÄ) (Y := x‚ÇÅ))
    ((mapFundamentalGroupoid g).map (X := ((mapFundamentalGroupoid r.left.i).obj x‚ÇÄ))
      (Y := ((mapFundamentalGroupoid r.left.i).obj x‚ÇÅ))) := by
  have e‚ÇÅ : mapFundamentalGroupoid f ‚ãô mapFundamentalGroupoid r.right.i ‚âÖ
    mapFundamentalGroupoid r.left.i ‚ãô mapFundamentalGroupoid g := by
      sorry
  have e‚ÇÇ : mapFundamentalGroupoid r.left.r ‚ãô mapFundamentalGroupoid f ‚âÖ
    mapFundamentalGroupoid g ‚ãô mapFundamentalGroupoid r.right.r := by
      sorry
  have e‚ÇÉ : mapFundamentalGroupoid r.left.i ‚ãô mapFundamentalGroupoid r.left.r ‚âÖ ùü≠ _ := by
    sorry
  let e‚ÇÑ : mapFundamentalGroupoid r.left.i ‚ãô mapFundamentalGroupoid g ‚ãô
      mapFundamentalGroupoid r.right.r ‚âÖ mapFundamentalGroupoid f :=
    isoWhiskerLeft _ e‚ÇÇ.symm ‚â™‚â´ (Functor.associator _ _ _).symm ‚â™‚â´
      isoWhiskerRight e‚ÇÉ _ ‚â™‚â´ Functor.leftUnitor _
  exact {
    i := Arrow.homMk (fun p ‚Ü¶ (mapFundamentalGroupoid r.left.i).map p)
      (fun q ‚Ü¶ e‚ÇÅ.inv.app _ ‚â´ (mapFundamentalGroupoid r.right.i).map q ‚â´ e‚ÇÅ.hom.app _) (by
        ext p
        exact (NatIso.naturality_1 e‚ÇÅ p).symm)
    r := Arrow.homMk
        (fun p ‚Ü¶ e‚ÇÉ.inv.app _ ‚â´ (mapFundamentalGroupoid r.left.r).map p ‚â´ e‚ÇÉ.hom.app _)
        (fun q ‚Ü¶ e‚ÇÑ.inv.app _ ‚â´ (mapFundamentalGroupoid r.right.r).map q ‚â´ e‚ÇÑ.hom.app _) (by
          ext p
          have := (NatIso.naturality_2 e‚ÇÇ p).symm
          dsimp [e‚ÇÑ] at this p ‚ä¢
          simp only [Functor.map_comp, Category.id_comp, Category.comp_id, Category.assoc, this])
    retract := by
      ext p
      ¬∑ exact NatIso.naturality_1 e‚ÇÉ p
      ¬∑ dsimp [e‚ÇÑ] at p ‚ä¢
        simp
        --have pif := NatIso.naturality_1 e‚ÇÅ p
        sorry
      }

lemma faithful_mapFundamentalGroupoid_of_retract
    [(mapFundamentalGroupoid g).Faithful] :
    (mapFundamentalGroupoid f).Faithful where
  map_injective {x‚ÇÄ x‚ÇÅ} := by
    rw [‚Üê mono_iff_injective]
    apply MorphismProperty.of_retract (P := monomorphisms _)
      (retractArrowMapFundamentalGroupoidMap r x‚ÇÄ x‚ÇÅ)
    simp only [monomorphisms.iff]
    rw [mono_iff_injective]
    apply Functor.map_injective

lemma full_mapFundamentalGroupoid_of_retract
    [(mapFundamentalGroupoid g).Full] :
    (mapFundamentalGroupoid f).Full where
  map_surjective {x‚ÇÄ x‚ÇÅ} := by
    rw [‚Üê epi_iff_surjective]
    apply MorphismProperty.of_retract (P := epimorphisms _)
      (retractArrowMapFundamentalGroupoidMap r x‚ÇÄ x‚ÇÅ)
    simp only [epimorphisms.iff]
    rw [epi_iff_surjective]
    apply Functor.map_surjective

lemma isEquivalence_mapFundamentalGroupoid_of_retract
    [(mapFundamentalGroupoid g).IsEquivalence] :
    (mapFundamentalGroupoid f).IsEquivalence where
  full := full_mapFundamentalGroupoid_of_retract r
  faithful := faithful_mapFundamentalGroupoid_of_retract r
  essSurj := essSurj_mapFundamentalGroupoid_of_retract r

end

instance : W.{u}.IsStableUnderRetracts where
  of_retract {X X' Y Y' f g} r hg := by
    have := hg.isFibrant_src
    have := hg.isFibrant_tgt
    have := isFibrant_of_retract r.left
    have := isFibrant_of_retract r.right
    refine W.mk _ ?_ ?_
    ¬∑ have := hg.isEquivalence
      exact isEquivalence_mapFundamentalGroupoid_of_retract r
    ¬∑ intro n x x' h
      rw [‚Üê isIso_iff_bijective]
      apply of_retract (P := isomorphisms (Type u))
        (retractArrowMapœÄ r n x x' h _ _ rfl rfl)
      simp only [isomorphisms.iff]
      rw [isIso_iff_bijective]
      apply hg.bijective

end KanComplex

end SSet
