import TopCatModelCategory.SSet.Pairing

universe v u

open CategoryTheory Simplicial

namespace SSet

namespace Subcomplex

variable {X : SSet.{u}} (A : X.Subcomplex)

structure PairingCore where
  Œπ : Type v
  d (s : Œπ) : ‚Ñï
  type‚ÇÅ (s : Œπ) : X _‚¶ãd s + 1‚¶å
  index (s : Œπ) : Fin (d s + 2)
  nonDegenerate‚ÇÅ (s : Œπ) : type‚ÇÅ s ‚àà X.nonDegenerate _
  nonDegenerate‚ÇÇ (s : Œπ) : X.Œ¥ (index s) (type‚ÇÅ s) ‚àà X.nonDegenerate _
  notMem‚ÇÅ (s : Œπ) : type‚ÇÅ s ‚àâ A.obj _
  notMem‚ÇÇ (s : Œπ) : X.Œ¥ (index s) (type‚ÇÅ s) ‚àâ A.obj _
  injective_type‚ÇÅ {s t : Œπ} (h : S.mk (type‚ÇÅ s) = S.mk (type‚ÇÅ t)) : s = t
  injective_type‚ÇÇ {s t : Œπ}
    (h : S.mk (X.Œ¥ (index s) (type‚ÇÅ s)) = S.mk (X.Œ¥ (index t) (type‚ÇÅ t))) : s = t
  type‚ÇÅ_neq_type‚ÇÇ (s t : Œπ) : S.mk (type‚ÇÅ s) ‚â† S.mk (X.Œ¥ (index t) (type‚ÇÅ t))
  surjective' (x : A.N) :
    ‚àÉ (s : Œπ), x.toS = S.mk (type‚ÇÅ s) ‚à® x.toS = S.mk (X.Œ¥ (index s) (type‚ÇÅ s))

namespace PairingCore

variable {A} (h : A.PairingCore)

@[simps!]
def type‚ÇÅN (s : h.Œπ) : A.N :=
  Subcomplex.N.mk (h.type‚ÇÅ s) (h.nonDegenerate‚ÇÅ s) (h.notMem‚ÇÅ s)

@[simps!]
def type‚ÇÇN (s : h.Œπ) : A.N :=
  Subcomplex.N.mk (X.Œ¥ (h.index s) (h.type‚ÇÅ s)) (h.nonDegenerate‚ÇÇ s)
    (h.notMem‚ÇÇ s)

lemma injective_type‚ÇÅN : Function.Injective h.type‚ÇÅN :=
  fun _ _ hst ‚Ü¶ h.injective_type‚ÇÅ (by rwa [Subcomplex.N.ext_iff, SSet.N.ext_iff] at hst)

lemma injective_type‚ÇÇN : Function.Injective h.type‚ÇÇN :=
  fun s t hst ‚Ü¶ h.injective_type‚ÇÇ (by rwa [Subcomplex.N.ext_iff, SSet.N.ext_iff] at hst)

lemma surjective (x : A.N) :
    ‚àÉ (s : h.Œπ), x = h.type‚ÇÅN s ‚à® x = h.type‚ÇÇN s := by
  obtain ‚ü®s, _ | _‚ü© := h.surjective' x
  ¬∑ exact ‚ü®s, Or.inl (by ext; assumption)‚ü©
  ¬∑ exact ‚ü®s, Or.inr (by ext; assumption)‚ü©

def I : Set A.N := Set.range h.type‚ÇÅN

def II : Set A.N := Set.range h.type‚ÇÇN

@[simps! apply_coe]
noncomputable def equivI : h.Œπ ‚âÉ h.I := Equiv.ofInjective _ h.injective_type‚ÇÅN

@[simps! apply_coe]
noncomputable def equivII : h.Œπ ‚âÉ h.II := Equiv.ofInjective _ h.injective_type‚ÇÇN

@[simps I II]
noncomputable def pairing : A.Pairing where
  I := h.I
  II := h.II
  inter := by
    ext s
    simp only [I, II, Set.mem_inter_iff, Set.mem_range, Set.mem_empty_iff_false, iff_false, not_and,
      not_exists, forall_exists_index]
    rintro t rfl s
    rw [Subcomplex.N.ext_iff, SSet.N.ext_iff]
    exact (h.type‚ÇÅ_neq_type‚ÇÇ t s).symm
  union := by
    ext s
    have := h.surjective s
    simp only [I, II, Set.mem_union, Set.mem_range, Set.mem_univ, iff_true]
    aesop
  p := h.equivII.symm.trans h.equivI

@[simp]
lemma pairing_p_type‚ÇÅN (x : h.Œπ) :
    DFunLike.coe (Œ± := h.II) (Œ≤ := fun _ ‚Ü¶ h.I)
      (h.pairing.p) (h.equivII x) = h.equivI x := by
  simp [pairing]

@[simp]
lemma pairing_p_symm_type‚ÇÅN (x : h.Œπ) :
    DFunLike.coe (Œ± := h.I) (Œ≤ := fun _ ‚Ü¶ h.II)
      h.pairing.p.symm (h.equivI x) = h.equivII x := by
  simp [pairing]

@[simp]
lemma pairing_p_type‚ÇÅN' (x : h.Œπ) :
    DFunLike.coe (Œ± := h.II) (Œ≤ := fun _ ‚Ü¶ h.I)
      (h.pairing.p) ‚ü®h.type‚ÇÇN x, ‚ü®x, rfl‚ü©‚ü© = h.equivI x :=
  h.pairing_p_type‚ÇÅN x

class IsProper where
  isUniquelyCodimOneFace (s : h.Œπ) :
    IsUniquelyCodimOneFace (X.Œ¥ (h.index s) (h.type‚ÇÅ s)) (h.type‚ÇÅ s)

instance [h.IsProper] : h.pairing.IsProper where
  isUniquelyCodimOneFace := by
    rintro ‚ü®_, s, rfl‚ü©
    dsimp
    rw [pairing_p_type‚ÇÅN']
    apply IsProper.isUniquelyCodimOneFace

lemma isProper_pairing_iff : h.pairing.IsProper ‚Üî h.IsProper := by
  refine ‚ü®fun _ ‚Ü¶ ‚ü®fun s ‚Ü¶ ?_‚ü©, fun _ ‚Ü¶ inferInstance‚ü©
  have := h.pairing.isUniquelyCodimOneFace (h.equivII s)
  dsimp at this ‚ä¢
  erw [pairing_p_type‚ÇÅN'] at this
  exact this

def AncestralRel (s t : h.Œπ) : Prop :=
  s ‚â† t ‚àß IsFace (X.Œ¥ (h.index s) (h.type‚ÇÅ s)) (h.type‚ÇÅ t)

lemma ancestralRel_iff (s t : h.Œπ) :
    h.AncestralRel s t ‚Üî h.pairing.AncestralRel (h.equivII s) (h.equivII t) := by
  dsimp [AncestralRel, Pairing.AncestralRel]
  rw [pairing_p_type‚ÇÅN]
  simp

class IsRegular extends h.IsProper where
  wf : WellFounded h.AncestralRel

instance [h.IsRegular] : h.pairing.IsRegular where
  wf := by
    have := IsRegular.wf (h := h)
    rw [WellFounded.wellFounded_iff_no_descending_seq, isEmpty_iff] at this ‚ä¢
    rintro ‚ü®f, hf‚ü©
    exact this ‚ü®fun n ‚Ü¶ h.equivII.symm (f n), fun n ‚Ü¶ by simpa [ancestralRel_iff] using hf n‚ü©

lemma isRegular_pairing_iff : h.pairing.IsRegular ‚Üî h.IsRegular := by
  refine ‚ü®fun _ ‚Ü¶ ?_, fun _ ‚Ü¶ inferInstance‚ü©
  have : h.IsProper := by
    rw [‚Üê isProper_pairing_iff]
    infer_instance
  constructor
  have := h.pairing.wf
  rw [WellFounded.wellFounded_iff_no_descending_seq, isEmpty_iff] at this ‚ä¢
  rintro ‚ü®f, hf‚ü©
  exact this ‚ü®fun n ‚Ü¶ h.equivII (f n), fun n ‚Ü¶ by simpa [ancestralRel_iff] using hf n‚ü©

lemma isRegular_iff [h.IsProper] :
    h.IsRegular ‚Üî
      ‚àÉ (œÜ : h.Œπ ‚Üí ‚Ñï),
        ‚àÄ (x y : h.Œπ) (_ : h.d x = h.d y), h.AncestralRel x y ‚Üí œÜ x < œÜ y := by
  rw [‚Üê isRegular_pairing_iff, Pairing.isRegular_iff]
  constructor
  ¬∑ rintro ‚ü®œÜ, hœÜ‚ü©
    exact ‚ü®fun s ‚Ü¶ œÜ (h.equivII s), fun s t h‚ÇÅ h‚ÇÇ ‚Ü¶
      hœÜ (h.equivII s) (h.equivII t) h‚ÇÅ (by simpa only [‚Üê ancestralRel_iff])‚ü©
  ¬∑ rintro ‚ü®œÜ, hœÜ‚ü©
    refine ‚ü®fun x ‚Ü¶ œÜ (h.equivII.symm x), fun x y h‚ÇÅ h‚ÇÇ ‚Ü¶ ?_‚ü©
    obtain ‚ü®s, rfl‚ü© := h.equivII.surjective x
    obtain ‚ü®t, rfl‚ü© := h.equivII.surjective y
    rw [‚Üê ancestralRel_iff] at h‚ÇÇ
    simpa using hœÜ _ _ h‚ÇÅ h‚ÇÇ

end PairingCore

end Subcomplex

namespace horn

variable {n : ‚Ñï} (i : Fin (n + 2))

@[simps]
def pairingCore : (horn (n + 1) i).PairingCore where
  Œπ := Unit
  d := n
  type‚ÇÅ _ := yonedaEquiv (ùüô _)
  index _ := i
  nonDegenerate‚ÇÅ _ := stdSimplex.id_nonDegenerate (n + 1)
  nonDegenerate‚ÇÇ _ := by
    rw [stdSimplex.mem_nonDegenerate_iff_mono]
    exact inferInstanceAs (Mono (SimplexCategory.Œ¥ i))
  notMem‚ÇÅ _ := SSet.objEquiv_symm_notMem_horn_of_isIso _ _
  notMem‚ÇÇ _ := (objEquiv_symm_Œ¥_notMem_horn_iff _ _).2 rfl
  injective_type‚ÇÅ := by aesop
  injective_type‚ÇÇ := by aesop
  type‚ÇÅ_neq_type‚ÇÇ _ _ := by simp
  surjective' s := by
    obtain ‚ü®d, x, h‚ÇÅ, h‚ÇÇ, rfl‚ü© := s.mk_surjective
    obtain ‚ü®f, rfl‚ü© := stdSimplex.objEquiv.symm.surjective x
    rw [stdSimplex.mem_nonDegenerate_iff_mono, Equiv.apply_symm_apply] at h‚ÇÅ
    dsimp at f
    obtain hd | rfl := (SimplexCategory.le_of_mono (f := f) inferInstance).lt_or_eq
    ¬∑ rw [Nat.lt_succ] at hd
      obtain hd | rfl := hd.lt_or_eq
      ¬∑ exact (h‚ÇÇ (by simp [horn_obj_eq_top i (m := d) (by omega)])).elim
      ¬∑ obtain ‚ü®j, rfl‚ü© := SimplexCategory.eq_Œ¥_of_mono f
        obtain rfl := (objEquiv_symm_Œ¥_notMem_horn_iff _ _).1 h‚ÇÇ
        exact ‚ü®‚ü®‚ü©, Or.inr rfl‚ü©
    ¬∑ obtain rfl := SimplexCategory.eq_id_of_mono f
      exact ‚ü®‚ü®‚ü©, Or.inl rfl‚ü©

instance : (pairingCore i).IsProper where
  isUniquelyCodimOneFace _ := .mk (‚ü®i, rfl, fun _ hj ‚Ü¶ SimplexCategory.Œ¥_injective (
    stdSimplex.objEquiv.symm.injective hj)‚ü©)

instance : (pairingCore i).IsRegular := by
  rw [Subcomplex.PairingCore.isRegular_iff]
  exact ‚ü®fun _ ‚Ü¶ 0, fun _ _ _ h ‚Ü¶ (h.1 rfl).elim‚ü©

noncomputable abbrev pairing := (pairingCore i).pairing

end horn

end SSet
