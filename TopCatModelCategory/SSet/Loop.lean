import TopCatModelCategory.SSet.Contractible
import TopCatModelCategory.SSet.HomotopySequence
import TopCatModelCategory.SSet.Fibrations
import TopCatModelCategory.SSet.KanComplexWHomotopy
import TopCatModelCategory.SSet.FundamentalGroupoidPiOne
import Mathlib.CategoryTheory.Adjunction.Unique

universe u

open CategoryTheory Monoidal Simplicial MonoidalCategory MonoidalClosed
  SSet.modelCategoryQuillen HomotopicalAlgebra Opposite
  CartesianMonoidalCategory Limits

namespace SSet

namespace stdSimplex

-- by E. Riehl
instance {Œ± : Type*} (Œ≤ : Type*) [PartialOrder Œ±] [PartialOrder Œ≤] [DecidableEq (Œ± ‚Üí Œ≤)] :
    DecidableEq (Œ± ‚Üío Œ≤) := fun a b =>
  decidable_of_iff (a.toFun = b.toFun) OrderHom.ext_iff.symm

-- by E. Riehl
instance {n m : ‚Ñï} : DecidableEq (‚¶ãn‚¶å ‚ü∂ ‚¶ãm‚¶å) := fun a b =>
  decidable_of_iff (a.toOrderHom = b.toOrderHom) SimplexCategory.Hom.ext_iff.symm

instance {n d : ‚Ñï} : DecidableEq (Œî[n] _‚¶ãd‚¶å) := fun a b ‚Ü¶
  decidable_of_iff (objEquiv a = objEquiv b) (by simp)

instance {X : SSet} (d : ‚Ñï) [DecidableEq (X _‚¶ãd‚¶å)] : DecidableEq (Œî[d] ‚ü∂ X) := fun a b ‚Ü¶
  decidable_of_iff (yonedaEquiv a = yonedaEquiv b) (by simp)

instance {n m : ‚Ñï} : DecidableEq (Œî[n] ‚ü∂ Œî[m]) := inferInstance

lemma Œ¥_one :
    stdSimplex.Œ¥ (1 : Fin 2) = yonedaEquiv.symm (const _ 0 _) := by
  decide

lemma Œ¥_zero :
    stdSimplex.Œ¥ (0 : Fin 2) = yonedaEquiv.symm (const _ 1 _) := by
  decide

end stdSimplex

variable (X : SSet.{u})

instance (A : SSet.{u}) (a : A _‚¶ã0‚¶å) [IsFibrant X] :
    Fibration ((A.ihomEv a).app X) := by
  have : IsSplitMono (yonedaEquiv.symm a) :=
    ‚ü®‚ü®{ retraction := stdSimplex.isTerminalObj‚ÇÄ.from _ }‚ü©‚ü©
  dsimp [ihomEv]
  infer_instance

abbrev path := (ihom Œî[1]).obj X

noncomputable def pathEv‚ÇÄ : X.path ‚ü∂ X := (Œî[1].ihomEv (stdSimplex.obj‚ÇÄEquiv.symm 0)).app X

noncomputable def pathEv‚ÇÅ : X.path ‚ü∂ X := (Œî[1].ihomEv (stdSimplex.obj‚ÇÄEquiv.symm 1)).app X

instance [IsFibrant X] : Fibration X.pathEv‚ÇÄ := by dsimp [pathEv‚ÇÄ]; infer_instance

instance [IsFibrant X] : Fibration X.pathEv‚ÇÅ := by dsimp [pathEv‚ÇÅ]; infer_instance

noncomputable def pathEv‚ÇÄ‚ÇÅ : X.path ‚ü∂ X ‚äó X := lift X.pathEv‚ÇÄ X.pathEv‚ÇÅ

@[simp] lemma pathEv‚ÇÄ‚ÇÅ_fst : X.pathEv‚ÇÄ‚ÇÅ ‚â´ fst _ _ = X.pathEv‚ÇÄ := rfl
@[simp] lemma pathEv‚ÇÄ‚ÇÅ_snd : X.pathEv‚ÇÄ‚ÇÅ ‚â´ snd _ _ = X.pathEv‚ÇÅ := rfl

namespace boundary‚ÇÅ

noncomputable def ihomObjIso : (ihom (‚àÇŒî[1] : SSet.{u})).obj X ‚âÖ X ‚äó X where
  hom := lift ((MonoidalClosed.pre Œπ‚ÇÄ).app X ‚â´ stdSimplex.ihom‚ÇÄ.hom.app X)
      ((MonoidalClosed.pre Œπ‚ÇÅ).app X ‚â´ stdSimplex.ihom‚ÇÄ.hom.app X)
  inv := curry ((boundary‚ÇÅ.isColimitRightTensor (X ‚äó X)).desc
      (BinaryCofan.mk (snd _ _ ‚â´ fst _ _) (snd _ _ ‚â´ snd _ _)))
  hom_inv_id := by
    apply uncurry_injective
    rw [uncurry_natural_left, uncurry_curry]
    apply hom_ext_rightTensor
    ¬∑ rw [‚Üê whisker_exchange_assoc, whiskerRight_Œπ‚ÇÄ_isColimitRightTensor_desc]
      rfl
    ¬∑ rw [‚Üê whisker_exchange_assoc, whiskerRight_Œπ‚ÇÅ_isColimitRightTensor_desc]
      rfl
  inv_hom_id := by
    ext : 1
    ¬∑ simp only [comp_lift, lift_fst, Category.id_comp, curry_pre_app_assoc,
        whiskerRight_Œπ‚ÇÄ_isColimitRightTensor_desc]
      dsimp
      rw [‚Üê cancel_mono (stdSimplex.ihom‚ÇÄ.inv.app X), Category.assoc, Iso.hom_inv_id_app,
        Category.comp_id]
      rfl
    ¬∑ simp only [comp_lift, lift_snd, Category.id_comp, curry_pre_app_assoc,
        whiskerRight_Œπ‚ÇÅ_isColimitRightTensor_desc]
      dsimp
      rw [‚Üê cancel_mono (stdSimplex.ihom‚ÇÄ.inv.app X), Category.assoc, Iso.hom_inv_id_app,
        Category.comp_id]
      rfl

@[reassoc (attr := simp)]
lemma ihomObjIso_hom_fst :
    (ihomObjIso.{u} X).hom ‚â´ fst _ _ =
      ((MonoidalClosed.pre Œπ‚ÇÄ).app X ‚â´ stdSimplex.ihom‚ÇÄ.hom.app X) := rfl

@[reassoc (attr := simp)]
lemma ihomObjIso_hom_snd :
    (ihomObjIso.{u} X).hom ‚â´ snd _ _ =
      ((MonoidalClosed.pre Œπ‚ÇÅ).app X ‚â´ stdSimplex.ihom‚ÇÄ.hom.app X) := rfl

end boundary‚ÇÅ

lemma pre_boundary_Œπ_app_comp_boundary‚ÇÅ_ihomObjIso :
    (MonoidalClosed.pre ‚àÇŒî[1].Œπ).app X ‚â´ (boundary‚ÇÅ.ihomObjIso X).hom = X.pathEv‚ÇÄ‚ÇÅ := by
  ext : 1
  ¬∑ dsimp [pathEv‚ÇÄ]
    rw [Category.assoc, boundary‚ÇÅ.ihomObjIso_hom_fst, ‚Üê NatTrans.comp_app_assoc,
      ‚Üê MonoidalClosed.pre_map, boundary‚ÇÅ.Œπ‚ÇÄ_Œπ, stdSimplex.Œ¥_one]
    rfl
  ¬∑ rw [Category.assoc, boundary‚ÇÅ.ihomObjIso_hom_snd, ‚Üê NatTrans.comp_app_assoc,
      ‚Üê MonoidalClosed.pre_map, boundary‚ÇÅ.Œπ‚ÇÅ_Œπ, stdSimplex.Œ¥_zero]
    rfl

noncomputable def arrowMkPathEv‚ÇÄ‚ÇÅIso :
    Arrow.mk X.pathEv‚ÇÄ‚ÇÅ ‚âÖ Arrow.mk ((MonoidalClosed.pre ‚àÇŒî[1].Œπ).app X) :=
  Iso.symm (Arrow.isoMk (Iso.refl _) (boundary‚ÇÅ.ihomObjIso X) (by
    simp [pre_boundary_Œπ_app_comp_boundary‚ÇÅ_ihomObjIso]))

instance [IsFibrant X] : Fibration X.pathEv‚ÇÄ‚ÇÅ := by
  rw [HomotopicalAlgebra.fibration_iff]
  refine (MorphismProperty.arrow_mk_iso_iff _ X.arrowMkPathEv‚ÇÄ‚ÇÅIso).2 ?_
  rw [‚Üê HomotopicalAlgebra.fibration_iff]
  infer_instance

noncomputable def pathConst : X ‚ü∂ X.path := curry (snd _ _)

variable (x : X _‚¶ã0‚¶å)

noncomputable def constPath : X.path _‚¶ã0‚¶å := X.pathConst.app _ x

lemma constPath_eq : X.constPath x = ihom‚ÇÄEquiv.symm (const x) :=
  ihom‚ÇÄEquiv.injective (by aesop)

@[simp] lemma pathEv‚ÇÄ_app_constPath : X.pathEv‚ÇÄ.app _ (X.constPath x) = x := by
  simp [pathEv‚ÇÄ, constPath_eq, ihomEv_app_app_ihom‚ÇÄEquiv_symm]

@[simp] lemma pathEv‚ÇÅ_app_constPath : X.pathEv‚ÇÅ.app _ (X.constPath x) = x := by
  simp [pathEv‚ÇÅ, constPath_eq, ihomEv_app_app_ihom‚ÇÄEquiv_symm]

noncomputable abbrev path‚ÇÄ : Subcomplex X.path := Subcomplex.fiber X.pathEv‚ÇÄ x

@[reassoc (attr := simp)]
lemma path‚ÇÄ_Œπ_pathEv‚ÇÄ : (X.path‚ÇÄ x).Œπ ‚â´ X.pathEv‚ÇÄ = const x := by
  simp [path‚ÇÄ]

@[reassoc (attr := simp)]
lemma const_whiskerRight_comp_uncurry_path‚ÇÄ_Œπ (Z : SSet.{u}) :
    const (X := Z) (stdSimplex.const 1 0 (op ‚¶ã0‚¶å)) ‚ñ∑ (X.path‚ÇÄ x).toSSet ‚â´
      uncurry (X.path‚ÇÄ x).Œπ = const x := by
  wlog hZ : Z = Œî[0]
  ¬∑ let p : Z ‚ü∂ Œî[0] := stdSimplex.isTerminalObj‚ÇÄ.from Z
    rw [‚Üê comp_const p, comp_whiskerRight, Category.assoc, this _ _ _ rfl, comp_const]
  subst hZ
  have := X.path‚ÇÄ_Œπ_pathEv‚ÇÄ x
  rw [‚Üê cancel_mono (stdSimplex.ihom‚ÇÄ.inv.app _)] at this
  dsimp [pathEv‚ÇÄ, ihomEv] at this
  simp only [Category.assoc, Iso.hom_inv_id_app, Category.comp_id,
    const_comp, yonedaEquiv_symm_zero] at this
  rw [whiskerRight_comp_uncurry, this]
  rfl

def loop : Subcomplex X.path := X.path‚ÇÄ x ‚äì Subcomplex.fiber X.pathEv‚ÇÅ x

lemma loop_le_path‚ÇÄ : X.loop x ‚â§ X.path‚ÇÄ x := inf_le_left

lemma constPath_mem_path‚ÇÄ : X.constPath x ‚àà (X.path‚ÇÄ x).obj _ := by
  simp [Subcomplex.mem_fiber_obj_zero_iff]

lemma constPath_mem_loop : X.constPath x ‚àà (X.loop x).obj _ := by
  simp [loop, Subcomplex.mem_fiber_obj_zero_iff]

@[simps]
noncomputable def path‚ÇÄBasePoint : (X.path‚ÇÄ x : SSet) _‚¶ã0‚¶å :=
  ‚ü®_, constPath_mem_path‚ÇÄ _ _‚ü©

@[simps]
noncomputable def loopBasePoint : (X.loop x : SSet) _‚¶ã0‚¶å :=
  ‚ü®_, constPath_mem_loop _ _‚ü©

noncomputable abbrev loopŒπ : (X.loop x : SSet) ‚ü∂ X.path‚ÇÄ x :=
  Subcomplex.homOfLE (X.loop_le_path‚ÇÄ x)

noncomputable def path‚ÇÄœÄ : (X.path‚ÇÄ x : SSet) ‚ü∂ X := Subcomplex.Œπ _ ‚â´ X.pathEv‚ÇÅ

@[simp]
lemma loopŒπ_app_loopBasePoint : (X.loopŒπ x).app _ (X.loopBasePoint x) = X.path‚ÇÄBasePoint x := rfl

@[simp]
lemma path‚ÇÄœÄ_app_basePoint : (X.path‚ÇÄœÄ x).app _ (X.path‚ÇÄBasePoint x) = x := by
  simp [path‚ÇÄœÄ]

@[reassoc (attr := simp)]
lemma loopŒπ_path‚ÇÄœÄ : X.loopŒπ x ‚â´ X.path‚ÇÄœÄ x = const x := by
  ext n ‚ü®f, hf‚ü©
  simp only [loop, Subpresheaf.min_obj, Set.mem_inter_iff,
    Subcomplex.mem_fiber_obj_iff X.pathEv‚ÇÅ] at hf
  tauto

lemma isPullback_path‚ÇÄ :
    IsPullback (X.path‚ÇÄ x).Œπ (X.path‚ÇÄœÄ x) X.pathEv‚ÇÄ‚ÇÅ
      (lift (const x) (ùüô _)) := by
  let S := Subcomplex.preimage (Subcomplex.ofSimplex x) (fst X X)
  have S_Œπ_fst : S.Œπ ‚â´ fst _ _ = const x := by
    ext n ‚ü®‚ü®y‚ÇÅ, y‚ÇÇ‚ü©, hy‚ü©
    dsimp [S] at hy
    rw [Set.mem_preimage, Subcomplex.mem_ofSimplex‚ÇÄ_obj_iff] at hy
    aesop
  have hS : S.preimage X.pathEv‚ÇÄ‚ÇÅ = X.path‚ÇÄ x := by aesop
  let e : (S : SSet) ‚âÖ X :=
    { hom := S.Œπ ‚â´ snd _ _
      inv := S.lift (lift (const x) (ùüô X)) (by
        apply le_antisymm (by simp)
        rw [‚Üê Subcomplex.image_le_iff, Subcomplex.image_top, ‚Üê Subcomplex.image_le_iff,
          ‚Üê Subcomplex.range_comp, lift_fst, Subcomplex.le_ofSimplex_iff,
          Subcomplex.range_const_Œπ]) }
  exact (Subcomplex.preimage_isPullback S X.pathEv‚ÇÄ‚ÇÅ).of_iso
      (Subcomplex.isoOfEq hS) (Iso.refl _) e (Iso.refl _) rfl rfl (by simp)
      (by ext : 1 <;> aesop)

instance [IsFibrant X] : Fibration (X.path‚ÇÄœÄ x) := by
  rw [HomotopicalAlgebra.fibration_iff]
  exact MorphismProperty.of_isPullback (X.isPullback_path‚ÇÄ x) (by
    rw [‚Üê HomotopicalAlgebra.fibration_iff]
    infer_instance)

lemma loop_eq_fiber : X.loop x = Subcomplex.fiber X.pathEv‚ÇÄ‚ÇÅ ‚ü®x, x‚ü© := by
  ext ‚ü®n‚ü© y
  simp [loop, Subcomplex.mem_fiber_obj_iff, pathEv‚ÇÄ‚ÇÅ]
  rw [Prod.ext_iff]
  dsimp
  rfl

lemma isPullback_loop' :
    IsPullback (X.loop x).Œπ (stdSimplex.objZeroIsTerminal.from _)
      (X.pathEv‚ÇÄ‚ÇÅ) (yonedaEquiv.symm ‚ü®x, x‚ü©) := by
  rw [loop_eq_fiber]
  convert Subcomplex.fiber_isPullback X.pathEv‚ÇÄ‚ÇÅ (x, x)

lemma isPullback_loop :
    IsPullback (X.loopŒπ x) (stdSimplex.objZeroIsTerminal.from _)
      (X.path‚ÇÄœÄ x) (yonedaEquiv.symm x) := by
  rw [‚Üê IsPullback.paste_horiz_iff (X.isPullback_path‚ÇÄ x)]
  ¬∑ convert X.isPullback_loop' x
    aesop
  ¬∑ simp

instance [IsFibrant X] : IsFibrant (X.loop x : SSet) := by
  rw [isFibrant_iff_of_isTerminal (stdSimplex.objZeroIsTerminal.from _)
    stdSimplex.objZeroIsTerminal, HomotopicalAlgebra.fibration_iff]
  exact MorphismProperty.of_isPullback (X.isPullback_loop x) (by
    rw [‚Üê HomotopicalAlgebra.fibration_iff]
    infer_instance)

namespace stdSimplex

@[simps]
def hDelta‚ÇÅOrderHom : Fin 2 √ó Fin 2 ‚Üío Fin 2 :=
  ‚ü®fun ‚ü®x, y‚ü© ‚Ü¶ match x, y with
    | 0, 0 => 0
    | 0, 1 => 0
    | 1, 0 => 0
    | 1, 1 => 1, by
    rw [monotone_prod_iff]
    constructor
    all_goals
    ¬∑ intro i j k _
      fin_cases i <;> fin_cases j <;> fin_cases k <;> aesop‚ü©

def hDelta‚ÇÅ : Œî[1] ‚äó Œî[1] ‚ü∂ Œî[1] :=
  prodStdSimplex.homEquiv.symm hDelta‚ÇÅOrderHom

@[reassoc (attr := simp)]
lemma whiskerLeft_Œ¥_zero_comp_hDelta‚ÇÅ :
    _ ‚óÅ stdSimplex.Œ¥ 0 ‚â´ hDelta‚ÇÅ = (stdSimplex.rightUnitor _).hom := by
  rw [‚Üê cancel_epi (stdSimplex.rightUnitor _).inv, Iso.inv_hom_id]
  apply yonedaEquiv.injective
  ext i
  fin_cases i <;> rfl

@[reassoc (attr := simp)]
lemma whiskerLeft_Œ¥_one_comp_hDelta‚ÇÅ :
    _ ‚óÅ stdSimplex.Œ¥ 1 ‚â´ hDelta‚ÇÅ = SSet.const (stdSimplex.obj‚ÇÄEquiv.symm 0) := by
  rw [‚Üê cancel_epi (stdSimplex.rightUnitor _).inv]
  apply yonedaEquiv.injective
  ext i
  fin_cases i <;> rfl

@[reassoc (attr := simp)]
lemma const_zero_whiskerRight_comp_hDelta‚ÇÅ :
    SSet.const (X := X) (stdSimplex.const 1 0 (op ‚¶ã0‚¶å)) ‚ñ∑ Œî[1] ‚â´ stdSimplex.hDelta‚ÇÅ =
    SSet.const (stdSimplex.const 1 0 (op ‚¶ã0‚¶å)) := by
  wlog hX : X = Œî[0]
  ¬∑ exact isTerminalObj‚ÇÄ.from X ‚ñ∑ Œî[1] ‚â´= this _ rfl
  subst hX
  rw [‚Üê cancel_epi (stdSimplex.leftUnitor _).inv]
  apply yonedaEquiv.injective
  ext i
  fin_cases i <;> rfl

end stdSimplex

noncomputable def pathHomotopy :
    Homotopy (X.pathEv‚ÇÄ ‚â´ X.pathConst) (ùüô X.path) where
  h := (Œ≤_ _ _).hom ‚â´ curry ((Œ±_ _ _ _).inv ‚â´ uncurry
    ((MonoidalClosed.pre stdSimplex.hDelta‚ÇÅ).app X))
  h‚ÇÄ := by
    rw [MonoidalClosed.uncurry_pre, Subcomplex.RelativeMorphism.botEquiv_symm_apply_map,
      ‚Üê cancel_epi (stdSimplex.rightUnitor _).hom, stdSimplex.rightUnitor_hom_Œπ‚ÇÄ_assoc,
      BraidedCategory.braiding_naturality_right_assoc,
      ‚Üê curry_natural_left, associator_inv_naturality_middle_assoc,
      ‚Üê comp_whiskerRight_assoc, stdSimplex.whiskerLeft_Œ¥_one_comp_hDelta‚ÇÅ,
      ‚Üê curry_natural_left]
    dsimp only [pathConst]
    rw [‚Üê curry_natural_left]
    rfl
  h‚ÇÅ := by
    rw [MonoidalClosed.uncurry_pre, Subcomplex.RelativeMorphism.botEquiv_symm_apply_map,
      ‚Üê cancel_epi (stdSimplex.rightUnitor _).hom, stdSimplex.rightUnitor_hom_Œπ‚ÇÅ_assoc,
      BraidedCategory.braiding_naturality_right_assoc, Category.comp_id,
      ‚Üê curry_natural_left, associator_inv_naturality_middle_assoc,
      ‚Üê comp_whiskerRight_assoc, stdSimplex.whiskerLeft_Œ¥_zero_comp_hDelta‚ÇÅ]
    apply uncurry_injective
    rfl

@[reassoc (attr := simp)]
lemma path‚ÇÄ_Œπ_whiskerLeft_pathHomotopy_h_pathEv‚ÇÄ :
    (X.path‚ÇÄ x).Œπ ‚ñ∑ Œî[1] ‚â´ X.pathHomotopy.h ‚â´ X.pathEv‚ÇÄ = const x := by
  dsimp only [pathHomotopy, pathEv‚ÇÄ, ihomEv, NatTrans.comp_app]
  rw [Category.assoc, MonoidalClosed.uncurry_pre,
    BraidedCategory.braiding_naturality_left_assoc,
    ‚Üê cancel_epi (Œ≤_ _ _).inv, Iso.inv_hom_id_assoc, comp_const,
    curry_pre_app_assoc, ‚Üê curry_natural_left_assoc,
    whiskerRight_tensor_assoc, Iso.hom_inv_id_assoc,
    ‚Üê comp_whiskerRight_assoc, stdSimplex.obj‚ÇÄEquiv_symm_apply,
    yonedaEquiv_symm_zero, stdSimplex.const_zero_whiskerRight_comp_hDelta‚ÇÅ,
    associator_inv_naturality_right_assoc, whisker_exchange_assoc,
    ‚Üê uncurry_id_eq_ev, ‚Üê uncurry_natural_left, Category.comp_id,
    const_whiskerRight_comp_uncurry_path‚ÇÄ_Œπ, comp_const]
  rfl

noncomputable def contractiblePath‚ÇÄ : Contractible (X.path‚ÇÄ x) where
  pt := X.path‚ÇÄBasePoint x
  h := { h := Subcomplex.lift ((X.path‚ÇÄ x).Œπ ‚ñ∑ _ ‚â´ X.pathHomotopy.h) (by simp) }

instance : IsContractible (X.path‚ÇÄ x) := ‚ü®X.contractiblePath‚ÇÄ x‚ü©

end SSet
