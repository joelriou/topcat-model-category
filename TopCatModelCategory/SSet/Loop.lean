import TopCatModelCategory.SSet.HomotopySequence
import TopCatModelCategory.SSet.Fibrations
import Mathlib.CategoryTheory.Adjunction.Unique

universe u

open CategoryTheory Monoidal Simplicial MonoidalCategory MonoidalClosed
  SSet.modelCategoryQuillen HomotopicalAlgebra Opposite
  ChosenFiniteProducts

namespace SSet

variable (X : SSet.{u}) (x : X _‚¶ã0‚¶å)

namespace stdSimplex

noncomputable def ihom‚ÇÄ : ihom Œî[0] ‚âÖ ùü≠ SSet.{u} :=
  Adjunction.rightAdjointUniq (ihom.adjunction Œî[0])
    (Adjunction.id.ofNatIsoLeft
      (NatIso.ofComponents (fun X ‚Ü¶ (leftUnitor X).symm) ))

lemma ihom‚ÇÄ_inv_app : ihom‚ÇÄ.inv.app X =
  curry (leftUnitor X).hom := rfl

end stdSimplex

noncomputable def pathEv‚ÇÄ : (ihom Œî[1]).obj X ‚ü∂ X :=
  (pre (stdSimplex.Œ¥ (0 : Fin 2))).app X ‚â´
    stdSimplex.ihom‚ÇÄ.hom.app _

instance [IsFibrant X] (i : Fin 2) :
    Fibration ((pre (stdSimplex.Œ¥ i)).app X) := by
  sorry

instance [IsFibrant X] : Fibration (X.pathEv‚ÇÄ) := by
  dsimp [pathEv‚ÇÄ]
  infer_instance

protected noncomputable def path‚ÇÄ :
    Subcomplex ((ihom Œî[1]).obj X) :=
  Subcomplex.fiber X.pathEv‚ÇÄ x

noncomputable def path‚ÇÄEv‚ÇÅ : (X.path‚ÇÄ x : SSet) ‚ü∂ X :=
  Subcomplex.Œπ _ ‚â´
    (pre (stdSimplex.Œ¥ (1 : Fin 2))).app X ‚â´
      (stdSimplex.ihom‚ÇÄ.app X).hom

instance [IsFibrant X] : Fibration (X.path‚ÇÄEv‚ÇÅ x) := by
  sorry

noncomputable def path‚ÇÄConst : (X.path‚ÇÄ x : SSet) _‚¶ã0‚¶å :=
  ‚ü®ihom‚ÇÄEquiv.symm (const x), by
    have : curry (snd Œî[1] X) ‚â´ (pre (stdSimplex.Œ¥ (0 : Fin 2))).app X =
        curry (stdSimplex.leftUnitor X).hom := by
      apply uncurry_injective
      rw [uncurry_curry]
      rw [uncurry_natural_left]
      sorry
    simp only [SSet.path‚ÇÄ, pathEv‚ÇÄ, Subcomplex.mem_fiber_obj_zero_iff]
    apply ((stdSimplex.ihom‚ÇÄ.app X).app (op ‚¶ã0‚¶å)).toEquiv.symm.injective
    dsimp
    rw [‚Üê FunctorToTypes.comp, Iso.hom_inv_id_app,
      NatTrans.id_app, types_id_apply,
      stdSimplex.ihom‚ÇÄ_inv_app, ‚Üê this, comp_app,
      types_comp_apply]
    apply congr_arg
    apply ihom‚ÇÄEquiv.injective
    rw [Equiv.apply_symm_apply]
    rfl‚ü©

@[simp]
lemma path‚ÇÄEv‚ÇÅ_app_path‚ÇÄConst :
    (X.path‚ÇÄEv‚ÇÅ x).app (op ‚¶ã0‚¶å) (X.path‚ÇÄConst x) = x := by
  sorry

def loop : Subcomplex (X.path‚ÇÄ x) :=
  Subcomplex.fiber (X.path‚ÇÄEv‚ÇÅ x) x

@[reassoc (attr := simp)]
lemma loop_Œπ_path‚ÇÄEv‚ÇÅ : (X.loop x).Œπ ‚â´ X.path‚ÇÄEv‚ÇÅ x = const x := by
  simp [loop]

noncomputable def loop.basePoint : (X.loop x : SSet) _‚¶ã0‚¶å :=
  Subcomplex.fiber.basePoint _ (path‚ÇÄEv‚ÇÅ_app_path‚ÇÄConst X x)

end SSet
