import TopCatModelCategory.SSet.HomotopySequence
import Mathlib.CategoryTheory.Adjunction.Unique

universe u

open CategoryTheory Monoidal Simplicial MonoidalCategory MonoidalClosed
  SSet.modelCategoryQuillen HomotopicalAlgebra

namespace SSet

variable (X : SSet.{u}) (x : X _‚¶ã0‚¶å)

namespace stdSimplex

noncomputable def ihom‚ÇÄ : ihom Œî[0] ‚âÖ ùü≠ SSet.{u} :=
  Adjunction.rightAdjointUniq (ihom.adjunction Œî[0])
    (Adjunction.id.ofNatIsoLeft
      (NatIso.ofComponents (fun X ‚Ü¶ (leftUnitor X).symm) ))

lemma ihom‚ÇÄ_inv_app : ihom‚ÇÄ.inv.app X =
  curry (leftUnitor X).hom := rfl

end stdSimplex

noncomputable def pathEv‚ÇÄ : (ihom Œî[1]).obj X ‚ü∂ X :=
  (pre (stdSimplex.Œ¥ (0 : Fin 2))).app X ‚â´
    stdSimplex.ihom‚ÇÄ.hom.app _

protected noncomputable def path‚ÇÄ :
    Subcomplex ((ihom Œî[1]).obj X) :=
  Subcomplex.fiber X.pathEv‚ÇÄ x

noncomputable def path‚ÇÄEv‚ÇÅ : (X.path‚ÇÄ x : SSet) ‚ü∂ X :=
  Subcomplex.Œπ _ ‚â´
    (pre (stdSimplex.Œ¥ (1 : Fin 2))).app X ‚â´
      (stdSimplex.ihom‚ÇÄ.app X).hom

def loop : Subcomplex (X.path‚ÇÄ x) :=
  Subcomplex.fiber (X.path‚ÇÄEv‚ÇÅ x) x

@[reassoc (attr := simp)]
lemma loop_Œπ_path‚ÇÄEv‚ÇÅ : (X.loop x).Œπ ‚â´ X.path‚ÇÄEv‚ÇÅ x = const x := by
  simp [loop]

end SSet
