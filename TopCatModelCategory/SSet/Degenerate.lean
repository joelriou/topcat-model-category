import Mathlib.AlgebraicTopology.SimplicialSet.Basic

universe u

open CategoryTheory Simplicial Limits Opposite

namespace SSet

variable (X : SSet.{u})

def Degenerate (n : ‚Ñï) : Set (X _[n]) :=
  setOf (fun x ‚Ü¶ ‚àÉ (m : SimplexCategory) (_ : m.len < n) (f : ([n] : SimplexCategory) ‚ü∂ m),
    x ‚àà Set.range (X.map f.op))

def NonDegenerate (n : ‚Ñï) : Set (X _[n]) := (X.Degenerate n)·∂ú

@[simp]
lemma degenerate_zero : X.Degenerate 0 = ‚ä• := by
  ext x
  simp only [Set.bot_eq_empty, Set.mem_empty_iff_false, iff_false]
  rintro ‚ü®m, hm, _‚ü©
  simp at hm

@[simp]
lemma nondegenerate_zero : X.NonDegenerate 0 = ‚ä§ := by
  simp [NonDegenerate]

variable {n : ‚Ñï}

lemma mem_nondegenerate_iff_not_mem_degenerate (x : X _[n]) :
    x ‚àà X.NonDegenerate n ‚Üî x ‚àâ X.Degenerate n := Iff.rfl

lemma mem_degenerate_iff_non_mem_nondegenerate (x : X _[n]) :
    x ‚àà X.Degenerate n ‚Üî x ‚àâ X.NonDegenerate n := by
  simp [NonDegenerate]

lemma œÉ_mem_degenerate (i : Fin (n + 1)) (x : X _[n]) :
    X.œÉ i x ‚àà X.Degenerate (n + 1) :=
  ‚ü®[n], by dsimp; omega, SimplexCategory.œÉ i, Set.mem_range_self x‚ü©

lemma mem_degenerate_iff (x : X _[n]) :
    x ‚àà X.Degenerate n ‚Üî ‚àÉ (m : ‚Ñï) (_ : m < n)
      (f : ([n] : SimplexCategory) ‚ü∂ [m]) (_ : Epi f),
        x ‚àà Set.range (X.map f.op) := by
  trans ‚àÉ (m : SimplexCategory) (_ : m.len < n)
      (f : ([n] : SimplexCategory) ‚ü∂ m) (_ : Epi f),
        x ‚àà Set.range (X.map f.op)
  ¬∑ constructor
    ¬∑ rintro ‚ü®m, hm, f, hf, hx‚ü©
      rw [‚Üê image.fac f, op_comp] at hx
      have := SimplexCategory.len_le_of_mono (f := image.Œπ f) inferInstance
      exact ‚ü®_, by omega, factorThruImage f, inferInstance, by aesop‚ü©
    ¬∑ rintro ‚ü®m, hm, f, hf, hx‚ü©
      exact ‚ü®m, hm, f, hx‚ü©
  ¬∑ constructor
    ¬∑ rintro ‚ü®m, hm, f, hf, hx‚ü©
      exact ‚ü®m.len, hm, f, hf, hx‚ü©
    ¬∑ rintro ‚ü®m, hm, f, hf, hx‚ü©
      exact ‚ü®[m], hm, f, hf, hx‚ü©

lemma degenerate_eq_iUnion_range_œÉ :
    X.Degenerate (n + 1) = ‚®Ü (i : Fin (n + 1)), Set.range (X.œÉ i) := by
  ext x
  constructor
  ¬∑ intro hx
    rw [mem_degenerate_iff] at hx
    obtain ‚ü®m, hm, f, hf, y, rfl‚ü© := hx
    obtain ‚ü®i, Œ∏, rfl‚ü© := SimplexCategory.eq_œÉ_comp_of_not_injective f (fun hf ‚Ü¶ by
      have := SimplexCategory.le_of_mono (f := f) (by
        rwa [SimplexCategory.mono_iff_injective])
      omega)
    aesop
  ¬∑ intro hx
    simp only [Set.iSup_eq_iUnion, Set.mem_iUnion, Set.mem_range] at hx
    obtain ‚ü®i, y, rfl‚ü© := hx
    apply œÉ_mem_degenerate

lemma exists_non_degenerate (x : X _[n]) :
    ‚àÉ (m : ‚Ñï) (f : ([n] : SimplexCategory) ‚ü∂ [m]) (_ : Epi f)
      (y : X.NonDegenerate m), x = X.map f.op y := by
  revert x
  induction n with
  | zero =>
      intro x
      exact ‚ü®0, ùüô _, inferInstance, ‚ü®x, by simp‚ü©, by simp‚ü©
  | succ n hn =>
      intro x
      by_cases hx : x ‚àà X.NonDegenerate (n + 1)
      ¬∑ exact ‚ü®n + 1, ùüô _, inferInstance, ‚ü®x, hx‚ü©, by simp‚ü©
      ¬∑ simp only [‚Üê mem_degenerate_iff_non_mem_nondegenerate,
          degenerate_eq_iUnion_range_œÉ, Set.iSup_eq_iUnion,
          Set.mem_iUnion, Set.mem_range] at hx
        obtain ‚ü®i, y, rfl‚ü© := hx
        obtain ‚ü®m, f, hf, z, rfl‚ü© := hn y
        exact ‚ü®_, SimplexCategory.œÉ i ‚â´ f, inferInstance, z, by simp; rfl‚ü©

lemma isIso_of_non_degenerate (x : X.NonDegenerate n)
    {m : SimplexCategory} (f : ([n] : SimplexCategory) ‚ü∂ m) [Epi f]
    (y : X.obj (op m)) (hy : X.map f.op y = x) :
    IsIso f := by
  obtain ‚ü®x, hx‚ü© := x
  induction' m using SimplexCategory.rec with m
  rw [mem_nondegenerate_iff_not_mem_degenerate] at hx
  by_contra!
  refine hx ‚ü®_ ,?_, f, y, hy‚ü©
  by_contra!
  obtain rfl : m = n :=
    le_antisymm (SimplexCategory.len_le_of_epi (f := f) inferInstance) this
  obtain rfl := SimplexCategory.eq_id_of_epi f
  exact this inferInstance

lemma unique_dimension_non_degenerate_aux (x : X _[n])
    {m‚ÇÅ m‚ÇÇ : ‚Ñï} (f‚ÇÅ : ([n] : SimplexCategory) ‚ü∂ [m‚ÇÅ]) [Epi f‚ÇÅ]
    (y‚ÇÅ : X.NonDegenerate m‚ÇÅ) (hy‚ÇÅ : x = X.map f‚ÇÅ.op y‚ÇÅ)
    (f‚ÇÇ : ([n] : SimplexCategory) ‚ü∂ [m‚ÇÇ]) [Epi f‚ÇÇ]
    (y‚ÇÇ : X _[m‚ÇÇ]) (hy‚ÇÇ : x = X.map f‚ÇÇ.op y‚ÇÇ) : m‚ÇÅ ‚â§ m‚ÇÇ := by
  have := isSplitEpi_of_epi f‚ÇÅ
  let g := section_ f‚ÇÅ ‚â´ f‚ÇÇ
  have h : X.map g.op y‚ÇÇ = y‚ÇÅ := by
    dsimp [g]
    rw [FunctorToTypes.map_comp_apply, ‚Üê hy‚ÇÇ, hy‚ÇÅ, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp,
      IsSplitEpi.id, op_id, FunctorToTypes.map_id_apply]
  rw [‚Üê image.fac g, op_comp, FunctorToTypes.map_comp_apply] at h
  have := X.isIso_of_non_degenerate y‚ÇÅ (factorThruImage g) _ h
  exact SimplexCategory.len_le_of_mono (f := factorThruImage g ‚â´ image.Œπ g) inferInstance

lemma unique_non_degenerate‚ÇÅ (x : X _[n])
    {m‚ÇÅ m‚ÇÇ : ‚Ñï} (f‚ÇÅ : ([n] : SimplexCategory) ‚ü∂ [m‚ÇÅ]) [Epi f‚ÇÅ]
    (y‚ÇÅ : X.NonDegenerate m‚ÇÅ) (hy‚ÇÅ : x = X.map f‚ÇÅ.op y‚ÇÅ)
    (f‚ÇÇ : ([n] : SimplexCategory) ‚ü∂ [m‚ÇÇ]) [Epi f‚ÇÇ]
    (y‚ÇÇ : X.NonDegenerate m‚ÇÇ) (hy‚ÇÇ : x = X.map f‚ÇÇ.op y‚ÇÇ) : m‚ÇÅ = m‚ÇÇ :=
  le_antisymm (X.unique_dimension_non_degenerate_aux x f‚ÇÅ y‚ÇÅ hy‚ÇÅ f‚ÇÇ y‚ÇÇ hy‚ÇÇ)
    (X.unique_dimension_non_degenerate_aux x f‚ÇÇ y‚ÇÇ hy‚ÇÇ f‚ÇÅ y‚ÇÅ hy‚ÇÅ)

lemma unique_non_degenerate‚ÇÇ (x : X _[n])
    {m : ‚Ñï} (f‚ÇÅ : ([n] : SimplexCategory) ‚ü∂ [m]) [Epi f‚ÇÅ]
    (y‚ÇÅ : X.NonDegenerate m) (hy‚ÇÅ : x = X.map f‚ÇÅ.op y‚ÇÅ)
    (f‚ÇÇ : ([n] : SimplexCategory) ‚ü∂ [m]) [Epi f‚ÇÇ]
    (y‚ÇÇ : X.NonDegenerate m) (hy‚ÇÇ : x = X.map f‚ÇÇ.op y‚ÇÇ) : y‚ÇÅ = y‚ÇÇ := sorry

lemma unique_non_degenerate‚ÇÉ (x : X _[n])
    {m : ‚Ñï} (f‚ÇÅ : ([n] : SimplexCategory) ‚ü∂ [m]) [Epi f‚ÇÅ]
    (f‚ÇÇ : ([n] : SimplexCategory) ‚ü∂ [m]) [Epi f‚ÇÇ]
    (y : X.NonDegenerate m) (hy‚ÇÅ : x = X.map f‚ÇÅ.op y)
    (hy‚ÇÇ : x = X.map f‚ÇÇ.op y) : f‚ÇÅ = f‚ÇÇ := sorry


end SSet
