import TopCatModelCategory.SSet.Subcomplex

universe u

open CategoryTheory Category Simplicial Limits Opposite

lemma SimplexCategory.congr_toOrderHom_apply {m n : SimplexCategory} {f g : m ‚ü∂ n} (h : f = g)
    (x : Fin (m.len + 1)) : f.toOrderHom x = g.toOrderHom x := by rw [h]

namespace SSet

variable (X : SSet.{u})

def Degenerate (n : ‚Ñï) : Set (X _[n]) :=
  setOf (fun x ‚Ü¶ ‚àÉ (m : ‚Ñï) (_ : m < n) (f : ([n] : SimplexCategory) ‚ü∂ [m]),
    x ‚àà Set.range (X.map f.op))

def NonDegenerate (n : ‚Ñï) : Set (X _[n]) := (X.Degenerate n)·∂ú

@[simp]
lemma degenerate_zero : X.Degenerate 0 = ‚ä• := by
  ext x
  simp only [Set.bot_eq_empty, Set.mem_empty_iff_false, iff_false]
  rintro ‚ü®m, hm, _‚ü©
  simp at hm

@[simp]
lemma nondegenerate_zero : X.NonDegenerate 0 = ‚ä§ := by
  simp [NonDegenerate]

variable {n : ‚Ñï}

lemma mem_nondegenerate_iff_not_mem_degenerate (x : X _[n]) :
    x ‚àà X.NonDegenerate n ‚Üî x ‚àâ X.Degenerate n := Iff.rfl

lemma mem_degenerate_iff_non_mem_nondegenerate (x : X _[n]) :
    x ‚àà X.Degenerate n ‚Üî x ‚àâ X.NonDegenerate n := by
  simp [NonDegenerate]

lemma œÉ_mem_degenerate (i : Fin (n + 1)) (x : X _[n]) :
    X.œÉ i x ‚àà X.Degenerate (n + 1) :=
  ‚ü®n, by omega, SimplexCategory.œÉ i, Set.mem_range_self x‚ü©

lemma mem_degenerate_iff (x : X _[n]) :
    x ‚àà X.Degenerate n ‚Üî ‚àÉ (m : ‚Ñï) (_ : m < n)
      (f : ([n] : SimplexCategory) ‚ü∂ [m]) (_ : Epi f),
        x ‚àà Set.range (X.map f.op) := by
  constructor
  ¬∑ rintro ‚ü®m, hm, f, y, hy‚ü©
    rw [‚Üê image.fac f, op_comp] at hy
    have : _ ‚â§ m := SimplexCategory.len_le_of_mono (f := image.Œπ f) inferInstance
    exact ‚ü®(image f).len, by omega, factorThruImage f, inferInstance, by aesop‚ü©
  ¬∑ rintro ‚ü®m, hm, f, hf, hx‚ü©
    exact ‚ü®m, hm, f, hx‚ü©

lemma degenerate_eq_iUnion_range_œÉ :
    X.Degenerate (n + 1) = ‚®Ü (i : Fin (n + 1)), Set.range (X.œÉ i) := by
  ext x
  constructor
  ¬∑ intro hx
    rw [mem_degenerate_iff] at hx
    obtain ‚ü®m, hm, f, hf, y, rfl‚ü© := hx
    obtain ‚ü®i, Œ∏, rfl‚ü© := SimplexCategory.eq_œÉ_comp_of_not_injective f (fun hf ‚Ü¶ by
      have := SimplexCategory.le_of_mono (f := f) (by
        rwa [SimplexCategory.mono_iff_injective])
      omega)
    aesop
  ¬∑ intro hx
    simp only [Set.iSup_eq_iUnion, Set.mem_iUnion, Set.mem_range] at hx
    obtain ‚ü®i, y, rfl‚ü© := hx
    apply œÉ_mem_degenerate

lemma exists_non_degenerate (x : X _[n]) :
    ‚àÉ (m : ‚Ñï) (f : ([n] : SimplexCategory) ‚ü∂ [m]) (_ : Epi f)
      (y : X.NonDegenerate m), x = X.map f.op y := by
  revert x
  induction n with
  | zero =>
      intro x
      exact ‚ü®0, ùüô _, inferInstance, ‚ü®x, by simp‚ü©, by simp‚ü©
  | succ n hn =>
      intro x
      by_cases hx : x ‚àà X.NonDegenerate (n + 1)
      ¬∑ exact ‚ü®n + 1, ùüô _, inferInstance, ‚ü®x, hx‚ü©, by simp‚ü©
      ¬∑ simp only [‚Üê mem_degenerate_iff_non_mem_nondegenerate,
          degenerate_eq_iUnion_range_œÉ, Set.iSup_eq_iUnion,
          Set.mem_iUnion, Set.mem_range] at hx
        obtain ‚ü®i, y, rfl‚ü© := hx
        obtain ‚ü®m, f, hf, z, rfl‚ü© := hn y
        exact ‚ü®_, SimplexCategory.œÉ i ‚â´ f, inferInstance, z, by simp; rfl‚ü©

lemma isIso_of_non_degenerate (x : X.NonDegenerate n)
    {m : SimplexCategory} (f : ([n] : SimplexCategory) ‚ü∂ m) [Epi f]
    (y : X.obj (op m)) (hy : X.map f.op y = x) :
    IsIso f := by
  obtain ‚ü®x, hx‚ü© := x
  induction' m using SimplexCategory.rec with m
  rw [mem_nondegenerate_iff_not_mem_degenerate] at hx
  by_contra!
  refine hx ‚ü®_ ,?_, f, y, hy‚ü©
  by_contra!
  obtain rfl : m = n :=
    le_antisymm (SimplexCategory.len_le_of_epi (f := f) inferInstance) this
  obtain rfl := SimplexCategory.eq_id_of_epi f
  exact this inferInstance

namespace unique_non_degenerate

section

variable {X} {x : X _[n]}
  {m‚ÇÅ m‚ÇÇ : ‚Ñï} {f‚ÇÅ : ([n] : SimplexCategory) ‚ü∂ [m‚ÇÅ]} (hf‚ÇÅ : SplitEpi f‚ÇÅ)
  (y‚ÇÅ : X.NonDegenerate m‚ÇÅ) (hy‚ÇÅ : x = X.map f‚ÇÅ.op y‚ÇÅ)
  (f‚ÇÇ : ([n] : SimplexCategory) ‚ü∂ [m‚ÇÇ])
  (y‚ÇÇ : X _[m‚ÇÇ]) (hy‚ÇÇ : x = X.map f‚ÇÇ.op y‚ÇÇ)

def g := hf‚ÇÅ.section_ ‚â´ f‚ÇÇ

variable {f‚ÇÇ y‚ÇÅ y‚ÇÇ}

include hf‚ÇÅ hy‚ÇÅ hy‚ÇÇ

lemma map_g_op_y‚ÇÇ : X.map (g hf‚ÇÅ f‚ÇÇ).op y‚ÇÇ = y‚ÇÅ := by
  dsimp [g]
  rw [FunctorToTypes.map_comp_apply, ‚Üê hy‚ÇÇ, hy‚ÇÅ, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp,
    SplitEpi.id, op_id, FunctorToTypes.map_id_apply]

lemma isIso_factorThruImage_g :
    IsIso (factorThruImage (g hf‚ÇÅ f‚ÇÇ)) := by
  have := map_g_op_y‚ÇÇ hf‚ÇÅ hy‚ÇÅ hy‚ÇÇ
  rw [‚Üê image.fac (g hf‚ÇÅ f‚ÇÇ), op_comp, FunctorToTypes.map_comp_apply] at this
  exact X.isIso_of_non_degenerate y‚ÇÅ (factorThruImage (g hf‚ÇÅ f‚ÇÇ)) _ this

lemma mono_g : Mono (g hf‚ÇÅ f‚ÇÇ) := by
  have := isIso_factorThruImage_g hf‚ÇÅ hy‚ÇÅ hy‚ÇÇ
  rw [‚Üê image.fac (g hf‚ÇÅ f‚ÇÇ)]
  infer_instance

lemma le : m‚ÇÅ ‚â§ m‚ÇÇ := by
  have := isIso_factorThruImage_g hf‚ÇÅ hy‚ÇÅ hy‚ÇÇ
  exact SimplexCategory.len_le_of_mono
    (f := factorThruImage (g hf‚ÇÅ f‚ÇÇ) ‚â´ image.Œπ _) inferInstance

end

section

variable {X} {x : X _[n]} {m : ‚Ñï} {f‚ÇÅ : ([n] : SimplexCategory) ‚ü∂ [m]}
  {y‚ÇÅ : X.NonDegenerate m} (hy‚ÇÅ : x = X.map f‚ÇÅ.op y‚ÇÅ)
  {f‚ÇÇ : ([n] : SimplexCategory) ‚ü∂ [m]} {y‚ÇÇ : X _[m]} (hy‚ÇÇ : x = X.map f‚ÇÇ.op y‚ÇÇ)

include hy‚ÇÅ hy‚ÇÇ

lemma g_eq_id (hf‚ÇÅ : SplitEpi f‚ÇÅ) : g hf‚ÇÅ f‚ÇÇ = ùüô _ := by
  have := mono_g hf‚ÇÅ hy‚ÇÅ hy‚ÇÇ
  apply SimplexCategory.eq_id_of_mono

end

end unique_non_degenerate
section

open unique_non_degenerate
lemma unique_non_degenerate‚ÇÅ (x : X _[n])
    {m‚ÇÅ m‚ÇÇ : ‚Ñï} (f‚ÇÅ : ([n] : SimplexCategory) ‚ü∂ [m‚ÇÅ]) [Epi f‚ÇÅ]
    (y‚ÇÅ : X.NonDegenerate m‚ÇÅ) (hy‚ÇÅ : x = X.map f‚ÇÅ.op y‚ÇÅ)
    (f‚ÇÇ : ([n] : SimplexCategory) ‚ü∂ [m‚ÇÇ]) [Epi f‚ÇÇ]
    (y‚ÇÇ : X.NonDegenerate m‚ÇÇ) (hy‚ÇÇ : x = X.map f‚ÇÇ.op y‚ÇÇ) : m‚ÇÅ = m‚ÇÇ := by
  obtain ‚ü®‚ü®hf‚ÇÅ‚ü©‚ü© := isSplitEpi_of_epi f‚ÇÅ
  obtain ‚ü®‚ü®hf‚ÇÇ‚ü©‚ü© := isSplitEpi_of_epi f‚ÇÇ
  exact le_antisymm (le hf‚ÇÅ hy‚ÇÅ hy‚ÇÇ) (le hf‚ÇÇ hy‚ÇÇ hy‚ÇÅ)

lemma unique_non_degenerate‚ÇÇ (x : X _[n])
    {m : ‚Ñï} (f‚ÇÅ : ([n] : SimplexCategory) ‚ü∂ [m]) [Epi f‚ÇÅ]
    (y‚ÇÅ : X.NonDegenerate m) (hy‚ÇÅ : x = X.map f‚ÇÅ.op y‚ÇÅ)
    (f‚ÇÇ : ([n] : SimplexCategory) ‚ü∂ [m])
    (y‚ÇÇ : X.NonDegenerate m) (hy‚ÇÇ : x = X.map f‚ÇÇ.op y‚ÇÇ) : y‚ÇÅ = y‚ÇÇ := by
  obtain ‚ü®‚ü®hf‚ÇÅ‚ü©‚ü© := isSplitEpi_of_epi f‚ÇÅ
  ext
  simpa [g_eq_id hy‚ÇÅ hy‚ÇÇ hf‚ÇÅ] using (map_g_op_y‚ÇÇ hf‚ÇÅ hy‚ÇÅ hy‚ÇÇ).symm

lemma unique_non_degenerate‚ÇÉ (x : X _[n])
    {m : ‚Ñï} (f‚ÇÅ : ([n] : SimplexCategory) ‚ü∂ [m]) [Epi f‚ÇÅ]
    (y‚ÇÅ : X.NonDegenerate m) (hy‚ÇÅ : x = X.map f‚ÇÅ.op y‚ÇÅ)
    (f‚ÇÇ : ([n] : SimplexCategory) ‚ü∂ [m])-- [Epi f‚ÇÇ]
    (y‚ÇÇ : X.NonDegenerate m) (hy‚ÇÇ : x = X.map f‚ÇÇ.op y‚ÇÇ) : f‚ÇÅ = f‚ÇÇ := by
  ext x : 3
  suffices ‚àÉ (hf‚ÇÅ : SplitEpi f‚ÇÅ), hf‚ÇÅ.section_.toOrderHom (f‚ÇÅ.toOrderHom x) = x by
    obtain ‚ü®hf‚ÇÅ, hf‚ÇÅ'‚ü© := this
    dsimp at hf‚ÇÅ'
    simpa [g, hf‚ÇÅ'] using (SimplexCategory.congr_toOrderHom_apply (g_eq_id hy‚ÇÅ hy‚ÇÇ hf‚ÇÅ)
      (f‚ÇÅ.toOrderHom x)).symm
  obtain ‚ü®‚ü®hf‚ü©‚ü© := isSplitEpi_of_epi f‚ÇÅ
  let Œ± (y : Fin (m + 1)) : Fin (n + 1) :=
    if y = f‚ÇÅ.toOrderHom x then x else hf.section_.toOrderHom y
  have hŒ±‚ÇÅ (y : Fin (m + 1)) : f‚ÇÅ.toOrderHom (Œ± y) = y := by
    dsimp [Œ±]
    split_ifs with hy
    ¬∑ rw [hy]
    ¬∑ apply SimplexCategory.congr_toOrderHom_apply hf.id
  have hŒ±‚ÇÇ : Monotone Œ± := by
    rintro y‚ÇÅ y‚ÇÇ h
    by_contra! h'
    suffices y‚ÇÇ ‚â§ y‚ÇÅ by simp [show y‚ÇÅ = y‚ÇÇ by omega] at h'
    simpa only [hŒ±‚ÇÅ, hŒ±‚ÇÅ] using f‚ÇÅ.toOrderHom.monotone h'.le
  exact ‚ü®{ section_ := SimplexCategory.Hom.mk ‚ü®Œ±, hŒ±‚ÇÇ‚ü©, id := by ext : 3; apply hŒ±‚ÇÅ },
    by simp [Œ±]‚ü©

end

namespace Subcomplex

variable {X} (A : X.Subcomplex)

lemma mem_degenerate_iff {n : ‚Ñï} (x : A.obj (op (.mk n))) :
    x ‚àà Degenerate A n ‚Üî x.1 ‚àà X.Degenerate n := by
  rw [SSet.mem_degenerate_iff, SSet.mem_degenerate_iff]
  constructor
  ¬∑ rintro ‚ü®m, hm, f, _, ‚ü®y, rfl‚ü©‚ü©
    exact ‚ü®m, hm, f, inferInstance, ‚ü®y.1, rfl‚ü©‚ü©
  ¬∑ obtain ‚ü®x, hx‚ü© := x
    rintro ‚ü®m, hm, f, _, ‚ü®y, rfl‚ü©‚ü©
    refine ‚ü®m, hm, f, inferInstance, ‚ü®‚ü®y, ?_‚ü©, rfl‚ü©‚ü©
    have := isSplitEpi_of_epi f
    simpa only [Set.mem_preimage, ‚Üê op_comp, ‚Üê FunctorToTypes.map_comp_apply,
      IsSplitEpi.id, op_id, FunctorToTypes.map_id_apply] using A.map (section_ f).op hx

lemma mem_non_degenerate_iff {n : ‚Ñï} (x : A.obj (op (.mk n))) :
    x ‚àà NonDegenerate A n ‚Üî x.1 ‚àà X.NonDegenerate n := by
  rw [mem_nondegenerate_iff_not_mem_degenerate,
    mem_nondegenerate_iff_not_mem_degenerate, mem_degenerate_iff]

lemma le_iff_contains_nonDegenerate (B : X.Subcomplex) :
    A ‚â§ B ‚Üî ‚àÄ (n : ‚Ñï) (x : X.NonDegenerate n), x.1 ‚àà A.obj _ ‚Üí x.1 ‚àà B.obj _ := by
  constructor
  ¬∑ aesop
  ¬∑ rintro h ‚ü®n‚ü© x hx
    induction' n using SimplexCategory.rec with n
    obtain ‚ü®m, f, _, ‚ü®a, ha‚ü©, ha'‚ü© := exists_non_degenerate A ‚ü®x, hx‚ü©
    simp only [Subpresheaf.toPresheaf_obj, Subtype.ext_iff,
      Subpresheaf.toPresheaf_map_coe] at ha'
    subst ha'
    rw [mem_non_degenerate_iff] at ha
    exact B.map f.op (h _ ‚ü®_, ha‚ü© a.2)

lemma eq_top_iff_contains_nonDegenerate :
    A = ‚ä§ ‚Üî ‚àÄ (n : ‚Ñï), X.NonDegenerate n ‚äÜ A.obj _ := by
  simpa using le_iff_contains_nonDegenerate ‚ä§ A

lemma degenerate_eq_top_iff (n : ‚Ñï) :
    Degenerate A n = ‚ä§ ‚Üî (X.Degenerate n ‚äì A.obj _) = A.obj _ := by
  constructor
  ¬∑ intro h
    ext x
    simp only [Set.inf_eq_inter, Set.mem_inter_iff, and_iff_right_iff_imp]
    intro hx
    simp only [‚Üê A.mem_degenerate_iff ‚ü®x, hx‚ü©, h, Set.top_eq_univ, Set.mem_univ]
  ¬∑ intro h
    simp only [Set.inf_eq_inter, Set.inter_eq_right] at h
    ext x
    simpa [A.mem_degenerate_iff] using h x.2

variable (X) in
lemma iSup_ofSimplex_nonDegenerate_eq_top :
    ‚®Ü (x : Œ£ (p : ‚Ñï), X.NonDegenerate p), ofSimplex x.2.1 = ‚ä§ := by
  rw [eq_top_iff_contains_nonDegenerate]
  intro n x hx
  simp only [Subpresheaf.iSup_obj, Set.iSup_eq_iUnion, Set.mem_iUnion, Sigma.exists,
    Subtype.exists, exists_prop]
  exact ‚ü®n, x, hx, mem_ofSimplex_obj x‚ü©

end Subcomplex

section

variable {X} {Y : SSet.{u}}

lemma degenerate_map {n : ‚Ñï} {x : X _[n]} (hx : x ‚àà X.Degenerate n) (f : X ‚ü∂ Y) :
    f.app _ x ‚àà Y.Degenerate n := by
  obtain ‚ü®m, hm, g, y, rfl‚ü© := hx
  exact ‚ü®m, hm, g, f.app _ y, by rw [FunctorToTypes.naturality]‚ü©

lemma degenerate_le_preimage (f : X ‚ü∂ Y) (n : ‚Ñï) :
    X.Degenerate n ‚â§ Set.preimage (f.app _) (Y.Degenerate n) :=
  fun _ hx ‚Ü¶ degenerate_map hx f

lemma image_degenerate_le (f : X ‚ü∂ Y) (n : ‚Ñï) :
    Set.image (f.app _) (X.Degenerate n) ‚äÜ Y.Degenerate n := by
  simpa using degenerate_le_preimage f n

lemma degenerate_iff_of_isIso (f : X ‚ü∂ Y) [IsIso f] {n : ‚Ñï} (x : X _[n]) :
    f.app _ x ‚àà Y.Degenerate n ‚Üî x ‚àà X.Degenerate n := by
  constructor
  ¬∑ intro hy
    have h‚ÇÅ := congr_fun ((congr_app (IsIso.hom_inv_id f)) (op [n])) x
    dsimp at h‚ÇÅ
    simpa [h‚ÇÅ] using degenerate_map hy (inv f)
  ¬∑ exact fun hx ‚Ü¶ degenerate_map hx f

lemma non_degenerate_iff_of_isIso (f : X ‚ü∂ Y) [IsIso f] {n : ‚Ñï} (x : X _[n]) :
    f.app _ x ‚àà Y.NonDegenerate n ‚Üî x ‚àà X.NonDegenerate n := by
  simp only [mem_nondegenerate_iff_not_mem_degenerate,
    degenerate_iff_of_isIso]

attribute [local simp] non_degenerate_iff_of_isIso in
@[simps]
def nonDegenerateEquivOfIso (e : X ‚âÖ Y) (n : ‚Ñï) :
    X.NonDegenerate n ‚âÉ Y.NonDegenerate n where
  toFun := fun ‚ü®x, hx‚ü© ‚Ü¶ ‚ü®e.hom.app _ x, by aesop‚ü©
  invFun := fun ‚ü®y, hy‚ü© ‚Ü¶ ‚ü®e.inv.app _ y, by aesop‚ü©
  left_inv _ := by aesop
  right_inv _ := by aesop

end

end SSet
