import TopCatModelCategory.SSet.FibrationSequenceAdj
import TopCatModelCategory.SSet.SingularConnected

open CategoryTheory HomotopicalAlgebra SSet.modelCategoryQuillen
  Simplicial

namespace SSet

namespace KanComplex

variable (X : SSet.{0})

instance : IsFibrant ((toTop ‚ãô TopCat.toSSet).obj X) := by dsimp; infer_instance

instance [IsFibrant X] : IsFibrant ((ùü≠ _).obj X) := by dsimp; infer_instance

lemma W.sSetTopAdj_unit_app [IsFibrant X] :
    W (sSetTopAdj.unit.app X) := by
  revert X
  suffices ‚àÄ (n : ‚Ñï), ‚àÄ (X : SSet.{0}) [IsFibrant X] (x : X _‚¶ã0‚¶å),
      Function.Bijective (mapœÄ (sSetTopAdj.unit.app X) n x _ rfl) by
    intro X _
    have hX : IsFibrant ((ùü≠ _).obj X) := by dsimp; infer_instance
    rw [W_iff]
    exact ‚ü®bijective_mapœÄ‚ÇÄ_sSetTopAdj_unit_app _,
      by rintro n x _ rfl; exact this _ _ _‚ü©
  intro n
  induction n with
  | zero =>
    intro X _ x
    rw [bijective_mapœÄ‚ÇÄ_iff_bijective_mapœÄ_zero]
    apply bijective_mapœÄ‚ÇÄ_sSetTopAdj_unit_app
  | succ n hn =>
    intro X _ x
    constructor
    ¬∑ rw [Group.injective_iff_of_map_mul _ (by simp [mapœÄ_mul])]
      dsimp
      intro y hy
      have := (FibrationSequence.Œ¥_naturality_apply
        ((FibrationSequence.loop X x).ŒπtoTopToSSet) y).symm
      dsimp at this
      obtain ‚ü®z, rfl‚ü© := (FibrationSequence.loop X x).exact‚ÇÉ y
        ((hn (X.loop x) (X.loopBasePoint x)).1 (a‚ÇÇ := 1) (by simp [this, hy]))
      obtain rfl : z = 1 := by dsimp; apply Subsingleton.elim
      simp
    ¬∑ intro y
      obtain ‚ü®z, hz‚ü© := (hn _ _).2 ((FibrationSequence.loop X x).toTopToSSet.Œ¥ n y)
      dsimp at y z hz
      obtain ‚ü®w, rfl‚ü© := (FibrationSequence.loop X x).exact‚ÇÅ z
        (by dsimp; apply Subsingleton.elim)
      refine ‚ü®w, (FibrationSequence.bijective_Œ¥_toTopToSSet_loop X x n).1 ?_‚ü©
      have := (FibrationSequence.Œ¥_naturality_apply
        ((FibrationSequence.loop X x).ŒπtoTopToSSet) w).symm
      dsimp at w this
      rw [‚Üê hz, this]

end KanComplex

end SSet
