import TopCatModelCategory.SSet.Subcomplex
import TopCatModelCategory.SSet.Degenerate

open CategoryTheory Simplicial

namespace SSet

variable (X : SSet.{u})

/-- `X.skeleton n` is the subcomplex of `X` generated by (non degenerate)
simplices of dimension `< n`. -/
def skeleton : ℕ →o X.Subcomplex where
  toFun n := ⨆ (i : Fin n) (x : X.nonDegenerate i), Subcomplex.ofSimplex x.1
  monotone' i j h := by
    simp only [iSup_le_iff]
    intro k x
    exact le_trans (by exact le_trans (by rfl) (le_iSup _ x))
      (le_iSup _ ⟨k, by omega⟩)

lemma mem_skeleton {i : ℕ} (x : X _⦋i⦌) {n : ℕ} (hi : i < n) :
    x ∈ (X.skeleton n).obj _ := by
  obtain ⟨j, f, _, y, rfl⟩ := X.exists_nonDegenerate x
  suffices Subcomplex.ofSimplex y.1 ≤ X.skeleton n from
    (X.skeleton n).map _ (this _ (Subcomplex.mem_ofSimplex_obj _))
  exact le_trans (by exact le_trans (by rfl) (le_iSup _ y))
    (le_iSup _ ⟨j, lt_of_le_of_lt
      (SimplexCategory.len_le_of_epi (f := f) inferInstance) hi⟩)

lemma ofSimplex_le_skeleton {i : ℕ} (x : X _⦋i⦌) {n : ℕ} (hi : i < n) :
    Subcomplex.ofSimplex x ≤ X.skeleton n := by
  simpa using X.mem_skeleton x hi

@[simp]
lemma skeleton_zero : X.skeleton 0 = ⊥ := by
  simp [skeleton]

lemma iSup_skeleton : ⨆ (n : ℕ), X.skeleton n = ⊤ := by
  apply le_antisymm (by simp)
  rw [Subcomplex.le_iff_contains_nonDegenerate]
  intro n x _
  simp only [Subpresheaf.iSup_obj, Set.mem_iUnion]
  exact ⟨n + 1, mem_skeleton _ _ (by omega)⟩

variable {X} {Y : SSet.{u}} (i : X ⟶ Y)

def skeletonOfMono [Mono i] : ℕ →o Y.Subcomplex where
  toFun n := Subcomplex.range i ⊔ Y.skeleton n
  monotone' n m h := by
    dsimp
    simp only [sup_le_iff, le_sup_left, true_and]
    exact le_trans (Y.skeleton.monotone h) le_sup_right

variable [Mono i]

lemma skeleton_le_skeletonOfMono (n : ℕ) :
    Y.skeleton n ≤ skeletonOfMono i n := le_sup_right

@[simp]
lemma skeletonOfMono_zero : skeletonOfMono i 0 = Subcomplex.range i := by
  simp [skeletonOfMono]

lemma iSup_skeletonOfMono : ⨆ (n : ℕ), skeletonOfMono i n = ⊤ := by
  apply le_antisymm (by simp)
  rw [← Y.iSup_skeleton, iSup_le_iff]
  intro n
  exact le_trans (skeleton_le_skeletonOfMono i n) (le_iSup _ n)

end SSet
