import TopCatModelCategory.SSet.CategoryWithFibrations
import TopCatModelCategory.SSet.DeformationRetract
import TopCatModelCategory.SSet.Degenerate

universe u

open CategoryTheory HomotopicalAlgebra Simplicial MonoidalCategory
  ChosenFiniteProducts Category Limits

namespace SSet.Subcomplex

variable {Œπ : Type*} {X : SSet.{u}} [Preorder Œπ]
  (f : Œπ ‚Üí X.Subcomplex) (hf : Monotone f)

@[simps]
def coconeOfMonotone : Cocone (hf.functor ‚ãô toPresheafFunctor) where
  pt := (‚®Ü (i : Œπ), f i :)
  Œπ := { app i := homOfLE (le_iSup f i) }

def isColimitCoconeOfMonotone [IsDirected Œπ (¬∑ ‚â§ ¬∑)] :
    IsColimit (coconeOfMonotone f hf) := by
  sorry

end SSet.Subcomplex

lemma CategoryTheory.IsPullback.types_ext {A B C D : Type u} {t : A ‚ü∂ B} {l : A ‚ü∂ C}
    {r : B ‚ü∂ D} {b : C ‚ü∂ D} (h : IsPullback t l r b) {x y : A}
    (h‚ÇÅ : t x = t y) (h‚ÇÇ : l x = l y) : x = y := by
  apply (PullbackCone.IsLimit.equivPullbackObj (h.isLimit)).injective
  ext <;> assumption

namespace SSet

variable {E B : SSet.{u}} (p : E ‚ü∂ B)

structure SimplexOverRelStruct {n : ‚Ñï} (x y : E _[n]) where
  h : Œî[n] ‚äó Œî[1] ‚ü∂ E
  h‚ÇÄ : Œπ‚ÇÄ ‚â´ h = (yonedaEquiv _ _).symm x
  h‚ÇÅ : Œπ‚ÇÅ ‚â´ h = (yonedaEquiv _ _).symm y
  œÄ : Œî[n] ‚ü∂ B
  d : ‚àÇŒî[n] ‚ü∂ E
  hœÄ : h ‚â´ p = fst _ _ ‚â´ œÄ
  hd : (subcomplexBoundary.{u} n).Œπ ‚ñ∑ Œî[1] ‚â´ h = fst _ _ ‚â´ d

class MinimalFibration extends Fibration p : Prop where
  minimal {n : ‚Ñï} {x y : E _[n]} (rel : SimplexOverRelStruct p x y) : x = y

def minimalFibrations : MorphismProperty (SSet.{u}) :=
  fun _ _ p ‚Ü¶ MinimalFibration p

lemma minimalFibrations_iff : minimalFibrations p ‚Üî MinimalFibration p := Iff.rfl

instance : MinimalFibration (ùüô B) where
  minimal {n x y} rel := by
    apply (yonedaEquiv _ _).symm.injective
    simp only [‚Üê rel.h‚ÇÄ, ‚Üê rel.h‚ÇÅ, ‚Üê cancel_mono (ùüô B), assoc, rel.hœÄ,
      lift_fst_assoc, id_comp]

instance : minimalFibrations.{u}.ContainsIdentities where
  id_mem B := by
    rw [minimalFibrations_iff]
    infer_instance

namespace SimplexOverRelStruct

attribute [reassoc] h‚ÇÄ h‚ÇÅ hœÄ hd

variable {p} {n : ‚Ñï} {x y : E _[n]} (rel : SimplexOverRelStruct p x y)

include rel in
@[reassoc]
lemma hœÄ' : (yonedaEquiv _ _).symm x ‚â´ p = (yonedaEquiv _ _).symm y ‚â´ p := by
  simp only [‚Üê rel.h‚ÇÄ, ‚Üê rel.h‚ÇÅ, assoc, rel.hœÄ, lift_fst_assoc, id_comp]

include rel in
lemma eq [MinimalFibration p] : x = y := MinimalFibration.minimal rel

include rel in
lemma eq_of_degenerate (hx : x ‚àà E.Degenerate n) (hy : y ‚àà E.Degenerate n) :
    x = y := by
  obtain _ | n := n
  ¬∑ simp at hx
  have h‚ÇÄ := (subcomplexBoundary.{u} (n + 1)).Œπ ‚â´= rel.h‚ÇÄ
  have h‚ÇÅ := (subcomplexBoundary.{u} (n + 1)).Œπ ‚â´= rel.h‚ÇÅ
  erw [‚Üê Œπ‚ÇÄ_comp_assoc, rel.hd, Œπ‚ÇÄ_fst_assoc] at h‚ÇÄ
  erw [‚Üê Œπ‚ÇÅ_comp_assoc, rel.hd, Œπ‚ÇÅ_fst_assoc] at h‚ÇÅ
  refine eq_of_degenerate_of_Œ¥_eq hx hy (fun i ‚Ü¶ ?_)
  have := subcomplexBoundary.Œπ i ‚â´= (h‚ÇÄ.symm.trans h‚ÇÅ)
  rw [subcomplexBoundary.Œπ_Œπ_assoc, subcomplexBoundary.Œπ_Œπ_assoc,
    ‚Üê yonedaEquiv_symm_map, ‚Üê yonedaEquiv_symm_map] at this
  exact (yonedaEquiv _ _).symm.injective this

noncomputable def map
    {E' B' : SSet.{u}} {p' : E' ‚ü∂ B'} (œÜ : Arrow.mk p ‚ü∂ Arrow.mk p')
    {x' y' : E' _[n]} (hx' : œÜ.left.app _ x = x') (hy' : œÜ.left.app _ y = y') :
    SimplexOverRelStruct p' x' y' where
  h := rel.h ‚â´ œÜ.left
  h‚ÇÄ := by rw [rel.h‚ÇÄ_assoc, ‚Üê hx', yonedaEquiv_symm_comp]
  h‚ÇÅ := by rw [rel.h‚ÇÅ_assoc, ‚Üê hy', yonedaEquiv_symm_comp]
  œÄ := rel.œÄ ‚â´ œÜ.right
  d := rel.d ‚â´ œÜ.left
  hœÄ := by
    have := Arrow.w œÜ
    dsimp at this
    rw [assoc, this, rel.hœÄ_assoc]
  hd := by rw [rel.hd_assoc]

end SimplexOverRelStruct

instance : minimalFibrations.{u}.IsStableUnderRetracts where
  of_retract {E B E' B' p p'} h (hp' : MinimalFibration p') := by
    have : Fibration p := by
      have : Fibration p' := inferInstance
      rw [fibration_iff] at this ‚ä¢
      exact (fibrations _).of_retract h this
    constructor
    intro n x y hxy
    have h‚ÇÅ := congr_arg (h.r.left.app _) ((hxy.map h.i rfl rfl).eq)
    have h‚ÇÇ (a) : _ = a := congr_fun (NatTrans.congr_app h.left.retract ‚ü®.mk n‚ü©) a
    dsimp at h‚ÇÇ
    rw [‚Üê h‚ÇÇ x, h‚ÇÅ, h‚ÇÇ]

-- to be generalized
instance : minimalFibrations.{u}.RespectsIso :=
  MorphismProperty.RespectsIso.of_respects_arrow_iso _
    (fun p' p e hp' ‚Ü¶ (minimalFibrations).of_retract { i := e.inv, r := e.hom } hp')

instance : minimalFibrations.{u}.IsStableUnderBaseChange where
  of_isPullback {E' E B' B b p t p'} h hp' := by
    rw [minimalFibrations_iff] at hp'
    have : Fibration p' := by
      have : Fibration p := by infer_instance
      rw [fibration_iff] at this ‚ä¢
      exact (fibrations SSet.{u}).of_isPullback h this
    constructor
    intro n x y hxy
    apply (h.map ((evaluation _ _).obj _)).types_ext
    ¬∑ exact (hxy.map (Arrow.homMk t b h.w) rfl rfl).eq
    ¬∑ apply (yonedaEquiv _ _).symm.injective
      simp [‚Üê yonedaEquiv_symm_comp, hxy.hœÄ']

namespace MinimalFibration

structure Selection where
  set (n : ‚Ñï) : Set (E _[n])
  le_set (n : ‚Ñï) : E.Degenerate n ‚â§ set n
  unique {n : ‚Ñï} {x y : E _[n]} (hx : x ‚àà set n) (hy : y ‚àà set n)
    (h : SimplexOverRelStruct p x y) : x = y
  nonempty {n : ‚Ñï} (x : E _[n]) : ‚àÉ (y : E _[n]) (_ : y ‚àà set n),
    Nonempty (SimplexOverRelStruct p x y)

-- use that `SimplexOverRelStruct` defines an equivalence relation,
-- "select" all degenerate simplices,
-- and an element in each other equivalence class
instance [Fibration p] : Nonempty (Selection p) := sorry

namespace Selection

variable {p} (selection : Selection p)

def SubcomplexOfSelected : Type _ :=
  Subtype (fun (Y : E.Subcomplex) ‚Ü¶ ‚àÄ (n : ‚Ñï), Y.obj ‚ü®.mk n‚ü© ‚â§ selection.set n)

instance : PartialOrder selection.SubcomplexOfSelected := by
  dsimp [SubcomplexOfSelected]
  infer_instance

instance : OrderTop selection.SubcomplexOfSelected where
  top := ‚ü®‚®Ü (A : selection.SubcomplexOfSelected), A.1, fun n ‚Ü¶ by
    simp only [Subpresheaf.iSup_obj, Set.iSup_eq_iUnion, Set.le_eq_subset, Set.iUnion_subset_iff]
    intro A
    exact A.2 n‚ü©
  le_top A := le_iSup (Œπ := selection.SubcomplexOfSelected) (fun A ‚Ü¶ A.1) A

def subcomplex : E.Subcomplex := (‚ä§ : selection.SubcomplexOfSelected).1

lemma subcomplex_obj_le (n : ‚Ñï) : selection.subcomplex.obj ‚ü®.mk n‚ü© ‚â§ selection.set n :=
  (‚ä§ : selection.SubcomplexOfSelected).2 n

lemma le_subcomplex (Y : selection.SubcomplexOfSelected) : Y.1 ‚â§ selection.subcomplex :=
  le_top (Œ± := selection.SubcomplexOfSelected)

lemma mem_subcomplex_of_boundary {n : ‚Ñï} (x : E _[n]) (hx : x ‚àà selection.set n)
    (hx' : subcomplexBoundary n ‚â§ selection.subcomplex.preimage ((yonedaEquiv _ _).symm x)) :
    x ‚àà selection.subcomplex.obj ‚ü®.mk n‚ü© := by
  refine selection.le_subcomplex ‚ü®selection.subcomplex ‚äî Subcomplex.ofSimplex x, ?_‚ü© _
    (Or.inr (Subcomplex.mem_ofSimplex_obj x))
  intro d
  simp only [Subpresheaf.max_obj, Set.le_eq_subset, Set.union_subset_iff]
  constructor
  ¬∑ apply subcomplex_obj_le
  ¬∑ rintro _ ‚ü®s, rfl‚ü©
    by_cases hs : s ‚àà Degenerate _ _
    ¬∑ exact selection.le_set _ (degenerate_map hs _)
    ¬∑ rw [‚Üê mem_nondegenerate_iff_not_mem_degenerate] at hs
      obtain h | rfl := (dim_le_of_nondegenerate _ ‚ü®s, hs‚ü© n).lt_or_eq
      ¬∑ apply subcomplex_obj_le
        apply hx'
        simp only [subcomplexBoundary_obj_eq_top _ _ h, Set.top_eq_univ, Set.mem_univ]
      ¬∑ rw [standardSimplex.non_degenerate_top_dim, Set.mem_singleton_iff] at hs
        simpa [hs] using hx

structure Extension where
  A : E.Subcomplex
  subcomplex_le : selection.subcomplex ‚â§ A
  h : (A : SSet) ‚äó Œî[1] ‚ü∂ E
  hi' : Subcomplex.homOfLE subcomplex_le ‚ñ∑ _ ‚â´ h = fst _ _ ‚â´ selection.subcomplex.Œπ := by aesop_cat
  r : (A : SSet) ‚ü∂ (selection.subcomplex : SSet)
  i_r : Subcomplex.homOfLE subcomplex_le ‚â´ r = ùüô _ := by aesop_cat
  Œπ‚ÇÄ_h : Œπ‚ÇÄ ‚â´ h = r ‚â´ selection.subcomplex.Œπ := by aesop_cat
  Œπ‚ÇÅ_h : Œπ‚ÇÅ ‚â´ h = A.Œπ := by aesop_cat
  wh : h ‚â´ p = fst _ _ ‚â´ A.Œπ ‚â´ p := by aesop_cat

namespace Extension

variable {selection} (e : selection.Extension)

attribute [reassoc (attr := simp)] wh i_r Œπ‚ÇÄ_h Œπ‚ÇÅ_h

abbrev i : (selection.subcomplex : SSet) ‚ü∂ (e.A : SSet) :=
  Subcomplex.homOfLE e.subcomplex_le

@[reassoc (attr := simp)]
lemma hi : e.i ‚ñ∑ _ ‚â´ e.h = fst _ _ ‚â´ selection.subcomplex.Œπ := e.hi'

@[reassoc (attr := simp)]
lemma wr : e.r ‚â´ selection.subcomplex.Œπ ‚â´ p = e.A.Œπ ‚â´ p := by
  rw [‚Üê Œπ‚ÇÄ_h_assoc, wh, lift_fst_assoc, id_comp]

end Extension

instance : PartialOrder selection.Extension where
  le f‚ÇÅ f‚ÇÇ := ‚àÉ (h : f‚ÇÅ.A ‚â§ f‚ÇÇ.A), f‚ÇÅ.h = Subcomplex.homOfLE h ‚ñ∑ _ ‚â´ f‚ÇÇ.h
  le_refl f := ‚ü®by rfl, rfl‚ü©
  le_trans f‚ÇÅ f‚ÇÇ f‚ÇÉ := by
    rintro ‚ü®le‚ÇÅ‚ÇÇ, fac‚ÇÅ‚ÇÇ‚ü© ‚ü®le‚ÇÇ‚ÇÉ, fac‚ÇÇ‚ÇÉ‚ü©
    exact ‚ü®le‚ÇÅ‚ÇÇ.trans le‚ÇÇ‚ÇÉ, by rw [fac‚ÇÅ‚ÇÇ, fac‚ÇÇ‚ÇÉ]; rfl‚ü©
  le_antisymm := by
    rintro ‚ü®A‚ÇÅ, _, h‚ÇÅ, _, r‚ÇÅ, _, Œπ‚ÇÄ_h‚ÇÅ, _, _‚ü© ‚ü®A‚ÇÇ, _, h‚ÇÇ, _, r‚ÇÇ, _, Œπ‚ÇÄ_h‚ÇÇ, _, _‚ü©
      ‚ü®le‚ÇÅ‚ÇÇ, fac‚ÇÅ‚ÇÇ‚ü© ‚ü®le‚ÇÇ‚ÇÅ, fac‚ÇÇ‚ÇÅ‚ü©
    obtain rfl := le_antisymm le‚ÇÅ‚ÇÇ le‚ÇÇ‚ÇÅ
    obtain rfl : h‚ÇÅ = h‚ÇÇ := fac‚ÇÅ‚ÇÇ
    obtain rfl : r‚ÇÅ = r‚ÇÇ := by
      rw [‚Üê cancel_mono selection.subcomplex.Œπ, ‚Üê Œπ‚ÇÄ_h‚ÇÅ, ‚Üê Œπ‚ÇÄ_h‚ÇÇ]
    rfl

noncomputable instance : OrderBot selection.Extension where
  bot :=
    { A := selection.subcomplex
      subcomplex_le := by rfl
      h := fst _ _ ‚â´ selection.subcomplex.Œπ
      r := ùüô _ }
  bot_le f := ‚ü®f.subcomplex_le, by simp‚ü©

lemma exists_maximal_extension : ‚àÉ (f : selection.Extension), IsMax f := by
  apply zorn_le
  intro S hS
  by_cases h : S.Nonempty; swap
  ¬∑ simp only [Set.nonempty_def, not_exists] at h
    exact ‚ü®‚ä•, fun s hs ‚Ü¶ (h s hs).elim‚ü©
  ¬∑ let s‚ÇÄ : S := ‚ü®h.some, h.some_mem‚ü©
    let f (s : S) : E.Subcomplex := s.1.A
    have hf : Monotone f := fun s‚ÇÅ s‚ÇÅ hs ‚Ü¶ hs.1
    have : IsDirected S (¬∑ ‚â§ ¬∑) := { directed := hS.directedOn.directed_val }
    have H := Subcomplex.isColimitCoconeOfMonotone f hf
    let ch : Cocone ((hf.functor ‚ãô Subcomplex.toPresheafFunctor) ‚ãô tensorRight Œî[1]) :=
      Cocone.mk E
        { app s := s.1.h
          naturality s‚ÇÅ s‚ÇÇ œÜ := by simpa using (leOfHom œÜ).2.symm }
    let cr : Cocone (hf.functor ‚ãô Subcomplex.toPresheafFunctor) :=
      Cocone.mk selection.subcomplex
        { app s := s.1.r
          naturality := sorry }
    refine ‚ü®{
      A := ‚®Ü (s : S), s.1.A
      subcomplex_le := h.some.subcomplex_le.trans (le_iSup (fun (s : S) ‚Ü¶ s.1.A) _)
      h := (isColimitOfPreserves (tensorRight Œî[1]) H).desc ch
      hi' := by
        have := (isColimitOfPreserves (tensorRight Œî[1]) H).fac ch s‚ÇÄ
        conv_rhs at this => dsimp [ch]
        dsimp at this ‚ä¢
        rw [‚Üê s‚ÇÄ.1.hi', ‚Üê this, ‚Üê MonoidalCategory.comp_whiskerRight_assoc,
          ‚Üê Subcomplex.homOfLE_comp]
      r := H.desc cr
      i_r := sorry
      Œπ‚ÇÄ_h := sorry
      Œπ‚ÇÅ_h := sorry
      wh := sorry }, fun s hs ‚Ü¶ ‚ü®le_iSup (fun (s : S) ‚Ü¶ s.1.A) ‚ü®s, hs‚ü©, ?_‚ü©‚ü©
    have := (isColimitOfPreserves (tensorRight Œî[1]) H).fac ch ‚ü®s, hs‚ü©
    dsimp at this ‚ä¢
    simp [this, ch]

variable {selection} in
lemma Extension.A_eq_top_of_isMax (f : selection.Extension)
    (hf : IsMax f) : f.A = ‚ä§ := sorry

lemma exists_extension : ‚àÉ (f : selection.Extension), f.A = ‚ä§ := by
  obtain ‚ü®f, hf‚ü© := selection.exists_maximal_extension
  exact ‚ü®f, f.A_eq_top_of_isMax hf‚ü©

noncomputable def extension : selection.Extension := selection.exists_extension.choose

@[simp]
lemma extension_A : selection.extension.A = ‚ä§ := selection.exists_extension.choose_spec

noncomputable def relativeDeformationRetract :
    selection.subcomplex.RelativeDeformationRetract p where
  i := selection.subcomplex.Œπ
  i_eq_Œπ := rfl
  r := (Subcomplex.topIso E).inv ‚â´ (Subcomplex.isoOfEq (by simp)).inv ‚â´ selection.extension.r
  retract := selection.extension.i_r
  h := ((Subcomplex.topIso E).inv ‚â´ (Subcomplex.isoOfEq (by simp)).inv) ‚ñ∑ _ ‚â´
      selection.extension.h
  hi := selection.extension.hi
  h‚ÇÄ := by
    dsimp
    rw [Œπ‚ÇÄ_comp_assoc, assoc, assoc, assoc, Extension.Œπ‚ÇÄ_h]
  h‚ÇÅ := by
    dsimp
    rw [Œπ‚ÇÅ_comp_assoc, assoc, Extension.Œπ‚ÇÅ_h]
    rfl
  wr := by
    dsimp
    rw [assoc, assoc, Extension.wr]
    rfl
  wh := by
    dsimp
    rw [assoc, Extension.wh]
    rfl

end Selection

end MinimalFibration

end SSet
