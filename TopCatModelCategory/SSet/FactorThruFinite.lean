import TopCatModelCategory.TopCat.BoundaryClosedEmbeddings
import TopCatModelCategory.TopCat.RelativeT1CellComplex
import TopCatModelCategory.TopCat.CoyonedaPreservesCoproducts
import TopCatModelCategory.TopCat.ToTopDecomposition
import TopCatModelCategory.SSet.ConnectedComponents
import TopCatModelCategory.SSet.IsFiniteCoproducts
import TopCatModelCategory.CellComplex

universe u

open HomotopicalAlgebra CategoryTheory Simplicial Limits Opposite

namespace SSet

variable {X : SSet.{u}} {K : TopCat.{u}} (f : K ‚ü∂ |X|)

lemma exists_finite_subcomplex_of_compactSpace [CompactSpace K] :
    ‚àÉ (A : X.Subcomplex) (_ : A.toSSet.IsFinite),
      Set.range f ‚äÜ Set.range (toTop.map A.Œπ) := by
  let hX := X.relativeCellComplex.map toTop
  let Œ± := { c : hX.Cells // (TopCat.RelativeT‚ÇÅCellComplex.interiorCell c ‚à©
    Set.range ‚áë(ConcreteCategory.hom f)).Nonempty }
  have : Finite Œ± := TopCat.RelativeT‚ÇÅCellComplex.finite_inter_interiorCell_of_isCompact hX
    (fun j _ ‚Ü¶ boundary.t‚ÇÅInclusions_toTop_map_Œπ j) (F := Set.range f) (by aesop)
    (isCompact_range (by continuity))
  let Œπ : Set X.N := (Sigma.fst ‚àò X.sigmaEquivToTop.symm) '' (Set.range f)
  have : Finite Œπ := by
    let œà (i : Œπ) : Œ± := ‚ü®(X.relativeCellComplex.mapCellsEquiv _).symm
      (X.relativeCellComplexCellsEquiv.symm i.1), by
        obtain ‚ü®i, x, hx‚ÇÅ, hx‚ÇÇ‚ü© := i
        refine ‚ü®x, ?_, hx‚ÇÅ‚ü©
        obtain ‚ü®‚ü®i', y‚ü©, rfl‚ü© := sigmaEquivToTop.surjective x
        obtain rfl : i = i' := by simpa using hx‚ÇÇ.symm
        exact sigmaToTop_mem_interiorCell ‚ü®i, y‚ü©‚ü©
    refine Finite.of_injective œà ?_
    rintro ‚ü®i, _‚ü© ‚ü®i', _‚ü© h
    rw [Subtype.ext_iff] at h ‚ä¢
    exact ((X.relativeCellComplex.mapCellsEquiv toTop).trans
      X.relativeCellComplexCellsEquiv).symm.injective h
  let A : X.Subcomplex := ‚®Ü (s : Œπ), .ofSimplex s.1.simplex
  refine ‚ü®A, inferInstance, ?_‚ü©
  intro x hx
  obtain ‚ü®‚ü®s, y‚ü©, rfl‚ü© := sigmaEquivToTop.surjective x
  let œÜ : Œî[s.dim] ‚ü∂ A := yonedaEquiv.symm ‚ü®s.simplex, by
    simp only [Subpresheaf.iSup_obj, Set.iUnion_coe_set, Set.mem_iUnion, exists_prop, A]
    refine ‚ü®s, ?_, ùüô _, by simp‚ü©
    obtain ‚ü®z, hz‚ü© := hx
    exact ‚ü®f z, Set.mem_range_self z, by simp [hz]‚ü©‚ü©
  refine ‚ü®toTop.map œÜ (‚¶ãs.dim‚¶å.toTopHomeo.symm y.1), ?_‚ü©
  simp only [sigmaEquivToTop_apply, ‚Üê ConcreteCategory.comp_apply, ‚Üê Functor.map_comp]
  rfl

lemma exists_factor_thru_finite_of_topCatHom [CompactSpace K] :
    ‚àÉ (A : X.Subcomplex) (_ : A.toSSet.IsFinite)
      (g : K ‚ü∂ |A|), f = g ‚â´ toTop.map A.Œπ := by
  obtain ‚ü®A, _, hA‚ü© := exists_finite_subcomplex_of_compactSpace f
  exact ‚ü®A, inferInstance, TopCat.ofHom (ContinuousMap.comp
    ‚ü®_, (closedEmbeddings_toObj_map_of_mono A.Œπ).homeomorphRange.symm.continuous‚ü©
    ‚ü®fun k ‚Ü¶ ‚ü®f k, hA (by simp)‚ü©, by continuity‚ü©), by aesop‚ü©

lemma exists_factor_thru_finite_of_topCatHom' [CompactSpace K] :
    ‚àÉ (Y : SSet) (_ : Y.IsFinite) (i : Y ‚ü∂ X) (_ : Mono i)
      (g : K ‚ü∂ |Y|), f = g ‚â´ toTop.map i := by
  obtain ‚ü®A, _, g, rfl‚ü© := exists_factor_thru_finite_of_topCatHom f
  exact ‚ü®_, inferInstance, A.Œπ, inferInstance, g, rfl‚ü©

lemma exists_factor_thru_finite_connected_of_topCatHom
    [CompactSpace K] [PathConnectedSpace K] :
    ‚àÉ (Y : SSet) (_ : Y.IsFinite) (_ : Y.IsConnected) (i : Y ‚ü∂ X) (_ : Mono i)
      (g : K ‚ü∂ |Y|), f = g ‚â´ toTop.map i := by
  obtain ‚ü®Z, _, i, _, g, rfl‚ü© := exists_factor_thru_finite_of_topCatHom' f
  obtain ‚ü®‚ü®c‚ü©, œÜ, rfl‚ü© := Types.jointly_surjective_of_isColimit
    (isColimitOfPreserves (coyoneda.obj (op (TopCat.of K)))
      (isColimitOfPreserves toTop (œÄ‚ÇÄ.isColimitCofan Z))) g
  exact ‚ü®_, inferInstance, inferInstance, c.component.Œπ ‚â´ i, inferInstance, œÜ, by simp‚ü©

end SSet
