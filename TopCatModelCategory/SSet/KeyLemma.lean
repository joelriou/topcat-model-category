import TopCatModelCategory.SSet.CategoryWithWeakEquivalences
import TopCatModelCategory.SSet.SingularConnected
import TopCatModelCategory.SSet.FibrationSequenceAdj
import TopCatModelCategory.SSet.KanComplexWUnit
import TopCatModelCategory.SSet.KanComplexKeyLemma

open CategoryTheory HomotopicalAlgebra Simplicial Opposite Limits

namespace SSet

open modelCategoryQuillen

namespace KanComplex

lemma W_iff_weakEquivalence {X Y : SSet.{u}} [IsFibrant X] [IsFibrant Y] (f : X ‚ü∂ Y) :
    W f ‚Üî WeakEquivalence f := by
  rw [weakEquivalence_iff, TopCat.modelCategory.weakEquivalence_iff,
    ‚Üê W.postcomp_iff _ _ (W.sSetTopAdj_unit_app Y),
    ‚Üê sSetTopAdj.unit_naturality f,
    W.precomp_iff _ _ (W.sSetTopAdj_unit_app X)]

end KanComplex

namespace modelCategoryQuillen

namespace rlp_I

variable {E B : SSet.{u}} {p : E ‚ü∂ B} (hp : I.rlp p)

include hp

lemma surjective_app_0 : Function.Surjective (p.app (op ‚¶ã0‚¶å)) := by
  intro y
  have := hp _ ‚ü®0‚ü©
  have sq : CommSq (boundary.isInitial.to _) ‚àÇŒî[0].Œπ p (yonedaEquiv.symm y) := ‚ü®by ext‚ü©
  exact ‚ü®yonedaEquiv sq.lift,
    by rw [‚Üê yonedaEquiv_comp, sq.fac_right, Equiv.apply_symm_apply]‚ü©

noncomputable def lift (b : B _‚¶ã0‚¶å) : E _‚¶ã0‚¶å :=
  (surjective_app_0 hp b).choose

@[simp]
noncomputable def lift_spec (b : B _‚¶ã0‚¶å) : p.app _ (lift hp b) = b :=
  (surjective_app_0 hp b).choose_spec

lemma congr_œÄ‚ÇÄ_mk (e‚ÇÄ e‚ÇÅ : E _‚¶ã0‚¶å) (s : B _‚¶ã1‚¶å) (hs‚ÇÄ : B.Œ¥ 1 s = p.app _ e‚ÇÄ)
    (hs‚ÇÅ : B.Œ¥ 0 s = p.app _ e‚ÇÅ) :
    œÄ‚ÇÄ.mk e‚ÇÄ = œÄ‚ÇÄ.mk e‚ÇÅ := by
  have := hp _ ‚ü®1‚ü©
  have sq : CommSq (boundary‚ÇÅ.desc e‚ÇÄ e‚ÇÅ) ‚àÇŒî[1].Œπ p (yonedaEquiv.symm s) := ‚ü®by
    ext : 1
    ¬∑ simp [‚Üê hs‚ÇÄ, stdSimplex.Œ¥_comp_yonedaEquiv_symm]
    ¬∑ simp [‚Üê hs‚ÇÅ, stdSimplex.Œ¥_comp_yonedaEquiv_symm]‚ü©
  refine œÄ‚ÇÄ.sound (yonedaEquiv sq.lift) ?_ ?_
  ¬∑ apply yonedaEquiv.symm.injective
    have := boundary‚ÇÅ.Œπ‚ÇÄ ‚â´= sq.fac_left
    rw [boundary‚ÇÅ.Œπ‚ÇÄ_Œπ_assoc, boundary‚ÇÅ.Œπ‚ÇÄ_desc] at this
    rwa [‚Üê stdSimplex.Œ¥_comp_yonedaEquiv_symm, Equiv.symm_apply_apply]
  ¬∑ apply yonedaEquiv.symm.injective
    have := boundary‚ÇÅ.Œπ‚ÇÅ ‚â´= sq.fac_left
    rw [boundary‚ÇÅ.Œπ‚ÇÅ_Œπ_assoc, boundary‚ÇÅ.Œπ‚ÇÅ_desc] at this
    rwa [‚Üê stdSimplex.Œ¥_comp_yonedaEquiv_symm, Equiv.symm_apply_apply]

noncomputable def œÄ‚ÇÄInv : œÄ‚ÇÄ B ‚ü∂ œÄ‚ÇÄ E :=
  Quot.lift (fun b ‚Ü¶ œÄ‚ÇÄ.mk (lift hp b)) (by
    rintro b‚ÇÄ b‚ÇÅ ‚ü®s, h‚ÇÄ, h‚ÇÅ‚ü©
    exact congr_œÄ‚ÇÄ_mk hp (lift hp b‚ÇÄ) (lift hp b‚ÇÅ) s (by simpa) (by simpa))

@[simp]
lemma œÄ‚ÇÄInv_mk (b : B _‚¶ã0‚¶å) : œÄ‚ÇÄInv hp (œÄ‚ÇÄ.mk b) = œÄ‚ÇÄ.mk (lift hp b) := rfl

noncomputable def œÄ‚ÇÄEquiv : œÄ‚ÇÄ E ‚âÉ œÄ‚ÇÄ B where
  toFun := mapœÄ‚ÇÄ p
  invFun := œÄ‚ÇÄInv hp
  left_inv e := by
    obtain ‚ü®e, rfl‚ü© := e.mk_surjective
    simp only [mapœÄ‚ÇÄ_mk, œÄ‚ÇÄInv_mk]
    refine congr_œÄ‚ÇÄ_mk hp (lift hp (p.app _ e)) e (B.œÉ 0 (p.app _ e)) ?_ ?_
    ¬∑ have := B.Œ¥_comp_œÉ_succ_apply (n := 0) (i := 0)
      dsimp at this
      simp [this]
    ¬∑ have := B.Œ¥_comp_œÉ_self_apply (n := 0) (i := 0)
      dsimp at this
      simp [this]
  right_inv b := by
    obtain ‚ü®b, rfl‚ü© := b.mk_surjective
    simp

lemma bijective_mapœÄ‚ÇÄ : Function.Bijective (mapœÄ‚ÇÄ p) := (œÄ‚ÇÄEquiv hp).bijective

lemma bijective_mapœÄ‚ÇÄ_toSSet_map_toTop_map :
    Function.Bijective (mapœÄ‚ÇÄ (TopCat.toSSet.map (SSet.toTop.map p))) := by
  rw [‚Üê Function.Bijective.of_comp_iff (hg := bijective_mapœÄ‚ÇÄ_sSetTopAdj_unit_app E)]
  convert (bijective_mapœÄ‚ÇÄ_sSetTopAdj_unit_app B).comp (bijective_mapœÄ‚ÇÄ hp)
  ext
  dsimp
  rw [‚Üê mapœÄ‚ÇÄ_comp_apply, ‚Üê mapœÄ‚ÇÄ_comp_apply, Adjunction.unit_naturality]

open KanComplex

lemma weakEquivalence : WeakEquivalence p := by
  have : Fibration p := by
    rw [fibration_iff]
    exact rlp_I_le_rlp_J _ hp
  rw [weakEquivalence_iff, TopCat.modelCategory.weakEquivalence_iff, KanComplex.W_iff]
  refine ‚ü®bijective_mapœÄ‚ÇÄ_toSSet_map_toTop_map hp, fun n ‚Ü¶ ?_‚ü©
  suffices ‚àÄ (e : E _‚¶ã0‚¶å) (b : TopCat.toSSet.obj (toTop.obj B) _‚¶ã0‚¶å) (he),
      Function.Bijective (mapœÄ (TopCat.toSSet.map (toTop.map p)) (n + 1)
        ((sSetTopAdj.unit.app E).app _ e) b he) by
    rintro e' _ rfl
    obtain ‚ü®e, ‚ü®iso‚ü©‚ü© :
      ‚àÉ (e : E _‚¶ã0‚¶å), Nonempty (FundamentalGroupoid.mk ((sSetTopAdj.unit.app E).app _ e) ‚âÖ
          FundamentalGroupoid.mk e') := by
        obtain ‚ü®e, he‚ü© := (bijective_mapœÄ‚ÇÄ_sSetTopAdj_unit_app _).2 (œÄ‚ÇÄ.mk e')
        obtain ‚ü®e, rfl‚ü© := e.mk_surjective
        exact ‚ü®e, by simpa [‚Üê FundamentalGroupoid.œÄ‚ÇÄ_mk_eq_œÄ‚ÇÄ_mk_iff] using he‚ü©
    exact KanComplex.W.bijective_of_iso iso (this e _ rfl)
  intro e b' he'
  obtain ‚ü®b, he, rfl‚ü© : ‚àÉ (b : B _‚¶ã0‚¶å), p.app _ e = b ‚àß b' = (sSetTopAdj.unit.app B).app _ b := by
    refine ‚ü®_, rfl, ?_‚ü©
    rw [‚Üê he', ‚Üê FunctorToTypes.comp, ‚Üê FunctorToTypes.comp, sSetTopAdj.unit_naturality]
  let fib := FibrationSequence.ofFibration p he
  have (n : ‚Ñï) : Subsingleton (œÄ n fib.F fib.f) :=
    ((W.of_rlp_I (MorphismProperty.of_isPullback
      fib.isPullback hp)).bijective n fib.f _ rfl).injective.subsingleton
  have (n : ‚Ñï) : Subsingleton (œÄ n fib.toTopToSSet.F fib.toTopToSSet.f) :=
    ((W.sSetTopAdj_unit_app fib.F).bijective n fib.f fib.toTopToSSet.f rfl).2.subsingleton
      (Œ± := œÄ n fib.F fib.f)
  apply fib.toTopToSSet.bijective_mapœÄ_succ_p

end rlp_I

open MorphismProperty

open TopCat.modelCategory in
lemma weakEquivalence_of_fibration_of_isPullback {E' E B' B : SSet.{u}}
    {t : E' ‚ü∂ E} {l : E' ‚ü∂ B'} {r : E ‚ü∂ B} {b : B' ‚ü∂ B}
    [WeakEquivalence r] [Fibration r]
    (sq : IsPullback t l r b) : WeakEquivalence l := by
  have ‚ü®hl, _‚ü© : trivialFibrations _ (toTop.map l) :=
    MorphismProperty.of_isPullback
      (P := ((trivialFibrations _).inverseImage DeltaGenerated.deltaGeneratedToTop))
      (sq.map SSet.toDeltaGenerated) (by
        change trivialFibrations _ (toTop.map r)
        rw [mem_trivialFibrations_iff]
        constructor <;> infer_instance)
  rw [weakEquivalence_iff]
  rwa [HomotopicalAlgebra.weakEquivalence_iff]

lemma weakEquivalence_iff_of_fibration
    {E B : SSet.{u}} (p : E ‚ü∂ B) [Fibration p] :
    I.rlp p ‚Üî WeakEquivalence p :=
  ‚ü®rlp_I.weakEquivalence, by
    wlog _ : MinimalFibration p generalizing E with H
    ¬∑ intro hp
      obtain ‚ü®E', r, p', rfl, _, hr‚ü© := MinimalFibration.factorization p
      have : Fibration r := by
        rw [fibration_iff]
        exact rlp_I_le_rlp_J _ hr
      have := rlp_I.weakEquivalence hr
      exact comp_mem _ _ _ hr
        (H p' inferInstance (weakEquivalence_of_precomp r _))
    rintro _ _ _ _ ‚ü®n‚ü©
    clear X Y
    constructor
    intro u v sq
    wlog h : ‚àÉ (hB : Œî[n] = B), v = eqToHom hB
    ¬∑ have sq' : CommSq (pullback.lift _ _ sq.w) ‚àÇŒî[n].Œπ (pullback.snd _ _) (ùüô _) :=
        ‚ü®by simp‚ü©
      have H : WeakEquivalence (pullback.snd p v) :=
        weakEquivalence_of_fibration_of_isPullback (IsPullback.of_hasPullback p v)
      have : sq'.HasLift := by
        exact this (pullback.snd p v) inferInstance H n sq' ‚ü®rfl, rfl‚ü©
      exact ‚ü®‚ü®{
        l := sq'.lift ‚â´ pullback.fst _ _
        fac_left := by simp
        fac_right := by simp [pullback.condition]
      }‚ü©‚ü©
    ¬∑ obtain ‚ü®rfl, h‚ü© := h
      obtain rfl : v = ùüô _ := h
      have hp := MinimalFibration.isTrivialBundle_of_stdSimplex p
      simp only [trivialBundles, iSup_iff] at hp
      obtain ‚ü®F, ‚ü®h‚ü©‚ü© := hp
      let a : F ‚ü∂ Œî[0] := stdSimplex.isTerminalObj‚ÇÄ.from _
      have ha : I.rlp a := by
        let F' := Subcomplex.fiber p (stdSimplex.obj‚ÇÄEquiv.symm 0)
        let a' : (F' : SSet) ‚ü∂ Œî[0] := stdSimplex.isTerminalObj‚ÇÄ.from F'
        have : WeakEquivalence a' := weakEquivalence_of_fibration_of_isPullback
          ((Subcomplex.fiber_isPullback p (stdSimplex.obj‚ÇÄEquiv.symm 0)))
        have e : (F' : SSet) ‚âÖ F := (h.pullback (Subcomplex.fiber_isPullback p
          (stdSimplex.obj‚ÇÄEquiv.symm 0))).isoOfIsTerminal stdSimplex.isTerminalObj‚ÇÄ
        have : Fibration a' := by
          rw [HomotopicalAlgebra.fibration_iff]
          apply MorphismProperty.of_isPullback (P := fibrations _)
            (Subcomplex.fiber_isPullback p (stdSimplex.obj‚ÇÄEquiv.symm 0))
          rwa [‚Üê HomotopicalAlgebra.fibration_iff]
        have ha' : I.rlp a' := by
          rwa [KanComplex.weakEquivalence_iff_of_fibration a',
            KanComplex.W_iff_weakEquivalence]
        exact (MorphismProperty.arrow_mk_iso_iff _ (Arrow.isoMk e (Iso.refl _))).1 ha'
      have sq' : CommSq (u ‚â´ h.r) ‚àÇŒî[n].Œπ a (stdSimplex.isTerminalObj‚ÇÄ.from _) := ‚ü®by aesop‚ü©
      have : HasLiftingProperty ‚àÇŒî[n].Œπ a := ha _ ‚ü®n‚ü©
      obtain ‚ü®œÜ, hœÜ‚ÇÅ, hœÜ‚ÇÇ‚ü© := BinaryFan.IsLimit.lift' h.isLimit (ùüô _) sq'.lift
      dsimp at œÜ hœÜ‚ÇÅ hœÜ‚ÇÇ
      exact ‚ü®‚ü®{
        l := œÜ
        fac_left := by
          apply BinaryFan.IsLimit.hom_ext h.isLimit
          ¬∑ simp [hœÜ‚ÇÅ, sq.w]
          ¬∑ simp [hœÜ‚ÇÇ]
        fac_right := hœÜ‚ÇÅ
      }‚ü©‚ü©
    ‚ü©

end modelCategoryQuillen

end SSet
