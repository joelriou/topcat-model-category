import TopCatModelCategory.SSet.AnodyneExtensionsAdjunctions
import TopCatModelCategory.SSet.FundamentalGroupoid
import TopCatModelCategory.SSet.HomotopyGroup

universe u

open HomotopicalAlgebra CategoryTheory Simplicial MonoidalCategory ChosenFiniteProducts
  SSet.modelCategoryQuillen

namespace SSet

namespace KanComplex

namespace FundamentalGroupoid

structure ActionStruct {X : SSet.{u}} {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X} {n : ‚Ñï}
    (p : Edge x‚ÇÄ x‚ÇÅ)
    (s : Subcomplex.RelativeMorphism (boundary n) _
        (const ‚ü®x‚ÇÄ.pt, Subcomplex.mem_ofSimplex_obj x‚ÇÄ.pt‚ü©))
    (t : Subcomplex.RelativeMorphism (boundary n) _
        (const ‚ü®x‚ÇÅ.pt, Subcomplex.mem_ofSimplex_obj x‚ÇÅ.pt‚ü©)) where
  map : Œî[n] ‚äó Œî[1] ‚ü∂ X
  whiskerRight_Œπ_comp_map : (boundary n).Œπ ‚ñ∑ Œî[1] ‚â´ map = snd _ _ ‚â´ p.map := by aesop_cat
  Œπ‚ÇÄ_map : Œπ‚ÇÄ ‚â´ map = s.map := by aesop_cat
  Œπ‚ÇÅ_map : Œπ‚ÇÅ ‚â´ map = t.map := by aesop_cat

namespace ActionStruct

attribute [reassoc (attr := simp)] Œπ‚ÇÄ_map Œπ‚ÇÅ_map whiskerRight_Œπ_comp_map

noncomputable def pushforward {X Y : SSet.{u}} [IsFibrant X] {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X}
    {n : ‚Ñï} {p : Edge x‚ÇÄ x‚ÇÅ} {s : PtSimplex X n x‚ÇÄ.pt} {t : PtSimplex X n x‚ÇÅ.pt}
    (h : ActionStruct p s t) (f : X ‚ü∂ Y) :
    ActionStruct (p.pushforward f) (s.pushforward f _ rfl)
      (t.pushforward f _ rfl) where
  map := h.map ‚â´ f

end ActionStruct

namespace action

variable {X : SSet.{u}} [IsFibrant X] {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X} {n : ‚Ñï}

lemma exists_actionStruct (p : Edge x‚ÇÄ x‚ÇÅ)
    (s : Subcomplex.RelativeMorphism (boundary n) _
      (const ‚ü®x‚ÇÄ.pt, Subcomplex.mem_ofSimplex_obj x‚ÇÄ.pt‚ü©)) :
    ‚àÉ t, Nonempty (ActionStruct p s t) := by
  obtain ‚ü®œÜ, hœÜ‚ÇÅ, hœÜ‚ÇÇ‚ü© :=
    (Subcomplex.unionProd.isPushout ‚àÇŒî[n] (stdSimplex.face {(0 : Fin 2)})).exists_desc
      (fst _ _ ‚â´ s.map) (snd _ _ ‚â´ p.map) (by
        rw [whiskerRight_fst_assoc, s.comm, Subcomplex.ofSimplex_Œπ, comp_const, comp_const,
          whiskerLeft_snd_assoc, p.comm‚ÇÄ'', comp_const])
  obtain ‚ü®l, hl‚ü© := anodyneExtensions.exists_lift_of_isFibrant œÜ
    (anodyneExtensions.subcomplex_unionProd_mem_of_right.{u} ‚àÇŒî[n] _
    (anodyneExtensions.face 0))
  refine ‚ü®{
    map := Œπ‚ÇÅ ‚â´ l
    comm := by
      have := Subcomplex.unionProd.Œπ‚ÇÇ _ _ ‚â´= hl
      rw [Subcomplex.unionProd.Œπ‚ÇÇ_Œπ_assoc, hœÜ‚ÇÇ] at this
      rw [Subcomplex.ofSimplex_Œπ, comp_const, ‚Üê Œπ‚ÇÅ_comp_assoc, this,
        Œπ‚ÇÅ_snd_assoc, const_comp, p.comm‚ÇÅ']
  }, ‚ü®{
      map := l
      Œπ‚ÇÄ_map := by
        have := Subcomplex.unionProd.Œπ‚ÇÅ _ _ ‚â´= hl
        rw [hœÜ‚ÇÅ, ‚Üê cancel_epi (Œî[n] ‚óÅ (stdSimplex.faceSingletonIso.{u} (0 : Fin 2)).hom),
          ‚Üê cancel_epi (stdSimplex.rightUnitor _).inv] at this
        exact this
      Œπ‚ÇÅ_map := rfl
      whiskerRight_Œπ_comp_map := by rw [‚Üê hœÜ‚ÇÇ, ‚Üê hl]; rfl
  }‚ü©‚ü©

def uniqueActionStruct {p p' : Edge x‚ÇÄ x‚ÇÅ} (hp : p.Homotopy p')
    {s s' : Subcomplex.RelativeMorphism (boundary n) _
      (const ‚ü®x‚ÇÄ.pt, Subcomplex.mem_ofSimplex_obj x‚ÇÄ.pt‚ü©)} (hs : s.Homotopy s')
    {t t' : Subcomplex.RelativeMorphism (boundary n) _
      (const ‚ü®x‚ÇÅ.pt, Subcomplex.mem_ofSimplex_obj x‚ÇÅ.pt‚ü©)}
    (ht : ActionStruct p s t) (ht' : ActionStruct p' s' t') :
    t.Homotopy t' := by
  sorry

noncomputable def map' (p : Edge x‚ÇÄ x‚ÇÅ)
    (s : Subcomplex.RelativeMorphism (boundary n) _
        (const ‚ü®x‚ÇÄ.pt, Subcomplex.mem_ofSimplex_obj x‚ÇÄ.pt‚ü©)) :
    Subcomplex.RelativeMorphism (boundary n) _
        (const ‚ü®x‚ÇÅ.pt, Subcomplex.mem_ofSimplex_obj x‚ÇÅ.pt‚ü©) :=
  (exists_actionStruct p s).choose

noncomputable def actionStruct (p : Edge x‚ÇÄ x‚ÇÅ)
    (s : Subcomplex.RelativeMorphism (boundary n) _
        (const ‚ü®x‚ÇÄ.pt, Subcomplex.mem_ofSimplex_obj x‚ÇÄ.pt‚ü©)) :
    ActionStruct p s (map' p s) :=
  (exists_actionStruct p s).choose_spec.some

noncomputable def map : ‚àÄ (_p : x‚ÇÄ ‚ü∂ x‚ÇÅ), œÄ n X x‚ÇÄ.pt ‚Üí œÄ n X x‚ÇÅ.pt :=
  Quot.lift‚ÇÇ (fun p s ‚Ü¶ (map' p s).homotopyClass) (by
    rintro (p : Edge _ _) s s' ‚ü®hs‚ü©
    apply Subcomplex.RelativeMorphism.Homotopy.eq
    exact uniqueActionStruct (.refl p) hs
      (actionStruct p s) (actionStruct p s')) (by
    rintro (p p' : Edge _ _) s ‚ü®hp‚ü©
    apply Subcomplex.RelativeMorphism.Homotopy.eq
    exact uniqueActionStruct hp (.refl s)
      (actionStruct p s) (actionStruct p' s))

lemma map_eq {p : Edge x‚ÇÄ x‚ÇÅ}
    {s : Subcomplex.RelativeMorphism (boundary n) _
      (const ‚ü®x‚ÇÄ.pt, Subcomplex.mem_ofSimplex_obj x‚ÇÄ.pt‚ü©)}
    {t : Subcomplex.RelativeMorphism (boundary n) _
        (const ‚ü®x‚ÇÅ.pt, Subcomplex.mem_ofSimplex_obj x‚ÇÅ.pt‚ü©)}
    (h : ActionStruct p s t) :
    map (FundamentalGroupoid.homMk p) s.homotopyClass = t.homotopyClass := by
  apply Subcomplex.RelativeMorphism.Homotopy.eq
  exact uniqueActionStruct (.refl p) (.refl s) (actionStruct p s) h

variable (n) in
@[simp]
lemma map_id (x : FundamentalGroupoid X) :
    action.map (n := n) (ùüô x) = id := by
  ext s
  obtain ‚ü®s, rfl‚ü© := s.mk_surjective
  exact map_eq { map := fst _ _ ‚â´ s.map }

end action

@[simps]
noncomputable def action (X : SSet.{u}) [IsFibrant X] (n : ‚Ñï) :
    FundamentalGroupoid X ‚•§ Type u where
  obj x := œÄ n X x.pt
  map {x y} p := action.map p
  map_comp := sorry

lemma action.bijective_map (n : ‚Ñï) {X : SSet.{u}} {x y : FundamentalGroupoid X} [IsFibrant X]
    (p : x ‚ü∂ y) :
    Function.Bijective (action.map (n := n) p) := by
  rw [‚Üê isIso_iff_bijective]
  exact inferInstanceAs (IsIso ((action X n).map p))

@[simps]
def actionMap {X Y : SSet.{u}} [IsFibrant X] [IsFibrant Y] (f : X ‚ü∂ Y) (n : ‚Ñï) :
    action X n ‚ü∂ mapFundamentalGroupoid f ‚ãô action Y n where
  app x := mapœÄ f n x.pt _ rfl
  naturality x y p := by
    ext s
    obtain ‚ü®s, rfl‚ü© := s.mk_surjective
    obtain ‚ü®p, rfl‚ü© := FundamentalGroupoid.homMk_surjective p
    have h := action.actionStruct p s
    dsimp
    erw [action.map_eq h, mapœÄ_mk, action.map_eq (h.pushforward f)]
    rfl

end FundamentalGroupoid

end KanComplex

end SSet
