import TopCatModelCategory.SSet.Monoidal

universe u

open CategoryTheory Limits Simplicial

namespace SSet

namespace Subcomplex

variable {X : SSet.{u}} (A : X.Subcomplex)

noncomputable def quotient : SSet.{u} := pushout A.Œπ (stdSimplex.isTerminalObj‚ÇÄ.from _)

noncomputable def toQuotient : X ‚ü∂ A.quotient := pushout.inl _ _

noncomputable def quotient‚ÇÄ : A.quotient _‚¶ã0‚¶å := yonedaEquiv (pushout.inr _ _)

@[reassoc (attr := simp)]
lemma Œπ_quotient : A.Œπ ‚â´ A.toQuotient = const A.quotient‚ÇÄ := by
  dsimp [quotient, toQuotient]
  rw [pushout.condition]
  have : stdSimplex.isTerminalObj‚ÇÄ.from A.toSSet = const (yonedaEquiv (ùüô _)) :=
    stdSimplex.isTerminalObj‚ÇÄ.hom_ext _ _
  simp only [this, const_comp]
  rfl

lemma quotient_isPushout : IsPushout A.Œπ (stdSimplex.isTerminalObj‚ÇÄ.from _)
    A.toQuotient (yonedaEquiv.symm A.quotient‚ÇÄ) := by
  dsimp [quotient‚ÇÄ]
  rw [Equiv.symm_apply_apply]
  apply IsPushout.of_hasPushout

lemma quotient_hom_ext {T : SSet.{u}} {f g : A.quotient ‚ü∂ T}
    (h : A.toQuotient ‚â´ f = A.toQuotient ‚â´ g)
    (h‚ÇÄ : f.app _ A.quotient‚ÇÄ = g.app _ A.quotient‚ÇÄ ) : f = g :=
  A.quotient_isPushout.hom_ext h (yonedaEquiv.injective (by simpa))

section

variable {T : SSet.{u}} (f : X ‚ü∂ T) (t‚ÇÄ : T _‚¶ã0‚¶å)
    (hf : A.Œπ ‚â´ f = const t‚ÇÄ)

def exists_descQuotient :
    ‚àÉ (g : A.quotient ‚ü∂ T), A.toQuotient ‚â´ g = f ‚àß g.app _ A.quotient‚ÇÄ = t‚ÇÄ := by
  obtain ‚ü®g, h, h‚ÇÄ‚ü© := A.quotient_isPushout.exists_desc f (yonedaEquiv.symm t‚ÇÄ)
    (by simp [hf])
  exact ‚ü®g, h, yonedaEquiv.symm.injective (by simp [‚Üê h‚ÇÄ])‚ü©

noncomputable def descQuotient : A.quotient ‚ü∂ T :=
  (A.exists_descQuotient f t‚ÇÄ hf).choose

@[reassoc (attr := simp)]
lemma toQuotient_descQuotient : A.toQuotient ‚â´ A.descQuotient f t‚ÇÄ hf = f :=
  (A.exists_descQuotient f t‚ÇÄ hf).choose_spec.1

lemma descQuotient_app_quotient‚ÇÄ :
    (A.descQuotient f t‚ÇÄ hf).app _ A.quotient‚ÇÄ = t‚ÇÄ :=
  (A.exists_descQuotient f t‚ÇÄ hf).choose_spec.2

end

end Subcomplex

end SSet
