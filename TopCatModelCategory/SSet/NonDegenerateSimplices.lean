import TopCatModelCategory.SSet.Simplices
import Mathlib.AlgebraicTopology.SimplicialSet.Degenerate

universe u

open CategoryTheory Simplicial Limits Opposite

@[simp]
lemma SSet.id_app {X : SSet.{u}} {n : SimplexCategory·µí·µñ} (x : X.obj n) :
    NatTrans.app (ùüô X) n x = x := rfl

lemma Quiver.Hom.op_surjective {C : Type*} [Quiver C] {X Y : C·µí·µñ} (f : X ‚ü∂ Y) :
    ‚àÉ (g : Y.unop ‚ü∂ X.unop), f = g.op := ‚ü®f.unop, rfl‚ü©

instance {C : Type*} [Category C] {X Y : C} (f : X ‚ü∂ Y) [IsSplitEpi f] :
    IsSplitMono f.op where
  exists_splitMono := ‚ü®‚ü®(section_ f).op, Quiver.Hom.unop_inj (by simp)‚ü©‚ü©

lemma SimplexCategory.isIso_iff_len_eq_of_epi {n m : SimplexCategory} (f : n ‚ü∂ m) [Epi f] :
    IsIso f ‚Üî n.len = m.len := by
  have hf := len_le_of_epi f
  refine ‚ü®fun _ ‚Ü¶ le_antisymm (len_le_of_mono f) hf, fun h ‚Ü¶ ?_‚ü©
  obtain rfl : n = m := by aesop
  have h := (epi_iff_surjective (f := f)).1 inferInstance
  exact isIso_of_bijective ‚ü®by rwa [Finite.injective_iff_surjective], h‚ü©

lemma SimplexCategory.exists_mono_fac {n m : SimplexCategory} (f : n ‚ü∂ m) :
    ‚àÉ (d : ‚Ñï) (p : n ‚ü∂ ‚¶ãd‚¶å) (i : ‚¶ãd‚¶å ‚ü∂ m), Epi p ‚àß Mono i ‚àß p ‚â´ i = f := by
  suffices ‚àÉ (d : SimplexCategory) (p : n ‚ü∂ d) (i : d ‚ü∂ m), Epi p ‚àß Mono i ‚àß p ‚â´ i = f by
    obtain ‚ü®d, p, i, _, _, fac‚ü© := this
    induction' d using SimplexCategory.rec with d
    exact ‚ü®d, p, i, inferInstance, inferInstance, fac‚ü©
  exact ‚ü®_, _, _, inferInstance, inferInstance, image.fac f‚ü©

namespace SSet

variable (X : SSet.{u})

structure N extends X.S where mk'' ::
  nonDegenerate : simplex ‚àà X.nonDegenerate _

namespace N

variable {X}

@[simps toS]
def mk' (s : X.S) (hs : s.2 ‚àà X.nonDegenerate _) : X.N where
  toS := s
  nonDegenerate := hs

lemma mk'_surjective (s : X.N) :
    ‚àÉ (t : X.S) (ht : t.2 ‚àà X.nonDegenerate _), s = mk' t ht :=
  ‚ü®s.toS, s.nonDegenerate, rfl‚ü©

@[simps]
def mk {n : ‚Ñï} (x : X _‚¶ãn‚¶å) (hx : x ‚àà X.nonDegenerate n) : X.N where
  simplex := x
  nonDegenerate := hx

lemma mk_surjective (x : X.N) :
    ‚àÉ (n : ‚Ñï) (y : X.nonDegenerate n), x = N.mk _ y.2 :=
  ‚ü®x.1.1, ‚ü®_, x.nonDegenerate‚ü©, rfl‚ü©

@[deprecated (since := "2025-08-06")] alias exists_nonDegenerate := mk_surjective

lemma induction
    {motive : ‚àÄ {n : ‚Ñï} (x : X _‚¶ãn‚¶å) (_ : x ‚àà X.nonDegenerate _), Prop}
    (h‚ÇÅ : ‚àÄ (x : X.N), motive x.1.2 x.2)
    {n : ‚Ñï} (x : X _‚¶ãn‚¶å) (hx : x ‚àà X.nonDegenerate _) : motive x hx :=
  h‚ÇÅ (mk x hx)

instance : Preorder X.N := Preorder.lift toS

lemma le_iff {x y : X.N} : x ‚â§ y ‚Üî x.subcomplex ‚â§ y.subcomplex :=
  Iff.rfl

lemma le_iff_toS_le_toS {x y : X.N} : x ‚â§ y ‚Üî x.toS ‚â§ y.toS := Iff.rfl

lemma le_iff_exists {x y : X.N} :
    x ‚â§ y ‚Üî ‚àÉ (f : ‚¶ãx.1.1‚¶å ‚ü∂ ‚¶ãy.1.1‚¶å) (_ : Mono f), X.map f.op y.1.2 = x.1.2 := by
  simp only [le_iff, CategoryTheory.Subpresheaf.ofSection_le_iff,
    Subcomplex.mem_ofSimplex_obj_iff]
  refine ‚ü®?_, by tauto‚ü©
  rintro ‚ü®f, hf‚ü©
  refine ‚ü®f, ?_, hf‚ü©
  have : IsIso (factorThruImage f) := by
    rw [SimplexCategory.isIso_iff_len_eq_of_epi]
    obtain h | h := (SimplexCategory.len_le_of_epi
      (factorThruImage f)).eq_or_lt
    ¬∑ exact h.symm
    ¬∑ exfalso
      apply (mem_nonDegenerate_iff_notMem_degenerate _ _).1 x.2
      rw [mem_degenerate_iff]
      refine ‚ü®_, h, factorThruImage f, inferInstance, ?_‚ü©
      rw [‚Üê image.fac f, op_comp, FunctorToTypes.map_comp_apply] at hf
      rw [‚Üê hf]
      apply Set.mem_range_self
  have := isIso_of_mono_of_epi (factorThruImage f)
  rw [‚Üê image.fac f]
  infer_instance

lemma le_of_le {x y : X.N} (h : x ‚â§ y) : x.1.1 ‚â§ y.1.1 := by
  rw [le_iff_exists] at h
  obtain ‚ü®f, hf, _‚ü© := h
  exact SimplexCategory.len_le_of_mono f

instance : PartialOrder X.N where
  le_antisymm x‚ÇÅ x‚ÇÇ h h' := by
    obtain ‚ü®n‚ÇÅ, ‚ü®x‚ÇÅ, hx‚ÇÅ‚ü©, rfl‚ü© := x‚ÇÅ.mk_surjective
    obtain ‚ü®n‚ÇÇ, ‚ü®x‚ÇÇ, hx‚ÇÇ‚ü©, rfl‚ü© := x‚ÇÇ.mk_surjective
    obtain rfl : n‚ÇÅ = n‚ÇÇ := le_antisymm (le_of_le h) (le_of_le h')
    rw [le_iff_exists] at h
    obtain ‚ü®f, hf, h‚ü© := h
    obtain rfl := SimplexCategory.eq_id_of_mono f
    aesop

lemma subcomplex_injective {x y : X.N} (h : x.subcomplex = y.subcomplex) :
    x = y := by
  apply le_antisymm
  all_goals
  ¬∑ rw [le_iff, h]

lemma subcomplex_injective_iff {x y : X.N} :
    x.subcomplex = y.subcomplex ‚Üî x = y :=
  ‚ü®subcomplex_injective, by rintro rfl; rfl‚ü©

lemma eq_iff {x y : X.N} : x = y ‚Üî x.subcomplex = y.subcomplex :=
  ‚ü®by rintro rfl; rfl, fun h ‚Ü¶ by
    apply le_antisymm
    all_goals
    ¬∑ rw [le_iff, h]‚ü©

def toSubcomplex (x : X.N) {A : X.Subcomplex} (hx : x.simplex ‚àà A.obj _) : A.toSSet.N :=
  N.mk' (x.toS.toSubcomplex hx) (by
    rw [Subcomplex.mem_nonDegenerate_iff]
    exact x.nonDegenerate)

lemma toS_toSubcomplex (x : X.N) {A : X.Subcomplex} (hx : x.simplex ‚àà A.obj _) :
    (x.toSubcomplex hx).toS = x.toS.toSubcomplex hx := rfl

lemma toSubcomplex_le_toSubcomplex_iff
    (x y : X.N) {A : X.Subcomplex} (hx : x.simplex ‚àà A.obj _) (hy : y.simplex ‚àà A.obj _) :
    x.toSubcomplex hx ‚â§ y.toSubcomplex hy ‚Üî x ‚â§ y := by
  apply S.toSubcomplex_le_toSubcomplex_iff

section

variable (s : X.N) {d : ‚Ñï} (hd : s.dim = d)

abbrev cast : X.N where
  toS := s.toS.cast hd
  nonDegenerate := by
    subst hd
    exact s.nonDegenerate

lemma cast_eq_self : s.cast hd = s := by
  subst hd
  rfl

end

lemma ext_iff (x y : X.N) :
    x = y ‚Üî x.toS = y.toS := by
  obtain ‚ü®x, hx, rfl‚ü© := x.mk'_surjective
  obtain ‚ü®y, hy, rfl‚ü© := y.mk'_surjective
  simp [mk']

@[ext]
lemma ext {x y : X.N} (h : x.toS = y.toS) :
    x = y := by
  rwa [ext_iff]

lemma mk_eq_iff_sMk_eq {n m : ‚Ñï} (x : X _‚¶ãn‚¶å) (y : X _‚¶ãm‚¶å)
    (hx : x ‚àà X.nonDegenerate _) (hy : y ‚àà X.nonDegenerate _) :
    N.mk x hx = N.mk y hy ‚Üî S.mk x = S.mk y := by
  rw [ext_iff]
  rfl

end N

@[simps]
def orderEmbeddingN : X.N ‚Ü™o X.Subcomplex where
  toFun x := x.subcomplex
  inj' _ _ h := by
    dsimp at h
    apply le_antisymm <;> rw [N.le_iff, h]
  map_rel_iff' := Iff.rfl

@[simps! obj]
def functorN : X.N ‚•§ SSet.{u} :=
  X.orderEmbeddingN.monotone.functor ‚ãô Subcomplex.toPresheafFunctor

variable {X} in
@[simp]
lemma functorN_map {x‚ÇÅ x‚ÇÇ : X.N} (f : x‚ÇÅ ‚ü∂ x‚ÇÇ) :
    X.functorN.map f = Subcomplex.homOfLE (X.orderEmbeddingN.monotone (leOfHom f)) := rfl

namespace S

variable {X}

lemma subcomplex_eq_of_epi (x y : X.S) (f : ‚¶ãx.dim‚¶å ‚ü∂ ‚¶ãy.dim‚¶å) [Epi f]
    (hf : X.map f.op y.simplex = x.simplex) :
    x.subcomplex = y.subcomplex := by
  refine le_antisymm ?_ ?_
  ¬∑ simp only [Subcomplex.ofSimplex_le_iff]
    exact ‚ü®f.op, by aesop‚ü©
  ¬∑ simp only [Subcomplex.ofSimplex_le_iff]
    have := isSplitEpi_of_epi f
    have : Function.Injective (X.map f.op) := by
      rw [‚Üê mono_iff_injective]
      infer_instance
    refine ‚ü®(section_ f).op, this ?_‚ü©
    dsimp
    rw [‚Üê hf, ‚Üê FunctorToTypes.map_comp_apply, ‚Üê FunctorToTypes.map_comp_apply,
      ‚Üê op_comp, ‚Üê op_comp, Category.assoc, IsSplitEpi.id, Category.comp_id]

lemma existsUnique_n (x : X.S) : ‚àÉ! (y : X.N), y.subcomplex = x.subcomplex :=
  existsUnique_of_exists_of_unique (by
      obtain ‚ü®n, x, hx, rfl‚ü© := x.mk_surjective
      obtain ‚ü®m, f, _, y, rfl‚ü© := X.exists_nonDegenerate x
      exact ‚ü®N.mk y.1 y.2, (subcomplex_eq_of_epi _ _ f rfl).symm‚ü©)
    (fun y‚ÇÅ y‚ÇÇ h‚ÇÅ h‚ÇÇ ‚Ü¶ N.subcomplex_injective (by rw [h‚ÇÅ, h‚ÇÇ]))

/-- This is the non degenerate simplex of a simplicial set which
generates the same subcomplex as a given simplex. -/
noncomputable def toN (x : X.S) : X.N := x.existsUnique_n.exists.choose

@[simp]
lemma subcomplex_toN (x : X.S) : x.toN.subcomplex = x.subcomplex :=
  x.existsUnique_n.exists.choose_spec

lemma toN_eq_iff {x : X.S} {y : X.N} :
    x.toN = y ‚Üî y.subcomplex = x.subcomplex :=
  ‚ü®by rintro rfl; simp, fun h ‚Ü¶ x.existsUnique_n.unique (by simp) h‚ü©

lemma toN_of_nonDegenerate (x : X.S) (hx : x.simplex ‚àà X.nonDegenerate _) :
    x.toN = N.mk _ hx := by
  rw [toN_eq_iff]
  rfl

lemma existsUnique_toNœÄ' {x : X.S} {y : X.N} (hy : x.toN = y) :
    ‚àÉ! (f : ‚¶ãx.dim‚¶å ‚ü∂ ‚¶ãy.dim‚¶å), Epi f ‚àß X.map f.op y.simplex = x.simplex := by
  obtain ‚ü®n, x, hx, rfl‚ü© := x.mk_surjective
  obtain ‚ü®m, f, _, z, rfl‚ü© := X.exists_nonDegenerate x
  obtain rfl : y = N.mk _ z.2 := by
    rw [toN_eq_iff] at hy
    rw [‚Üê N.subcomplex_injective_iff, hy]
    exact subcomplex_eq_of_epi _ _ f rfl
  exact existsUnique_of_exists_of_unique ‚ü®f, inferInstance, rfl‚ü©
    (fun f‚ÇÅ f‚ÇÇ ‚ü®_, hf‚ÇÅ‚ü© ‚ü®_, hf‚ÇÇ‚ü© ‚Ü¶ unique_nonDegenerate‚ÇÉ _ _ _ _ hf‚ÇÅ.symm _ _ hf‚ÇÇ.symm)

section

variable {x : X.S} {y : X.N} (hy : x.toN = y)

noncomputable def toNœÄ' {x : X.S} {y : X.N} (hy : x.toN = y) : ‚¶ãx.dim‚¶å ‚ü∂ ‚¶ãy.dim‚¶å :=
  (existsUnique_toNœÄ' hy).exists.choose

instance : Epi (toNœÄ' hy) := (existsUnique_toNœÄ' hy).exists.choose_spec.1

@[simp]
lemma map_toNœÄ' : X.map (toNœÄ' hy).op y.simplex = x.simplex :=
  (existsUnique_toNœÄ' hy).exists.choose_spec.2

lemma dim_toN_le (x : X.S) : x.toN.dim ‚â§ x.dim :=
  SimplexCategory.le_of_epi (toNœÄ' (x := x) rfl)

lemma toNœÄ'_eq_iff (f : ‚¶ãx.dim‚¶å ‚ü∂ ‚¶ãy.dim‚¶å) :
    toNœÄ' hy = f ‚Üî X.map f.op y.simplex = x.simplex := by
  constructor
  ¬∑ rintro rfl
    simp
  ¬∑ intro hf
    refine (existsUnique_toNœÄ' hy).unique ‚ü®inferInstance, by simp‚ü©
      ‚ü®?_, hf‚ü©
    obtain ‚ü®d, p, i, _, _, fac‚ü© := SimplexCategory.exists_mono_fac f
    obtain h | rfl := (SimplexCategory.le_of_mono i).lt_or_eq
    ¬∑ exfalso
      let z := S.mk (X.map i.op y.simplex)
      have h‚ÇÅ : z.toN = y := by
        rw [toN_eq_iff]
        apply le_antisymm
        ¬∑ rw [‚Üê hy, x.subcomplex_toN, Subpresheaf.ofSection_le_iff]
          exact ‚ü®p.op, by simp [‚Üê hf, ‚Üê fac, z]‚ü©
        ¬∑ rw [Subpresheaf.ofSection_le_iff]
          exact ‚ü®i.op, rfl‚ü©
      have h‚ÇÇ := z.dim_toN_le
      rw [N.ext_iff] at h‚ÇÅ
      rw [S.dim_eq_of_eq h‚ÇÅ] at h‚ÇÇ
      simpa [z] using lt_of_lt_of_le h h‚ÇÇ
    ¬∑ obtain rfl := SimplexCategory.eq_id_of_mono i
      simpa [‚Üê fac]

end

noncomputable def toNœÄ (x : X.S) : ‚¶ãx.dim‚¶å ‚ü∂ ‚¶ãx.toN.dim‚¶å := toNœÄ' rfl

instance (x : X.S) : Epi x.toNœÄ := by dsimp [toNœÄ]; infer_instance

@[simp]
lemma map_toNœÄ (x : X.S) : X.map x.toNœÄ.op x.toN.simplex = x.simplex := by
  simp [toNœÄ]

lemma toNœÄ_eq_iff (x : X.S) (f : ‚¶ãx.dim‚¶å ‚ü∂ ‚¶ãx.toN.dim‚¶å) :
    x.toNœÄ = f ‚Üî X.map f.op x.toN.simplex = x.simplex := by
  apply toNœÄ'_eq_iff

lemma self_le_toS_toN (s : X.S) : s ‚â§ s.toN.toS := by
  rw [S.le_iff, subcomplex_toN]

lemma toS_toN_le_self (s : X.S) : s.toN.toS ‚â§ s := by
  rw [S.le_iff, subcomplex_toN]

end S

variable {X}

@[simp]
lemma N.toS_toN (x : X.N) : x.toS.toN = x := by
  rw [S.toN_eq_iff]

lemma N.toN_surjective : Function.Surjective (S.toN (X := X)) :=
  fun s ‚Ü¶ ‚ü®s.toS, by simp‚ü©


variable (X)

@[simps]
def coconeN : Cocone X.functorN where
  pt := X
  Œπ := { app _ := Subcomplex.Œπ _ }

namespace isColimitCoconeN

variable {X}

lemma hom_ext {Y : SSet.{u}} {f g : X ‚ü∂ Y}
    (h : ‚àÄ (x : X.N), (Subcomplex.ofSimplex x.1.2).Œπ ‚â´ f = (Subcomplex.ofSimplex x.1.2).Œπ ‚â´ g) :
    f = g := by
  rw [‚Üê cancel_epi (Subcomplex.topIso _).hom, ‚Üê Subpresheaf.equalizer_eq_iff,
    Subcomplex.eq_top_iff_contains_nonDegenerate]
  intro n x hx
  simpa [Subpresheaf.equalizer] using
    congr_fun (NatTrans.congr_app (h (N.mk _ hx)) (op ‚¶ãn‚¶å))
      ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©

variable (s : Cocone X.functorN)

noncomputable def descApp {n : ‚Ñï} (x : X _‚¶ãn‚¶å) : s.pt _‚¶ãn‚¶å :=
  yonedaEquiv (stdSimplex.map (S.mk x).toNœÄ ‚â´ Subcomplex.toOfSimplex _ ‚â´ s.Œπ.app (S.mk x).toN)

lemma descApp_apply {n : ‚Ñï} (x : X _‚¶ãn‚¶å) (y : X.N) (f : ‚¶ãn‚¶å ‚ü∂ ‚¶ãy.1.1‚¶å) [Epi f]
    (hf : X.map f.op y.1.2 = x) :
    descApp s x = yonedaEquiv (stdSimplex.map f ‚â´ Subcomplex.toOfSimplex _ ‚â´ s.Œπ.app y) := by
  obtain rfl : (S.mk x).toN = y := by
    rw [S.toN_eq_iff, ‚Üê hf]
    exact (S.subcomplex_eq_of_epi _ _ f rfl).symm
  dsimp only [descApp]
  congr
  rwa [S.toNœÄ_eq_iff]

@[simp]
lemma descApp_apply' (x : X.N) :
    descApp s x.1.2 = (s.Œπ.app x).app _ ‚ü®x.1.2, Subcomplex.mem_ofSimplex_obj _‚ü© :=  by
  rw [descApp_apply s x.1.2 x (ùüô _) (by simp), CategoryTheory.Functor.map_id, Category.id_comp,
    yonedaEquiv_comp, Subcomplex.yonedaEquiv_toOfSimplex]

noncomputable def desc : X ‚ü∂ s.pt where
  app := fun ‚ü®n‚ü© ‚Ü¶ by
    induction' n using SimplexCategory.rec with n
    exact descApp _
  naturality := by
    rintro ‚ü®n‚ü© ‚ü®m‚ü© f
    obtain ‚ü®f, rfl‚ü© := Quiver.Hom.op_surjective f
    induction' n using SimplexCategory.rec with n
    induction' m using SimplexCategory.rec with m
    dsimp [SimplexCategory.rec]
    ext x
    dsimp [descApp]
    have h : (S.mk (X.map f.op x)).toN ‚â§ (S.mk x).toN := by
      rw [N.le_iff, S.subcomplex_toN, S.subcomplex_toN, Subpresheaf.ofSection_le_iff,
        Subcomplex.mem_ofSimplex_obj_iff]
      exact ‚ü®f, rfl‚ü©
    apply yonedaEquiv.symm.injective
    rw [Equiv.symm_apply_apply, SSet.yonedaEquiv_symm_map,
      Equiv.symm_apply_apply, ‚Üê s.w (homOfLE h)]
    dsimp
    simp only [‚Üê Category.assoc]; congr 1; simp only [Category.assoc]
    rw [‚Üê cancel_mono (Subcomplex.Œπ _)]
    apply yonedaEquiv.injective
    dsimp
    simp only [Category.assoc, Subcomplex.homOfLE_Œπ, Subcomplex.toOfSimplex_Œπ,
      yonedaEquiv_map_comp, Equiv.apply_symm_apply, S.map_toNœÄ]

@[simp]
lemma desc_app_apply {n : ‚Ñï} (x : X _‚¶ãn‚¶å) :
    (desc s).app _ x = descApp _ x := rfl

@[reassoc (attr := simp)]
def fac (x : X.N) : (Subcomplex.ofSimplex x.1.2).Œπ ‚â´ desc s = s.Œπ.app x := by
  rw [‚Üê cancel_epi (Subcomplex.toOfSimplex _),
    Subcomplex.toOfSimplex_Œπ_assoc, yonedaEquiv_symm_comp, desc_app_apply,
    descApp_apply']
  apply yonedaEquiv.injective
  rw [Equiv.apply_symm_apply, yonedaEquiv_comp, Subcomplex.yonedaEquiv_toOfSimplex]

end isColimitCoconeN

noncomputable def isColimitCoconeN : IsColimit X.coconeN where
  desc := isColimitCoconeN.desc
  fac := isColimitCoconeN.fac
  uniq s m hm := isColimitCoconeN.hom_ext (by aesop)

variable {X} {Y : SSet.{u}} (f : X ‚ü∂ Y)

@[simps -isSimp coe]
noncomputable def mapN : X.N ‚Üío Y.N where
  toFun x := (S.map f x.toS).toN
  monotone' x x' h := by
    simp only [N.le_iff, S.subcomplex_toN, Subpresheaf.ofSection_le_iff, S.map_dim,
      S.map_simplex, mem_ofSimplex_obj_iff] at h ‚ä¢
    obtain ‚ü®g, hg‚ü© := h
    exact ‚ü®g, by simp only [‚Üê hg, FunctorToTypes.naturality]‚ü©

@[simp]
lemma mapN_toN (x : X.S) :
    mapN f x.toN = (S.map f x).toN := by
  simp only [mapN_coe]
  simp [N.eq_iff]

lemma toS_mapN_of_nonDegenerate (x : X.N) (hx : f.app _ x.simplex ‚àà Y.nonDegenerate _) :
    (mapN f x).toS = S.map f x.toS := by
  conv_lhs => rw [‚Üê x.toS_toN, mapN_toN]
  rw [S.toN_of_nonDegenerate _ hx]
  rfl

lemma toS_mapN_of_isIso (x : X.N) [IsIso f] :
    (mapN f x).toS = S.map f x.toS :=
  toS_mapN_of_nonDegenerate _ _
    (by simpa only [nonDegenerate_iff_of_isIso] using x.nonDegenerate)

lemma toS_mapN_of_mono (x : X.N) [Mono f] :
    (mapN f x).toS = S.map f x.toS :=
  toS_mapN_of_nonDegenerate _ _
    (by simpa only [nonDegenerate_iff_of_mono] using x.nonDegenerate)

@[simp]
lemma mapN_id : mapN (ùüô X) = OrderHom.id := by
  ext x
  obtain ‚ü®x, rfl‚ü© := x.toN_surjective
  simp

lemma mapN_mapN {Z : SSet.{u}} (g : Y ‚ü∂ Z) (x : X.N) :
    mapN g (mapN f x) = mapN (f ‚â´ g) x := by
  obtain ‚ü®x, rfl‚ü© := x.toN_surjective
  simp [S.map_map]

@[simp]
lemma subcomplex_mapN (x : X.N) : (mapN f x).subcomplex = Subcomplex.image x.subcomplex f := by
  simp [mapN]

namespace N

attribute [local simp] mapN_mapN in
@[simps]
noncomputable def functor : SSet.{u} ‚•§ PartOrd.{u} where
  obj X := .of X.N
  map f := PartOrd.ofHom (mapN f)

end N

lemma N.mapN_Œπ_simplex_mem_obj {A : X.Subcomplex} (x : A.toSSet.N) :
    (mapN A.Œπ x).simplex ‚àà A.obj _ := by
  rw [toS_mapN_of_mono]
  simp

@[simp]
lemma N.toSubcomplex_mapN_Œπ {A : X.Subcomplex} (x : A.toSSet.N) :
    (mapN A.Œπ x).toSubcomplex x.mapN_Œπ_simplex_mem_obj = x := by
  rw [N.ext_iff]
  apply S.map_injective_of_mono A.Œπ
  rw [toS_toSubcomplex, S.map_toSubcomplex, toS_mapN_of_mono A.Œπ]

@[simp]
lemma N.mapN_Œπ_toSubcomplex (x : X.N) {A : X.Subcomplex} (hx : x.simplex ‚àà A.obj _) :
    mapN A.Œπ (x.toSubcomplex hx) = x := by
  rw [ext_iff, toS_mapN_of_mono, toS_toSubcomplex, S.map_Œπ_toSubcomplex]

lemma N.mapN_injective_of_mono [Mono f] :
    Function.Injective (mapN f) := by
  intro s t h
  rw [N.ext_iff] at h ‚ä¢
  exact S.map_injective_of_mono f (by simpa only [toS_mapN_of_mono] using h)

end SSet
