import TopCatModelCategory.CommSq
import TopCatModelCategory.SSet.Boundary
import TopCatModelCategory.SSet.HomotopyBasic

universe u

open CategoryTheory Category Simplicial Limits

namespace SSet

variable {X : SSet.{u}}

lemma yonedaEquiv_symm_zero (x : X _[0]) :
    (yonedaEquiv _ _).symm x = const x := by
  apply (yonedaEquiv _ _).injective
  simp [yonedaEquiv, yonedaCompUliftFunctorEquiv]

namespace subcomplexBoundary‚ÇÅ

lemma sq : Subcomplex.Sq ‚ä• (standardSimplex.face {0}) (standardSimplex.face {1})
    (subcomplexBoundary.{u} 1) where
  max_eq := by
    rw [subcomplexBoundary_eq_iSup]
    ext
    rw [Subpresheaf.max_obj, Set.mem_union, Subpresheaf.iSup_obj,
      Set.iSup_eq_iUnion, Set.mem_iUnion]
    constructor
    ¬∑ rintro (h‚ÇÄ | h‚ÇÅ)
      ¬∑ exact ‚ü®1, h‚ÇÄ‚ü©
      ¬∑ exact ‚ü®0, h‚ÇÅ‚ü©
    ¬∑ rintro ‚ü®i, h‚ü©
      fin_cases i
      ¬∑ exact Or.inr h
      ¬∑ exact Or.inl h
  min_eq := by
    ext ‚ü®m‚ü© x
    induction' m using SimplexCategory.rec with m
    aesop

def Œπ‚ÇÄ : Œî[0] ‚ü∂ (subcomplexBoundary 1 : SSet.{u}) :=
  (standardSimplex.isoOfRepresentableBy
    (standardSimplex.faceRepresentableBy.{u} ({1}·∂ú : Finset (Fin 2)) 0
    (Fin.orderIsoSingleton 0))).hom ‚â´
    Subcomplex.homOfLE (face_le_subcomplexBoundary (1 : Fin 2))

def Œπ‚ÇÅ : Œî[0] ‚ü∂ (subcomplexBoundary 1 : SSet.{u}) :=
  (standardSimplex.isoOfRepresentableBy
    (standardSimplex.faceRepresentableBy.{u} ({0}·∂ú : Finset (Fin 2)) 0
    (Fin.orderIsoSingleton 1))).hom ‚â´
    Subcomplex.homOfLE (face_le_subcomplexBoundary (0 : Fin 2))

lemma isPushout : IsPushout (initial.to _) (initial.to _) Œπ‚ÇÄ.{u} Œπ‚ÇÅ.{u} :=
  sq.{u}.isPushout.of_iso' (initialIsoIsInitial Subcomplex.isInitialBot)
    (standardSimplex.isoOfRepresentableBy
      (standardSimplex.faceRepresentableBy.{u} ({1}·∂ú : Finset (Fin 2)) 0
      (Fin.orderIsoSingleton 0)))
    (standardSimplex.isoOfRepresentableBy
      (standardSimplex.faceRepresentableBy.{u} ({0}·∂ú : Finset (Fin 2)) 0
      (Fin.orderIsoSingleton 1))) (Iso.refl _)
    (initialIsInitial.hom_ext _ _) (initialIsInitial.hom_ext _ _)
    (by simp [Œπ‚ÇÄ]) (by simp [Œπ‚ÇÅ])

noncomputable def isColimit : IsColimit (BinaryCofan.mk Œπ‚ÇÄ.{u} Œπ‚ÇÅ) :=
  isPushout.{u}.isColimitBinaryCofan initialIsInitial

@[ext]
lemma hom_ext {f g : (subcomplexBoundary 1 : SSet) ‚ü∂ X}
    (h‚ÇÄ : Œπ‚ÇÄ ‚â´ f = Œπ‚ÇÄ ‚â´ g) (h‚ÇÅ : Œπ‚ÇÅ ‚â´ f = Œπ‚ÇÅ ‚â´ g) : f = g := by
  apply BinaryCofan.IsColimit.hom_ext isColimit <;> assumption

noncomputable def desc (x‚ÇÄ x‚ÇÅ : X _[0]) : (subcomplexBoundary 1 : SSet) ‚ü∂ X :=
  (BinaryCofan.IsColimit.desc' isColimit ((yonedaEquiv _ _).symm x‚ÇÄ)
    ((yonedaEquiv _ _).symm x‚ÇÅ)).1

@[reassoc (attr := simp)]
lemma Œπ‚ÇÄ_desc (x‚ÇÄ x‚ÇÅ : X _[0]) : Œπ‚ÇÄ ‚â´ desc x‚ÇÄ x‚ÇÅ = (yonedaEquiv _ _).symm x‚ÇÄ :=
  (BinaryCofan.IsColimit.desc' isColimit _ _).2.1

@[reassoc (attr := simp)]
lemma Œπ‚ÇÅ_desc (x‚ÇÄ x‚ÇÅ : X _[0]) : Œπ‚ÇÅ ‚â´ desc x‚ÇÄ x‚ÇÅ = (yonedaEquiv _ _).symm x‚ÇÅ :=
  (BinaryCofan.IsColimit.desc' isColimit _ _).2.2

end subcomplexBoundary‚ÇÅ

namespace KanComplex

variable (X)

structure FundamentalGroupoid where
  pt : X _[0]

namespace FundamentalGroupoid

variable {X}

def objEquiv : FundamentalGroupoid X ‚âÉ X _[0] where
  toFun x := x.pt
  invFun x := { pt := x}
  left_inv _ := rfl
  right_inv _ := rfl

def Hom (x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X) :=
  Subcomplex.RelativeMorphism.HomotopyClass.{u} _ _
    (subcomplexBoundary‚ÇÅ.desc x‚ÇÄ.pt x‚ÇÅ.pt ‚â´ (Subcomplex.topIso X).inv)

abbrev Path (x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X) :=
  Subcomplex.RelativeMorphism.{u} _ _
    (subcomplexBoundary‚ÇÅ.desc x‚ÇÄ.pt x‚ÇÅ.pt ‚â´ (Subcomplex.topIso X).inv)

def Path.id (x : FundamentalGroupoid X) : Path x x where
  map := const x.pt
  comm := by
    apply subcomplexBoundary‚ÇÅ.hom_ext
    ¬∑ rw [assoc, subcomplexBoundary‚ÇÅ.Œπ‚ÇÄ_desc_assoc, comp_const, comp_const,
        yonedaEquiv_symm_zero, const_comp, FunctorToTypes.comp, Subpresheaf.Œπ_app,
        Subcomplex.topIso_inv_app_coe]
    ¬∑ rw [assoc, subcomplexBoundary‚ÇÅ.Œπ‚ÇÅ_desc_assoc, comp_const, comp_const,
        yonedaEquiv_symm_zero, const_comp, FunctorToTypes.comp, Subpresheaf.Œπ_app,
        Subcomplex.topIso_inv_app_coe]

namespace Path

variable {x‚ÇÄ x‚ÇÅ x‚ÇÇ : FundamentalGroupoid X}

structure CompStruct (p‚ÇÄ‚ÇÅ : Path x‚ÇÄ x‚ÇÅ) (p‚ÇÅ‚ÇÇ : Path x‚ÇÅ x‚ÇÇ) (p‚ÇÄ‚ÇÇ : Path x‚ÇÄ x‚ÇÇ) where
  map : Œî[2] ‚ü∂ X
  h‚ÇÄ‚ÇÅ : standardSimplex.map (SimplexCategory.Œ¥ 2) ‚â´ map = p‚ÇÄ‚ÇÅ.map
  h‚ÇÅ‚ÇÇ : standardSimplex.map (SimplexCategory.Œ¥ 0) ‚â´ map = p‚ÇÅ‚ÇÇ.map
  h‚ÇÄ‚ÇÇ : standardSimplex.map (SimplexCategory.Œ¥ 1) ‚â´ map = p‚ÇÄ‚ÇÇ.map

lemma exists_compStruct (p‚ÇÄ‚ÇÅ : Path x‚ÇÄ x‚ÇÅ) (p‚ÇÅ‚ÇÇ : Path x‚ÇÅ x‚ÇÇ) :
    ‚àÉ (p‚ÇÄ‚ÇÇ : Path x‚ÇÄ x‚ÇÇ), Nonempty (CompStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ p‚ÇÄ‚ÇÇ) := by
  sorry

def compUniqueUpToHomotopy
    {p‚ÇÄ‚ÇÅ p‚ÇÄ‚ÇÅ' : Path x‚ÇÄ x‚ÇÅ} {p‚ÇÅ‚ÇÇ p‚ÇÅ‚ÇÇ' : Path x‚ÇÅ x‚ÇÇ} {p‚ÇÄ‚ÇÇ p‚ÇÄ‚ÇÇ' : Path x‚ÇÄ x‚ÇÇ}
    (s : CompStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ p‚ÇÄ‚ÇÇ) (s' : CompStruct p‚ÇÄ‚ÇÅ' p‚ÇÅ‚ÇÇ' p‚ÇÄ‚ÇÇ')
    (h‚ÇÄ‚ÇÅ : p‚ÇÄ‚ÇÅ.Homotopy p‚ÇÄ‚ÇÅ') (h‚ÇÄ‚ÇÅ : p‚ÇÅ‚ÇÇ.Homotopy p‚ÇÅ‚ÇÇ') :
    p‚ÇÄ‚ÇÇ.Homotopy p‚ÇÄ‚ÇÇ' := sorry

noncomputable def comp (p‚ÇÄ‚ÇÅ : Path x‚ÇÄ x‚ÇÅ) (p‚ÇÅ‚ÇÇ : Path x‚ÇÅ x‚ÇÇ) :
    Path x‚ÇÄ x‚ÇÇ :=
  (exists_compStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ).choose

noncomputable def compStruct (p‚ÇÄ‚ÇÅ : Path x‚ÇÄ x‚ÇÅ) (p‚ÇÅ‚ÇÇ : Path x‚ÇÅ x‚ÇÇ) :
    CompStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ (p‚ÇÄ‚ÇÅ.comp p‚ÇÅ‚ÇÇ) :=
  (exists_compStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ).choose_spec.some

end Path

def Hom.id (x : FundamentalGroupoid X) : Hom x x :=
  (Path.id x).homotopyClass

noncomputable def Hom.comp {x‚ÇÄ x‚ÇÅ x‚ÇÇ : FundamentalGroupoid X} (f : Hom x‚ÇÄ x‚ÇÅ) (g : Hom x‚ÇÅ x‚ÇÇ) :
    Hom x‚ÇÄ x‚ÇÇ := by
  refine Quot.lift‚ÇÇ (fun p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ ‚Ü¶ (Path.comp p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ).homotopyClass) ?_ ?_ f g
  ¬∑ rintro p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ p‚ÇÅ‚ÇÇ' ‚ü®h‚ü©
    exact (Path.compUniqueUpToHomotopy (p‚ÇÄ‚ÇÅ.compStruct p‚ÇÅ‚ÇÇ)
      (p‚ÇÄ‚ÇÅ.compStruct p‚ÇÅ‚ÇÇ') (.refl _) h).eq
  ¬∑ rintro p‚ÇÄ‚ÇÅ p‚ÇÄ‚ÇÅ' p‚ÇÅ‚ÇÇ ‚ü®h‚ü©
    exact (Path.compUniqueUpToHomotopy (p‚ÇÄ‚ÇÅ.compStruct p‚ÇÅ‚ÇÇ)
      (p‚ÇÄ‚ÇÅ'.compStruct p‚ÇÅ‚ÇÇ) h (.refl _)).eq

noncomputable instance : CategoryStruct (FundamentalGroupoid X) where
  Hom := Hom
  id := Hom.id
  comp := Hom.comp

def homMk {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X} (p : Path x‚ÇÄ x‚ÇÅ) :
    x‚ÇÄ ‚ü∂ x‚ÇÅ :=
  p.homotopyClass

@[simp]
lemma homMk_refl (x : FundamentalGroupoid X) :
    homMk (Path.id x) = ùüô x := rfl

lemma homMk_eq_of_homotopy {p q : Path x‚ÇÄ x‚ÇÅ} (h : p.Homotopy q) :
    homMk p = homMk q :=
  h.eq

variable {x‚ÇÄ x‚ÇÅ x‚ÇÇ : FundamentalGroupoid X}

lemma Path.CompStruct.fac {x‚ÇÄ x‚ÇÅ x‚ÇÇ : FundamentalGroupoid X}
    {p‚ÇÄ‚ÇÅ : Path x‚ÇÄ x‚ÇÅ} {p‚ÇÅ‚ÇÇ : Path x‚ÇÅ x‚ÇÇ} {p‚ÇÄ‚ÇÇ : Path x‚ÇÄ x‚ÇÇ}
    (h : CompStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ p‚ÇÄ‚ÇÇ) : homMk p‚ÇÄ‚ÇÅ ‚â´ homMk p‚ÇÅ‚ÇÇ = homMk p‚ÇÄ‚ÇÇ :=
  homMk_eq_of_homotopy (compUniqueUpToHomotopy (Path.compStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ)
    h (.refl _) (.refl _))

end FundamentalGroupoid

end KanComplex

end SSet
