import TopCatModelCategory.CommSq
import TopCatModelCategory.IsFibrant
import TopCatModelCategory.SSet.Horn
import TopCatModelCategory.SSet.HomotopyBasic
import TopCatModelCategory.SSet.AnodyneExtensions

universe u

open HomotopicalAlgebra CategoryTheory Category Simplicial Limits MonoidalCategory
  ChosenFiniteProducts

namespace SSet

variable {X : SSet.{u}}

lemma yonedaEquiv_symm_zero (x : X _[0]) :
    (yonedaEquiv _ _).symm x = const x := by
  apply (yonedaEquiv _ _).injective
  simp [yonedaEquiv, yonedaCompUliftFunctorEquiv]

namespace standardSimplex

variable (X) {Y : SSet.{u}}

def isTerminalObj‚ÇÄ : IsTerminal (Œî[0] : SSet.{u}) :=
  IsTerminal.ofUniqueHom (fun _ ‚Ü¶ SSet.const (obj‚ÇÄEquiv.symm 0)) (by aesop_cat)

noncomputable def leftUnitor : Œî[0] ‚äó X ‚âÖ X where
  hom := snd _ _
  inv := lift (isTerminalObj‚ÇÄ.from _) (ùüô X)

@[reassoc (attr := simp)]
lemma leftUnitor_inv_snd : (leftUnitor X).inv ‚â´ snd _ _ = ùüô _ := rfl

variable {X} in
@[reassoc (attr := simp)]
lemma leftUnitor_inv_naturality (f : X ‚ü∂ Y) :
    (leftUnitor X).inv ‚â´ _ ‚óÅ f = f ‚â´ (leftUnitor Y).inv := rfl

@[reassoc (attr := simp)]
lemma leftUnitor_inv_map_Œ¥_zero :
    (standardSimplex.leftUnitor X).inv ‚â´ standardSimplex.map (SimplexCategory.Œ¥ 0) ‚ñ∑ X =
      Œπ‚ÇÅ := rfl

@[reassoc (attr := simp)]
lemma leftUnitor_inv_map_Œ¥_one :
    (standardSimplex.leftUnitor X).inv ‚â´ standardSimplex.map (SimplexCategory.Œ¥ 1) ‚ñ∑ X =
      Œπ‚ÇÄ := rfl

noncomputable def rightUnitor : X ‚äó Œî[0] ‚âÖ X where
  hom := fst _ _
  inv := lift (ùüô X) (isTerminalObj‚ÇÄ.from _)

@[reassoc (attr := simp)]
lemma rightUnitor_inv_map_Œ¥_zero :
    (standardSimplex.rightUnitor X).inv ‚â´ X ‚óÅ standardSimplex.map (SimplexCategory.Œ¥ 0) =
      Œπ‚ÇÅ ‚â´ (Œ≤_ _ _).hom := rfl

@[reassoc (attr := simp)]
lemma rightUnitor_inv_map_Œ¥_one :
    (standardSimplex.rightUnitor X).inv ‚â´ X ‚óÅ standardSimplex.map (SimplexCategory.Œ¥ 1) =
      Œπ‚ÇÄ ‚â´ (Œ≤_ _ _).hom := rfl

end standardSimplex

namespace subcomplexBoundary‚ÇÅ

lemma sq : Subcomplex.Sq ‚ä• (standardSimplex.face {0}) (standardSimplex.face {1})
    (subcomplexBoundary.{u} 1) where
  max_eq := by
    rw [subcomplexBoundary_eq_iSup]
    ext
    rw [Subpresheaf.max_obj, Set.mem_union, Subpresheaf.iSup_obj,
      Set.iSup_eq_iUnion, Set.mem_iUnion]
    constructor
    ¬∑ rintro (h‚ÇÄ | h‚ÇÅ)
      ¬∑ exact ‚ü®1, h‚ÇÄ‚ü©
      ¬∑ exact ‚ü®0, h‚ÇÅ‚ü©
    ¬∑ rintro ‚ü®i, h‚ü©
      fin_cases i
      ¬∑ exact Or.inr h
      ¬∑ exact Or.inl h
  min_eq := by
    ext ‚ü®m‚ü© x
    induction' m using SimplexCategory.rec with m
    aesop

def Œπ‚ÇÄ : Œî[0] ‚ü∂ (subcomplexBoundary 1 : SSet.{u}) :=
  (standardSimplex.isoOfRepresentableBy
    (standardSimplex.faceRepresentableBy.{u} ({1}·∂ú : Finset (Fin 2)) 0
    (Fin.orderIsoSingleton 0))).hom ‚â´
    Subcomplex.homOfLE (face_le_subcomplexBoundary (1 : Fin 2))

def Œπ‚ÇÅ : Œî[0] ‚ü∂ (subcomplexBoundary 1 : SSet.{u}) :=
  (standardSimplex.isoOfRepresentableBy
    (standardSimplex.faceRepresentableBy.{u} ({0}·∂ú : Finset (Fin 2)) 0
    (Fin.orderIsoSingleton 1))).hom ‚â´
    Subcomplex.homOfLE (face_le_subcomplexBoundary (0 : Fin 2))

@[reassoc (attr := simp)]
lemma Œπ‚ÇÄ_Œπ : Œπ‚ÇÄ.{u} ‚â´ (subcomplexBoundary 1).Œπ =
    standardSimplex.map (SimplexCategory.Œ¥ 1) := by
  apply (yonedaEquiv _ _ ).injective
  ext i
  fin_cases i
  rfl

@[reassoc (attr := simp)]
lemma Œπ‚ÇÅ_Œπ : Œπ‚ÇÅ.{u} ‚â´ (subcomplexBoundary 1).Œπ =
    standardSimplex.map (SimplexCategory.Œ¥ 0) := by
  apply (yonedaEquiv _ _ ).injective
  ext i
  fin_cases i
  rfl

lemma isPushout : IsPushout (initial.to _) (initial.to _) Œπ‚ÇÄ.{u} Œπ‚ÇÅ.{u} :=
  sq.{u}.isPushout.of_iso' (initialIsoIsInitial Subcomplex.isInitialBot)
    (standardSimplex.isoOfRepresentableBy
      (standardSimplex.faceRepresentableBy.{u} ({1}·∂ú : Finset (Fin 2)) 0
      (Fin.orderIsoSingleton 0)))
    (standardSimplex.isoOfRepresentableBy
      (standardSimplex.faceRepresentableBy.{u} ({0}·∂ú : Finset (Fin 2)) 0
      (Fin.orderIsoSingleton 1))) (Iso.refl _)
    (initialIsInitial.hom_ext _ _) (initialIsInitial.hom_ext _ _)
    (by simp [Œπ‚ÇÄ]) (by simp [Œπ‚ÇÅ])

noncomputable def isColimit : IsColimit (BinaryCofan.mk Œπ‚ÇÄ.{u} Œπ‚ÇÅ) :=
  isPushout.{u}.isColimitBinaryCofan initialIsInitial

@[ext]
lemma hom_ext {f g : (subcomplexBoundary 1 : SSet) ‚ü∂ X}
    (h‚ÇÄ : Œπ‚ÇÄ ‚â´ f = Œπ‚ÇÄ ‚â´ g) (h‚ÇÅ : Œπ‚ÇÅ ‚â´ f = Œπ‚ÇÅ ‚â´ g) : f = g := by
  apply BinaryCofan.IsColimit.hom_ext isColimit <;> assumption

noncomputable def desc (x‚ÇÄ x‚ÇÅ : X _[0]) : (subcomplexBoundary 1 : SSet) ‚ü∂ X :=
  (BinaryCofan.IsColimit.desc' isColimit ((yonedaEquiv _ _).symm x‚ÇÄ)
    ((yonedaEquiv _ _).symm x‚ÇÅ)).1

@[reassoc (attr := simp)]
lemma Œπ‚ÇÄ_desc (x‚ÇÄ x‚ÇÅ : X _[0]) : Œπ‚ÇÄ ‚â´ desc x‚ÇÄ x‚ÇÅ = (yonedaEquiv _ _).symm x‚ÇÄ :=
  (BinaryCofan.IsColimit.desc' isColimit _ _).2.1

@[reassoc (attr := simp)]
lemma Œπ‚ÇÅ_desc (x‚ÇÄ x‚ÇÅ : X _[0]) : Œπ‚ÇÅ ‚â´ desc x‚ÇÄ x‚ÇÅ = (yonedaEquiv _ _).symm x‚ÇÅ :=
  (BinaryCofan.IsColimit.desc' isColimit _ _).2.2

def isColimitRightTensor (X : SSet.{u}): IsColimit (BinaryCofan.mk (Œπ‚ÇÄ ‚ñ∑ X) (Œπ‚ÇÅ ‚ñ∑ X)) :=
  sorry

def isColimitLeftTensor (X : SSet.{u}): IsColimit (BinaryCofan.mk (X ‚óÅ Œπ‚ÇÄ) (X ‚óÅ Œπ‚ÇÅ)) :=
  sorry

end subcomplexBoundary‚ÇÅ

namespace KanComplex

variable (X)
structure FundamentalGroupoid [IsFibrant X] where
  pt : X _[0]

variable [IsFibrant X]

namespace FundamentalGroupoid

variable {X}

def objEquiv : FundamentalGroupoid X ‚âÉ X _[0] where
  toFun x := x.pt
  invFun x := { pt := x}
  left_inv _ := rfl
  right_inv _ := rfl

def Hom (x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X) :=
  Subcomplex.RelativeMorphism.HomotopyClass.{u} _ _
    (subcomplexBoundary‚ÇÅ.desc x‚ÇÄ.pt x‚ÇÅ.pt ‚â´ (Subcomplex.topIso X).inv)

abbrev Path (x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X) :=
  Subcomplex.RelativeMorphism.{u} _ _
    (subcomplexBoundary‚ÇÅ.desc x‚ÇÄ.pt x‚ÇÅ.pt ‚â´ (Subcomplex.topIso X).inv)

@[simps]
def Path.mk {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X} (f : Œî[1] ‚ü∂ X)
    (h‚ÇÄ : standardSimplex.map (SimplexCategory.Œ¥ 1) ‚â´ f = const x‚ÇÄ.pt := by simp)
    (h‚ÇÅ : standardSimplex.map (SimplexCategory.Œ¥ 0) ‚â´ f = const x‚ÇÅ.pt := by simp) :
    Path x‚ÇÄ x‚ÇÅ where
  map := f
  comm := by
    apply subcomplexBoundary‚ÇÅ.hom_ext
    ¬∑ dsimp
      rw [assoc, subcomplexBoundary‚ÇÅ.Œπ‚ÇÄ_desc_assoc, yonedaEquiv_symm_zero, const_comp,
        subcomplexBoundary‚ÇÅ.Œπ‚ÇÄ_Œπ_assoc, h‚ÇÄ, FunctorToTypes.comp,
        Subpresheaf.Œπ_app, Subcomplex.topIso_inv_app_coe]
    ¬∑ dsimp
      rw [assoc, subcomplexBoundary‚ÇÅ.Œπ‚ÇÅ_desc_assoc, yonedaEquiv_symm_zero, const_comp,
        subcomplexBoundary‚ÇÅ.Œπ‚ÇÅ_Œπ_assoc, h‚ÇÅ, FunctorToTypes.comp,
        Subpresheaf.Œπ_app, Subcomplex.topIso_inv_app_coe]

@[reassoc]
lemma Path.comm‚ÇÄ {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X} (p : Path x‚ÇÄ x‚ÇÅ) :
    standardSimplex.map (SimplexCategory.Œ¥ 1) ‚â´ p.map = const x‚ÇÄ.pt := by
  have := subcomplexBoundary‚ÇÅ.Œπ‚ÇÄ ‚â´= p.comm
  rw [assoc, subcomplexBoundary‚ÇÅ.Œπ‚ÇÄ_Œπ_assoc, subcomplexBoundary‚ÇÅ.Œπ‚ÇÄ_desc_assoc,
    yonedaEquiv_symm_zero, const_comp, FunctorToTypes.comp, Subpresheaf.Œπ_app,
    Subcomplex.topIso_inv_app_coe] at this
  exact this

@[reassoc]
lemma Path.comm‚ÇÅ {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X} (p : Path x‚ÇÄ x‚ÇÅ) :
    standardSimplex.map (SimplexCategory.Œ¥ 0) ‚â´ p.map = const x‚ÇÅ.pt := by
  have := subcomplexBoundary‚ÇÅ.Œπ‚ÇÅ ‚â´= p.comm
  rw [assoc, subcomplexBoundary‚ÇÅ.Œπ‚ÇÅ_Œπ_assoc, subcomplexBoundary‚ÇÅ.Œπ‚ÇÅ_desc_assoc,
    yonedaEquiv_symm_zero, const_comp, FunctorToTypes.comp, Subpresheaf.Œπ_app,
    Subcomplex.topIso_inv_app_coe] at this
  exact this

def Path.id (x : FundamentalGroupoid X) : Path x x :=
  Path.mk (const x.pt)

namespace Path

section

variable {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X} (p q : Path x‚ÇÄ x‚ÇÅ)

nonrec abbrev Homotopy := p.Homotopy q

namespace Homotopy

variable {p q} (h : p.Homotopy q)

@[reassoc (attr := simp)]
lemma comm‚ÇÄ : Œπ‚ÇÄ ‚â´ (Œ≤_ _ _).hom ‚â´ h.h = const x‚ÇÄ.pt := by
  sorry

@[reassoc (attr := simp)]
lemma comm‚ÇÅ : Œπ‚ÇÅ ‚â´ (Œ≤_ _ _).hom ‚â´ h.h = const x‚ÇÅ.pt := by
  sorry

end Homotopy

end

variable {x‚ÇÄ x‚ÇÅ x‚ÇÇ : FundamentalGroupoid X}

structure CompStruct (p‚ÇÄ‚ÇÅ : Path x‚ÇÄ x‚ÇÅ) (p‚ÇÅ‚ÇÇ : Path x‚ÇÅ x‚ÇÇ) (p‚ÇÄ‚ÇÇ : Path x‚ÇÄ x‚ÇÇ) where
  map : Œî[2] ‚ü∂ X
  h‚ÇÄ‚ÇÅ : standardSimplex.map (SimplexCategory.Œ¥ 2) ‚â´ map = p‚ÇÄ‚ÇÅ.map
  h‚ÇÅ‚ÇÇ : standardSimplex.map (SimplexCategory.Œ¥ 0) ‚â´ map = p‚ÇÅ‚ÇÇ.map
  h‚ÇÄ‚ÇÇ : standardSimplex.map (SimplexCategory.Œ¥ 1) ‚â´ map = p‚ÇÄ‚ÇÇ.map

namespace CompStruct

attribute [reassoc (attr := simp)] h‚ÇÄ‚ÇÅ h‚ÇÅ‚ÇÇ h‚ÇÄ‚ÇÇ

end CompStruct

lemma exists_compStruct (p‚ÇÄ‚ÇÅ : Path x‚ÇÄ x‚ÇÅ) (p‚ÇÅ‚ÇÇ : Path x‚ÇÅ x‚ÇÇ) :
    ‚àÉ (p‚ÇÄ‚ÇÇ : Path x‚ÇÄ x‚ÇÇ), Nonempty (CompStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ p‚ÇÄ‚ÇÇ) := by
  obtain ‚ü®Œ±, h‚ÇÄ‚ÇÅ, h‚ÇÅ‚ÇÇ‚ü© := subcomplexHorn‚ÇÇ‚ÇÅ.isPushout.exists_desc p‚ÇÄ‚ÇÅ.map p‚ÇÅ‚ÇÇ.map (by
    have h‚ÇÄ := subcomplexBoundary‚ÇÅ.Œπ‚ÇÅ ‚â´= p‚ÇÄ‚ÇÅ.comm
    have h‚ÇÅ := subcomplexBoundary‚ÇÅ.Œπ‚ÇÄ ‚â´= p‚ÇÅ‚ÇÇ.comm
    rw [assoc, subcomplexBoundary‚ÇÅ.Œπ‚ÇÅ_Œπ_assoc,
      subcomplexBoundary‚ÇÅ.Œπ‚ÇÅ_desc_assoc] at h‚ÇÄ
    rw [assoc, subcomplexBoundary‚ÇÅ.Œπ‚ÇÄ_Œπ_assoc,
      subcomplexBoundary‚ÇÅ.Œπ‚ÇÄ_desc_assoc] at h‚ÇÅ
    rw [h‚ÇÄ, h‚ÇÅ])
  obtain ‚ü®Œ≤, hŒ≤‚ü© := anodyneExtensions.exists_lift_of_isFibrant Œ±
    (anodyneExtensions.subcomplexHorn_Œπ_mem 1 1)
  have h‚ÇÄ‚ÇÅ' := subcomplexHorn‚ÇÇ‚ÇÅ.Œπ‚ÇÄ‚ÇÅ ‚â´= hŒ≤
  rw [subcomplexHorn‚ÇÇ‚ÇÅ.Œπ‚ÇÄ‚ÇÅ_Œπ_assoc, h‚ÇÄ‚ÇÅ] at h‚ÇÄ‚ÇÅ'
  have h‚ÇÄ‚ÇÇ' := subcomplexHorn‚ÇÇ‚ÇÅ.Œπ‚ÇÅ‚ÇÇ ‚â´= hŒ≤
  rw [subcomplexHorn‚ÇÇ‚ÇÅ.Œπ‚ÇÅ‚ÇÇ_Œπ_assoc, h‚ÇÅ‚ÇÇ] at h‚ÇÄ‚ÇÇ'
  refine ‚ü®Path.mk (standardSimplex.map (SimplexCategory.Œ¥ 1) ‚â´ Œ≤) ?_ ?_,
    ‚ü®{ map := Œ≤, h‚ÇÄ‚ÇÅ := h‚ÇÄ‚ÇÅ', h‚ÇÅ‚ÇÇ := h‚ÇÄ‚ÇÇ', h‚ÇÄ‚ÇÇ := rfl }‚ü©‚ü©
  ¬∑ have := SimplexCategory.Œ¥_comp_Œ¥_self (n := 0) (i := 1)
    dsimp at this
    rw [‚Üê Functor.map_comp_assoc, this, Functor.map_comp_assoc, h‚ÇÄ‚ÇÅ', p‚ÇÄ‚ÇÅ.comm‚ÇÄ]
  ¬∑ have := SimplexCategory.Œ¥_comp_Œ¥ (n := 0) (i := 0) (j := 0) (by simp)
    dsimp at this
    rw [‚Üê Functor.map_comp_assoc, this, Functor.map_comp_assoc, h‚ÇÄ‚ÇÇ', p‚ÇÅ‚ÇÇ.comm‚ÇÅ]

-- consequence of the closed monoidal structure
instance (Y : SSet) : (tensorLeft Y).IsLeftAdjoint := sorry

noncomputable def compUniqueUpToHomotopy
    {p‚ÇÄ‚ÇÅ p‚ÇÄ‚ÇÅ' : Path x‚ÇÄ x‚ÇÅ} {p‚ÇÅ‚ÇÇ p‚ÇÅ‚ÇÇ' : Path x‚ÇÅ x‚ÇÇ} {p‚ÇÄ‚ÇÇ p‚ÇÄ‚ÇÇ' : Path x‚ÇÄ x‚ÇÇ}
    (s : CompStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ p‚ÇÄ‚ÇÇ) (s' : CompStruct p‚ÇÄ‚ÇÅ' p‚ÇÅ‚ÇÇ' p‚ÇÄ‚ÇÇ')
    (h‚ÇÄ‚ÇÅ : p‚ÇÄ‚ÇÅ.Homotopy p‚ÇÄ‚ÇÅ') (h‚ÇÅ‚ÇÇ : p‚ÇÅ‚ÇÇ.Homotopy p‚ÇÅ‚ÇÇ') :
    p‚ÇÄ‚ÇÇ.Homotopy p‚ÇÄ‚ÇÇ' := by
  apply Nonempty.some
  obtain ‚ü®Œ±, hŒ±‚ÇÅ, hŒ±‚ÇÇ‚ü© := (subcomplexHorn‚ÇÇ‚ÇÅ.isPushout.{u}.map (tensorLeft Œî[1])).exists_desc
    (h‚ÇÄ‚ÇÅ.h) (h‚ÇÅ‚ÇÇ.h) (by
      dsimp
      rw [‚Üê cancel_epi (standardSimplex.rightUnitor Œî[1]).inv,
        standardSimplex.rightUnitor_inv_map_Œ¥_zero_assoc,
        standardSimplex.rightUnitor_inv_map_Œ¥_one_assoc,
        h‚ÇÄ‚ÇÅ.comm‚ÇÅ, h‚ÇÅ‚ÇÇ.comm‚ÇÄ])
  obtain ‚ü®Œ≤, hŒ≤‚ÇÅ, hŒ≤‚ÇÇ‚ü© :=
    BinaryCofan.IsColimit.desc' (subcomplexBoundary‚ÇÅ.isColimitRightTensor.{u} Œî[2])
      (snd _ _ ‚â´ s.map) (snd _ _ ‚â´ s'.map)
  dsimp at Œ± hŒ±‚ÇÅ hŒ±‚ÇÇ Œ≤ hŒ≤‚ÇÅ hŒ≤‚ÇÇ
  obtain ‚ü®Œ≥, hŒ≥‚ÇÅ, hŒ≥‚ÇÇ‚ü© := (Subcomplex.unionProd.isPushout _ _).exists_desc Œ± Œ≤ (by
    apply BinaryCofan.IsColimit.hom_ext (subcomplexBoundary‚ÇÅ.isColimitRightTensor _)
    ¬∑ dsimp
      rw [‚Üê comp_whiskerRight_assoc, subcomplexBoundary‚ÇÅ.Œπ‚ÇÄ_Œπ,
        ‚Üê cancel_epi (standardSimplex.leftUnitor _).inv]
      apply subcomplexHorn‚ÇÇ‚ÇÅ.isPushout.hom_ext
      ¬∑ have := (standardSimplex.map (SimplexCategory.Œ¥ 1)) ‚ñ∑ _ ‚â´= hŒ±‚ÇÅ
        rw [‚Üê cancel_epi (standardSimplex.leftUnitor _).inv,
          ‚Üê whisker_exchange_assoc,
          standardSimplex.leftUnitor_inv_naturality_assoc,
          standardSimplex.leftUnitor_inv_map_Œ¥_one_assoc,
          standardSimplex.leftUnitor_inv_map_Œ¥_one_assoc, h‚ÇÄ‚ÇÅ.h‚ÇÄ] at this
        rw [standardSimplex.leftUnitor_inv_map_Œ¥_one_assoc, this,
          ‚Üê whisker_exchange_assoc, standardSimplex.leftUnitor_inv_naturality_assoc,
          subcomplexHorn‚ÇÇ‚ÇÅ.Œπ‚ÇÄ‚ÇÅ_Œπ_assoc, hŒ≤‚ÇÅ, standardSimplex.leftUnitor_inv_snd_assoc,
          CompStruct.h‚ÇÄ‚ÇÅ]
      ¬∑ have := (standardSimplex.map (SimplexCategory.Œ¥ 1)) ‚ñ∑ _ ‚â´= hŒ±‚ÇÇ
        rw [‚Üê cancel_epi (standardSimplex.leftUnitor _).inv,
          ‚Üê whisker_exchange_assoc,
          standardSimplex.leftUnitor_inv_naturality_assoc,
          standardSimplex.leftUnitor_inv_map_Œ¥_one_assoc,
          standardSimplex.leftUnitor_inv_map_Œ¥_one_assoc, h‚ÇÅ‚ÇÇ.h‚ÇÄ] at this
        rw [standardSimplex.leftUnitor_inv_map_Œ¥_one_assoc, this,
          ‚Üê whisker_exchange_assoc, standardSimplex.leftUnitor_inv_naturality_assoc,
          subcomplexHorn‚ÇÇ‚ÇÅ.Œπ‚ÇÅ‚ÇÇ_Œπ_assoc, hŒ≤‚ÇÅ, standardSimplex.leftUnitor_inv_snd_assoc,
          CompStruct.h‚ÇÅ‚ÇÇ]
    ¬∑ dsimp
      rw [‚Üê comp_whiskerRight_assoc, subcomplexBoundary‚ÇÅ.Œπ‚ÇÅ_Œπ,
        ‚Üê cancel_epi (standardSimplex.leftUnitor _).inv]
      apply subcomplexHorn‚ÇÇ‚ÇÅ.isPushout.hom_ext
      ¬∑ have := (standardSimplex.map (SimplexCategory.Œ¥ 0)) ‚ñ∑ _ ‚â´= hŒ±‚ÇÅ
        rw [‚Üê cancel_epi (standardSimplex.leftUnitor _).inv,
          ‚Üê whisker_exchange_assoc,
          standardSimplex.leftUnitor_inv_naturality_assoc,
          standardSimplex.leftUnitor_inv_map_Œ¥_zero_assoc,
          standardSimplex.leftUnitor_inv_map_Œ¥_zero_assoc, h‚ÇÄ‚ÇÅ.h‚ÇÅ] at this
        rw [standardSimplex.leftUnitor_inv_map_Œ¥_zero_assoc, this,
          ‚Üê whisker_exchange_assoc, standardSimplex.leftUnitor_inv_naturality_assoc,
          subcomplexHorn‚ÇÇ‚ÇÅ.Œπ‚ÇÄ‚ÇÅ_Œπ_assoc, hŒ≤‚ÇÇ, standardSimplex.leftUnitor_inv_snd_assoc,
          CompStruct.h‚ÇÄ‚ÇÅ]
      ¬∑ have := (standardSimplex.map (SimplexCategory.Œ¥ 0)) ‚ñ∑ _ ‚â´= hŒ±‚ÇÇ
        rw [‚Üê cancel_epi (standardSimplex.leftUnitor _).inv,
          ‚Üê whisker_exchange_assoc,
          standardSimplex.leftUnitor_inv_naturality_assoc,
          standardSimplex.leftUnitor_inv_map_Œ¥_zero_assoc,
          standardSimplex.leftUnitor_inv_map_Œ¥_zero_assoc, h‚ÇÅ‚ÇÇ.h‚ÇÅ] at this
        rw [standardSimplex.leftUnitor_inv_map_Œ¥_zero_assoc, this,
          ‚Üê whisker_exchange_assoc, standardSimplex.leftUnitor_inv_naturality_assoc,
          subcomplexHorn‚ÇÇ‚ÇÅ.Œπ‚ÇÅ‚ÇÇ_Œπ_assoc, hŒ≤‚ÇÇ, standardSimplex.leftUnitor_inv_snd_assoc,
          CompStruct.h‚ÇÅ‚ÇÇ])
  obtain ‚ü®h, fac‚ü© := anodyneExtensions.exists_lift_of_isFibrant Œ≥
    (anodyneExtensions.subcomplex_unionProd_mem_of_right.{u} (subcomplexBoundary 1)
    (subcomplexHorn 2 1) (anodyneExtensions.subcomplexHorn_Œπ_mem 1 1))
  exact ‚ü®{
    h := _ ‚óÅ standardSimplex.map (SimplexCategory.Œ¥ 1) ‚â´ h
    h‚ÇÄ := by
      have := (standardSimplex.leftUnitor _).inv ‚â´= hŒ≤‚ÇÅ
      rw [standardSimplex.leftUnitor_inv_snd_assoc] at this
      rw [‚Üê s.h‚ÇÄ‚ÇÇ, ‚Üê this, ‚Üê hŒ≥‚ÇÇ, ‚Üê fac]
      rfl
    h‚ÇÅ := by
      have := (standardSimplex.leftUnitor _).inv ‚â´= hŒ≤‚ÇÇ
      rw [standardSimplex.leftUnitor_inv_snd_assoc] at this
      rw [‚Üê s'.h‚ÇÄ‚ÇÇ, ‚Üê this, ‚Üê hŒ≥‚ÇÇ, ‚Üê fac]
      rfl
    rel := by
      apply BinaryCofan.IsColimit.hom_ext (subcomplexBoundary‚ÇÅ.isColimitLeftTensor _)
      ¬∑ have h‚ÇÄ := (Œî[1] ‚óÅ subcomplexBoundary‚ÇÅ.Œπ‚ÇÄ ‚â´ Œî[1] ‚óÅ Subpresheaf.Œπ (subcomplexBoundary 1) ‚â´
          Œî[1] ‚óÅ subcomplexHorn‚ÇÇ‚ÇÅ.Œπ‚ÇÄ‚ÇÅ ‚â´ Subcomplex.unionProd.Œπ‚ÇÅ _ _) ‚â´= fac
        rw [assoc, assoc, assoc, assoc, assoc, assoc, Subcomplex.unionProd.Œπ‚ÇÅ_Œπ_assoc,
          hŒ≥‚ÇÅ, hŒ±‚ÇÅ, h‚ÇÄ‚ÇÅ.rel, assoc, whiskerLeft_snd_assoc,
          subcomplexBoundary‚ÇÅ.Œπ‚ÇÄ_desc_assoc, yonedaEquiv_symm_zero, const_comp, comp_const,
          FunctorToTypes.comp, Subpresheaf.Œπ_app, Subcomplex.topIso_inv_app_coe] at h‚ÇÄ
        dsimp
        rw [assoc, whiskerLeft_snd_assoc, subcomplexBoundary‚ÇÅ.Œπ‚ÇÄ_desc_assoc,
          yonedaEquiv_symm_zero, const_comp, comp_const,
          FunctorToTypes.comp, Subpresheaf.Œπ_app, Subcomplex.topIso_inv_app_coe,
          ‚Üê MonoidalCategory.whiskerLeft_comp_assoc,
          ‚Üê MonoidalCategory.whiskerLeft_comp_assoc,
          subcomplexBoundary‚ÇÅ.Œπ‚ÇÄ_Œπ, ‚Üê h‚ÇÄ,
          ‚Üê MonoidalCategory.whiskerLeft_comp_assoc,
          ‚Üê MonoidalCategory.whiskerLeft_comp_assoc, assoc,
          ‚Üê MonoidalCategory.whiskerLeft_comp_assoc, assoc, assoc,
          subcomplexHorn‚ÇÇ‚ÇÅ.Œπ‚ÇÄ‚ÇÅ_Œπ, subcomplexBoundary‚ÇÅ.Œπ‚ÇÄ_Œπ_assoc,
          ‚Üê Functor.map_comp, ‚Üê Functor.map_comp]
        congr 3
        apply SimplexCategory.Œ¥_comp_Œ¥_self
      ¬∑ have h‚ÇÇ := (Œî[1] ‚óÅ subcomplexBoundary‚ÇÅ.Œπ‚ÇÅ ‚â´ Œî[1] ‚óÅ Subpresheaf.Œπ (subcomplexBoundary 1) ‚â´
          Œî[1] ‚óÅ subcomplexHorn‚ÇÇ‚ÇÅ.Œπ‚ÇÅ‚ÇÇ ‚â´ Subcomplex.unionProd.Œπ‚ÇÅ _ _) ‚â´= fac
        rw [assoc, assoc, assoc, assoc, assoc, assoc, Subcomplex.unionProd.Œπ‚ÇÅ_Œπ_assoc,
          hŒ≥‚ÇÅ, hŒ±‚ÇÇ, h‚ÇÅ‚ÇÇ.rel, assoc, whiskerLeft_snd_assoc,
          subcomplexBoundary‚ÇÅ.Œπ‚ÇÅ_desc_assoc, yonedaEquiv_symm_zero, const_comp, comp_const,
          FunctorToTypes.comp, Subpresheaf.Œπ_app, Subcomplex.topIso_inv_app_coe] at h‚ÇÇ
        dsimp
        rw [assoc, whiskerLeft_snd_assoc, subcomplexBoundary‚ÇÅ.Œπ‚ÇÅ_desc_assoc,
          yonedaEquiv_symm_zero, const_comp, comp_const,
          FunctorToTypes.comp, Subpresheaf.Œπ_app, Subcomplex.topIso_inv_app_coe,
          ‚Üê MonoidalCategory.whiskerLeft_comp_assoc,
          ‚Üê MonoidalCategory.whiskerLeft_comp_assoc,
          subcomplexBoundary‚ÇÅ.Œπ‚ÇÅ_Œπ, ‚Üê h‚ÇÇ,
          ‚Üê MonoidalCategory.whiskerLeft_comp_assoc,
          ‚Üê MonoidalCategory.whiskerLeft_comp_assoc, assoc,
          ‚Üê MonoidalCategory.whiskerLeft_comp_assoc, assoc, assoc,
          subcomplexHorn‚ÇÇ‚ÇÅ.Œπ‚ÇÅ‚ÇÇ_Œπ, subcomplexBoundary‚ÇÅ.Œπ‚ÇÅ_Œπ_assoc,
          ‚Üê Functor.map_comp, ‚Üê Functor.map_comp]
        congr 3 }‚ü©

noncomputable def comp (p‚ÇÄ‚ÇÅ : Path x‚ÇÄ x‚ÇÅ) (p‚ÇÅ‚ÇÇ : Path x‚ÇÅ x‚ÇÇ) :
    Path x‚ÇÄ x‚ÇÇ :=
  (exists_compStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ).choose

noncomputable def compStruct (p‚ÇÄ‚ÇÅ : Path x‚ÇÄ x‚ÇÅ) (p‚ÇÅ‚ÇÇ : Path x‚ÇÅ x‚ÇÇ) :
    CompStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ (p‚ÇÄ‚ÇÅ.comp p‚ÇÅ‚ÇÇ) :=
  (exists_compStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ).choose_spec.some

end Path

def Hom.id (x : FundamentalGroupoid X) : Hom x x :=
  (Path.id x).homotopyClass

noncomputable def Hom.comp {x‚ÇÄ x‚ÇÅ x‚ÇÇ : FundamentalGroupoid X} (f : Hom x‚ÇÄ x‚ÇÅ) (g : Hom x‚ÇÅ x‚ÇÇ) :
    Hom x‚ÇÄ x‚ÇÇ := by
  refine Quot.lift‚ÇÇ (fun p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ ‚Ü¶ (Path.comp p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ).homotopyClass) ?_ ?_ f g
  ¬∑ rintro p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ p‚ÇÅ‚ÇÇ' ‚ü®h‚ü©
    exact (Path.compUniqueUpToHomotopy (p‚ÇÄ‚ÇÅ.compStruct p‚ÇÅ‚ÇÇ)
      (p‚ÇÄ‚ÇÅ.compStruct p‚ÇÅ‚ÇÇ') (.refl _) h).eq
  ¬∑ rintro p‚ÇÄ‚ÇÅ p‚ÇÄ‚ÇÅ' p‚ÇÅ‚ÇÇ ‚ü®h‚ü©
    exact (Path.compUniqueUpToHomotopy (p‚ÇÄ‚ÇÅ.compStruct p‚ÇÅ‚ÇÇ)
      (p‚ÇÄ‚ÇÅ'.compStruct p‚ÇÅ‚ÇÇ) h (.refl _)).eq

noncomputable instance : CategoryStruct (FundamentalGroupoid X) where
  Hom := Hom
  id := Hom.id
  comp := Hom.comp

def homMk {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X} (p : Path x‚ÇÄ x‚ÇÅ) :
    x‚ÇÄ ‚ü∂ x‚ÇÅ :=
  p.homotopyClass

@[simp]
lemma homMk_refl (x : FundamentalGroupoid X) :
    homMk (Path.id x) = ùüô x := rfl

lemma homMk_eq_of_homotopy {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X}
    {p q : Path x‚ÇÄ x‚ÇÅ} (h : p.Homotopy q) :
    homMk p = homMk q :=
  h.eq

variable {x‚ÇÄ x‚ÇÅ x‚ÇÇ : FundamentalGroupoid X}

lemma Path.CompStruct.fac {x‚ÇÄ x‚ÇÅ x‚ÇÇ : FundamentalGroupoid X}
    {p‚ÇÄ‚ÇÅ : Path x‚ÇÄ x‚ÇÅ} {p‚ÇÅ‚ÇÇ : Path x‚ÇÅ x‚ÇÇ} {p‚ÇÄ‚ÇÇ : Path x‚ÇÄ x‚ÇÇ}
    (h : CompStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ p‚ÇÄ‚ÇÇ) : homMk p‚ÇÄ‚ÇÅ ‚â´ homMk p‚ÇÅ‚ÇÇ = homMk p‚ÇÄ‚ÇÇ :=
  homMk_eq_of_homotopy (compUniqueUpToHomotopy (Path.compStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ)
    h (.refl _) (.refl _))

end FundamentalGroupoid

end KanComplex

end SSet
