import TopCatModelCategory.SSet.KanComplexW
import TopCatModelCategory.SSet.Homotopy

universe u

open CategoryTheory HomotopicalAlgebra Simplicial SSet.modelCategoryQuillen
  ChosenFiniteProducts MonoidalCategory

namespace SSet

variable {X Y : SSet.{u}}


variable (X Y) in
structure HomotopyEquiv where
  hom : X ‚ü∂ Y
  inv : Y ‚ü∂ X
  homInvId : Homotopy (hom ‚â´ inv) (ùüô X)
  invHomId : Homotopy (inv ‚â´ hom) (ùüô Y)

variable (X) in
@[simps hom inv]
noncomputable def HomotopyEquiv.refl : HomotopyEquiv X X where
  hom := ùüô _
  inv := ùüô _
  homInvId := Subcomplex.RelativeMorphism.Homotopy.ofEq (by simp)
  invHomId := Subcomplex.RelativeMorphism.Homotopy.ofEq (by simp)

@[simps]
def HomotopyEquiv.symm (e : HomotopyEquiv X Y) : HomotopyEquiv Y X where
  hom := e.inv
  inv := e.hom
  homInvId := e.invHomId
  invHomId := e.homInvId

namespace KanComplex

variable [IsFibrant Y]
  {f‚ÇÄ f‚ÇÅ : X ‚ü∂ Y} (h : Homotopy f‚ÇÄ f‚ÇÅ) (n : ‚Ñï)
  (x : X _‚¶ã0‚¶å) {y‚ÇÄ y‚ÇÅ : Y _‚¶ã0‚¶å} (hy‚ÇÄ : f‚ÇÄ.app _ x = y‚ÇÄ) (hy‚ÇÅ : f‚ÇÅ.app _ x = y‚ÇÅ)

@[simps! map]
noncomputable def edgeOfHomotopy : FundamentalGroupoid.Edge { pt := y‚ÇÄ } { pt := y‚ÇÅ } :=
  FundamentalGroupoid.Edge.mk (lift (const x) (ùüô _) ‚â´ h.h) (by
    convert yonedaEquiv.symm x ‚â´= h.h‚ÇÄ using 1
    ¬∑ rw [‚Üê Œπ‚ÇÄ_comp_assoc, Œπ‚ÇÄ_stdSimplex_zero]
      rfl
    ¬∑ simp [‚Üê hy‚ÇÄ]) (by
    convert yonedaEquiv.symm x ‚â´= h.h‚ÇÅ using 1
    ¬∑ rw [‚Üê Œπ‚ÇÅ_comp_assoc, Œπ‚ÇÅ_stdSimplex_zero]
      rfl
    ¬∑ simp [‚Üê hy‚ÇÅ])

lemma congr_mapœÄ_of_homotopy :
    (FundamentalGroupoid.action.map (FundamentalGroupoid.homMk
      (edgeOfHomotopy h x hy‚ÇÄ hy‚ÇÅ))).comp (mapœÄ f‚ÇÄ n x y‚ÇÄ hy‚ÇÄ) = mapœÄ f‚ÇÅ n x y‚ÇÅ hy‚ÇÅ := by
  ext s
  obtain ‚ü®s, rfl‚ü© := s.mk_surjective
  simp only [mapœÄ_mk, Function.comp_apply]
  exact FundamentalGroupoid.action.map_eq
    { map := s.map ‚ñ∑ _ ‚â´ h.h
      whiskerRight_Œπ_comp_map := by
        simp only [edgeOfHomotopy_map, ‚Üê comp_whiskerRight_assoc, s.comm,
          Subcomplex.ofSimplex_Œπ, comp_const]
        rfl }

include h in
lemma bijective_mapœÄ_iff_of_homotopy [IsFibrant X] :
    Function.Bijective (mapœÄ f‚ÇÄ n x y‚ÇÄ hy‚ÇÄ) ‚Üî
      Function.Bijective (mapœÄ f‚ÇÅ n x y‚ÇÅ hy‚ÇÅ) := by
  rw [‚Üê congr_mapœÄ_of_homotopy h n x hy‚ÇÄ hy‚ÇÅ]
  symm
  apply Function.Bijective.of_comp_iff'
  apply FundamentalGroupoid.action.bijective_map

variable [IsFibrant X]

lemma isEquivalence_mapFundamentalGroupoid_homotopyEquivHom (e : HomotopyEquiv X Y) :
    (mapFundamentalGroupoid e.hom).IsEquivalence := sorry

lemma isEquivalence_mapFundamentalGroupoid_homotopyEquivInv (e : HomotopyEquiv X Y) :
    (mapFundamentalGroupoid e.inv).IsEquivalence :=
  isEquivalence_mapFundamentalGroupoid_homotopyEquivHom e.symm

lemma W.homotopyEquiv_hom (e : HomotopyEquiv X Y) :
    W e.hom := by
  have := isEquivalence_mapFundamentalGroupoid_homotopyEquivHom e
  refine W.mk _ inferInstance (fun n x y h ‚Ü¶ ?_)
  subst h
  wlog hx : ‚àÉ y, e.inv.app _ y = x generalizing x
  ¬∑ exact W.bijective_of_iso (asIso (FundamentalGroupoid.homMk
      (edgeOfHomotopy e.homInvId x rfl rfl))) (this _ ‚ü®e.hom.app _ x, rfl‚ü©)
  constructor
  ¬∑ have := (bijective_mapœÄ_iff_of_homotopy e.homInvId n x (y‚ÇÅ := x) rfl rfl).2
      (by convert Function.bijective_id; aesop)
    rw [‚Üê mapœÄ_comp_mapœÄ _ _ _ _ rfl _ _ (by aesop)] at this
    exact this.1.of_comp
  ¬∑ obtain ‚ü®y, hy‚ü© := hx
    have := (bijective_mapœÄ_iff_of_homotopy e.invHomId n y (y‚ÇÅ := y) rfl rfl).2
      (by convert Function.bijective_id; aesop)
    subst hy
    rw [‚Üê mapœÄ_comp_mapœÄ _ _ _ _ rfl _ _ (by aesop)] at this
    exact this.2.of_comp

lemma W.homotopyEquiv_inv (e : HomotopyEquiv X Y) :
    W e.inv := W.homotopyEquiv_hom e.symm

end KanComplex

end SSet
