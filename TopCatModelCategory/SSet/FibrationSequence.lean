import TopCatModelCategory.SSet.HomotopySequenceAction
import TopCatModelCategory.SSet.Fibrations
import TopCatModelCategory.SSet.Loop

open CategoryTheory Simplicial HomotopicalAlgebra
  SSet.modelCategoryQuillen Limits Opposite

lemma Group.injective_iff_of_map_mul {Œ± Œ≤ : Type*} [Group Œ±] [Group Œ≤]
    (f : Œ± ‚Üí Œ≤) (hf : ‚àÄ x y, f (x * y) = f x * f y) :
    Function.Injective f ‚Üî ‚àÄ x, f x = 1 ‚Üí x = 1 := by
  let œÜ : Œ± ‚Üí* Œ≤ := MonoidHom.mk' f hf
  have f_one : f 1 = 1 := œÜ.map_one
  constructor
  ¬∑ intro hf' x hx
    exact hf' (by rw [f_one, hx])
  ¬∑ intro hf' x y hxy
    obtain ‚ü®u, rfl‚ü© : ‚àÉ u, x * u = y := ‚ü®_, mul_inv_cancel_left x y‚ü©
    rw [hf' u (by simpa only [hf, left_eq_mul] using hxy), mul_one]

namespace SSet

structure FibrationSequence where
  F : SSet.{u}
  E : SSet.{u}
  B : SSet.{u}
  i : F ‚ü∂ E
  p : E ‚ü∂ B
  hp : Fibration p := by infer_instance
  f : F _‚¶ã0‚¶å
  e : E _‚¶ã0‚¶å
  b : B _‚¶ã0‚¶å
  hf : i.app _ f = e := by aesop_cat
  he : p.app _ e = b := by aesop_cat
  isPullback : IsPullback i (stdSimplex.objZeroIsTerminal.from F)
      p (yonedaEquiv.symm b)

namespace FibrationSequence

attribute [instance] hp
attribute [simp] hf he

section

@[simps]
def ofFibration {E B : SSet.{u}} (p : E ‚ü∂ B) [Fibration p]
    {e : E _‚¶ã0‚¶å} {b : B _‚¶ã0‚¶å}
    (he : p.app _ e = b) : FibrationSequence where
  p := p
  isPullback := Subcomplex.fiber_isPullback p b
  f := Subcomplex.fiber.basePoint p he
  hf := rfl
  he := he

variable (seq : FibrationSequence.{u})

noncomputable def isoFiber : seq.F ‚âÖ Subcomplex.fiber seq.p seq.b :=
  IsLimit.conePointUniqueUpToIso seq.isPullback.isLimit
    (Subcomplex.fiber_isPullback seq.p seq.b).isLimit

@[reassoc (attr := simp)]
lemma isoFiber_hom_Œπ : seq.isoFiber.hom ‚â´ Subcomplex.Œπ _ = seq.i :=
  IsLimit.conePointUniqueUpToIso_hom_comp seq.isPullback.isLimit
    (Subcomplex.fiber_isPullback seq.p seq.b).isLimit .left

@[simp]
lemma coe_isoFiber_hom_app {n : SimplexCategory·µí·µñ} (x : seq.F.obj n) :
    (seq.isoFiber.hom.app _ x).1 = seq.i.app _ x :=
  congr_fun (congr_app seq.isoFiber_hom_Œπ n) x

@[reassoc (attr := simp)]
lemma isoFiber_inv_i : seq.isoFiber.inv ‚â´ seq.i = Subcomplex.Œπ _ :=
  IsLimit.conePointUniqueUpToIso_inv_comp seq.isPullback.isLimit
    (Subcomplex.fiber_isPullback seq.p seq.b).isLimit .left

@[simp]
lemma isoFiber_hom_app_f :
    seq.isoFiber.hom.app _ seq.f =
      Subcomplex.fiber.basePoint seq.p seq.he := by
  aesop

@[simp]
lemma isoFiber_inv_app_f :
    seq.isoFiber.inv.app _ (Subcomplex.fiber.basePoint seq.p seq.he) =
      seq.f := by
  rw [‚Üê isoFiber_hom_app_f]
  exact congr_fun (seq.isoFiber.hom_inv_id_app _) _

instance : IsFibrant seq.F := isFibrant_of_iso seq.isoFiber.symm

end

@[ext]
structure Hom (seq‚ÇÅ seq‚ÇÇ : FibrationSequence.{u}) where
  mor‚ÇÅ : seq‚ÇÅ.F ‚ü∂ seq‚ÇÇ.F
  mor‚ÇÇ : seq‚ÇÅ.E ‚ü∂ seq‚ÇÇ.E
  mor‚ÇÉ : seq‚ÇÅ.B ‚ü∂ seq‚ÇÇ.B
  comm_i : seq‚ÇÅ.i ‚â´ mor‚ÇÇ = mor‚ÇÅ ‚â´ seq‚ÇÇ.i := by aesop_cat
  comm_p : seq‚ÇÅ.p ‚â´ mor‚ÇÉ = mor‚ÇÇ ‚â´ seq‚ÇÇ.p := by aesop_cat
  mor‚ÇÅ_app_f : mor‚ÇÅ.app _ seq‚ÇÅ.f = seq‚ÇÇ.f := by aesop_cat

attribute [reassoc (attr := simp)] Hom.comm_i Hom.comm_p
attribute [simp] Hom.mor‚ÇÅ_app_f

instance : Category FibrationSequence.{u} where
  Hom := Hom
  id seq :=
    { mor‚ÇÅ := ùüô _
      mor‚ÇÇ := ùüô _
      mor‚ÇÉ := ùüô _ }
  comp f g :=
    { mor‚ÇÅ := f.mor‚ÇÅ ‚â´ g.mor‚ÇÅ
      mor‚ÇÇ := f.mor‚ÇÇ ‚â´ g.mor‚ÇÇ
      mor‚ÇÉ := f.mor‚ÇÉ ‚â´ g.mor‚ÇÉ }

namespace Hom

@[simp]
lemma mor‚ÇÇ_app_e {seq seq' : FibrationSequence}
    (œÜ : seq ‚ü∂ seq') : œÜ.mor‚ÇÇ.app _ seq.e = seq'.e := by
  simp only [‚Üê seq.hf, ‚Üê seq'.hf, ‚Üê œÜ.mor‚ÇÅ_app_f, ‚Üê FunctorToTypes.comp, œÜ.comm_i]

@[simp]
lemma mor‚ÇÉ_app_b {seq seq' : FibrationSequence}
    (œÜ : seq ‚ü∂ seq') : œÜ.mor‚ÇÉ.app _ seq.b = seq'.b := by
  simp only [‚Üê seq.he, ‚Üê seq'.he, ‚Üê mor‚ÇÇ_app_e œÜ, ‚Üê FunctorToTypes.comp, œÜ.comm_p]

end Hom

@[simp] lemma id_mor‚ÇÅ (seq : FibrationSequence) : Hom.mor‚ÇÅ (ùüô seq) = ùüô _ := rfl
@[simp] lemma id_mor‚ÇÇ (seq : FibrationSequence) : Hom.mor‚ÇÇ (ùüô seq) = ùüô _ := rfl
@[simp] lemma id_mor‚ÇÉ (seq : FibrationSequence) : Hom.mor‚ÇÉ (ùüô seq) = ùüô _ := rfl

section

variable {seq‚ÇÅ seq‚ÇÇ seq‚ÇÉ : FibrationSequence.{u}} (f : seq‚ÇÅ ‚ü∂ seq‚ÇÇ) (g : seq‚ÇÇ ‚ü∂ seq‚ÇÉ)

@[reassoc, simp] lemma comp_mor‚ÇÅ : (f ‚â´ g).mor‚ÇÅ = f.mor‚ÇÅ ‚â´ g.mor‚ÇÅ := rfl
@[reassoc, simp] lemma comp_mor‚ÇÇ : (f ‚â´ g).mor‚ÇÇ = f.mor‚ÇÇ ‚â´ g.mor‚ÇÇ := rfl
@[reassoc, simp] lemma comp_mor‚ÇÉ : (f ‚â´ g).mor‚ÇÉ = f.mor‚ÇÉ ‚â´ g.mor‚ÇÉ := rfl

end

section

open KanComplex

variable (seq : FibrationSequence.{u}) [IsFibrant seq.B]

instance : IsFibrant seq.E := by
  rw [isFibrant_iff,
    Subsingleton.elim (terminal.from seq.E) (seq.p ‚â´ terminal.from seq.B)]
  infer_instance

open HomotopySequence

noncomputable def Œ¥ (n : ‚Ñï) : œÄ (n + 1) seq.B seq.b ‚Üí œÄ n seq.F seq.f :=
  (mapœÄ seq.isoFiber.inv n
    (Subcomplex.fiber.basePoint seq.p seq.he) seq.f (by simp)).comp
      (HomotopySequence.Œ¥' seq.p seq.he n 0)

@[simp]
lemma Œ¥_one (n : ‚Ñï) : seq.Œ¥ n 1 = 1 := by
  simp [Œ¥]

@[simp]
lemma Œ¥_mul {n : ‚Ñï} (x‚ÇÅ x‚ÇÇ : œÄ (n + 2) seq.B seq.b) :
    seq.Œ¥ (n + 1) (x‚ÇÅ * x‚ÇÇ) = seq.Œ¥ (n + 1) x‚ÇÅ * seq.Œ¥ (n + 1) x‚ÇÇ := by
  simp [Œ¥, mapœÄ_mul]

lemma eq_mul_of_Œ¥_eq_Œ¥ (g‚ÇÅ g‚ÇÇ : œÄ 1 seq.B seq.b)
    (h : seq.Œ¥ 0 g‚ÇÅ = seq.Œ¥ 0 g‚ÇÇ) :
    ‚àÉ (u : œÄ 1 seq.E seq.e), g‚ÇÇ = mapœÄ seq.p 1 seq.e seq.b seq.he u * g‚ÇÅ :=
  KanComplex.HomotopySequence.eq_mul_of_Œ¥'_eq_Œ¥' seq.p seq.he g‚ÇÅ g‚ÇÇ
    ((mapœÄEquivOfIso seq.isoFiber 0 seq.f (Subcomplex.fiber.basePoint seq.p seq.he)
      (by simp)).symm.injective h)

lemma exact‚ÇÇ {n : ‚Ñï} (x‚ÇÇ : œÄ n seq.E seq.e)
    (hx‚ÇÇ : mapœÄ seq.p n seq.e seq.b seq.he x‚ÇÇ = 1) :
    ‚àÉ (x‚ÇÅ : œÄ n seq.F seq.f), mapœÄ seq.i n seq.f seq.e seq.hf x‚ÇÅ = x‚ÇÇ := by
  obtain ‚ü®y‚ÇÅ, rfl‚ü© := exists_of_map‚ÇÇ_eq_one hx‚ÇÇ
  refine ‚ü®mapœÄ seq.isoFiber.inv n (Subcomplex.fiber.basePoint seq.p seq.he) seq.f (by simp) y‚ÇÅ, ?_‚ü©
  simp only [mapœÄ_mapœÄ, isoFiber_inv_i]
  rfl

lemma exact‚ÇÅ {n : ‚Ñï} (x‚ÇÅ : œÄ n seq.F seq.f)
    (hx‚ÇÅ : mapœÄ seq.i n seq.f seq.e seq.hf x‚ÇÅ = 1) :
    ‚àÉ (x‚ÇÉ : œÄ (n + 1) seq.B seq.b),
      seq.Œ¥ n x‚ÇÉ = x‚ÇÅ := by
  obtain ‚ü®x‚ÇÉ, hx‚ÇÉ‚ü© := exists_of_map‚ÇÅ_eq_one
    (x := mapœÄ seq.isoFiber.hom n seq.f (Subcomplex.fiber.basePoint seq.p seq.he) (by simp) x‚ÇÅ)
      (by simpa only [map‚ÇÅ, mapœÄ_mapœÄ, isoFiber_hom_Œπ]) 0
  refine ‚ü®x‚ÇÉ, ?_‚ü©
  dsimp [Œ¥]
  simp only [hx‚ÇÉ, mapœÄ_mapœÄ, Iso.hom_inv_id, mapœÄ_id]

lemma exact‚ÇÉ {n : ‚Ñï} (x‚ÇÉ : œÄ (n + 1) seq.B seq.b)
    (hx‚ÇÉ : seq.Œ¥ n x‚ÇÉ = 1) :
    ‚àÉ (x‚ÇÇ : œÄ (n + 1) seq.E seq.e),
      mapœÄ seq.p (n + 1) seq.e seq.b seq.he x‚ÇÇ = x‚ÇÉ := by
  apply exists_of_Œ¥'_eq_one (x := x‚ÇÉ) (i := 0)
  apply (mapœÄEquivOfIso seq.isoFiber n seq.f
    (Subcomplex.fiber.basePoint seq.p seq.he) (by simp)).symm.injective
  simpa

end

open KanComplex

variable {seq seq' : FibrationSequence.{u}}
  (œÜ : seq ‚ü∂ seq')

@[reassoc (attr := simp)]
lemma isoFiber_hom_mapFiber :
    seq.isoFiber.hom ‚â´
      Subcomplex.mapFiber seq.p seq'.p œÜ.mor‚ÇÇ œÜ.mor‚ÇÉ (by simp) seq.b seq'.b (by simp) =
    œÜ.mor‚ÇÅ ‚â´ seq'.isoFiber.hom := by
  aesop

@[reassoc (attr := simp)]
lemma mapFiber_isoFiber_inv :
    Subcomplex.mapFiber seq.p seq'.p œÜ.mor‚ÇÇ œÜ.mor‚ÇÉ (by simp) seq.b seq'.b (by simp) ‚â´
      seq'.isoFiber.inv = seq.isoFiber.inv ‚â´ œÜ.mor‚ÇÅ := by
  rw [‚Üê cancel_mono (seq'.isoFiber.hom), Category.assoc, Category.assoc,
    Iso.inv_hom_id, Category.comp_id, ‚Üê isoFiber_hom_mapFiber,
    Iso.inv_hom_id_assoc]

variable [IsFibrant seq.B] [IsFibrant seq'.B]
noncomputable def Œ¥_naturality_apply {n : ‚Ñï} (x : œÄ (n + 1) seq.B seq.b) :
    seq'.Œ¥ n (mapœÄ œÜ.mor‚ÇÉ (n + 1) seq.b seq'.b (by simp) x) =
    mapœÄ œÜ.mor‚ÇÅ n seq.f seq'.f (by simp) (seq.Œ¥ n x) := by
  simp [Œ¥, HomotopySequence.Œ¥'_naturality seq.he seq'.he n 0 x _ _ œÜ.comm_p.symm (by simp),
    mapœÄ_mapœÄ]

noncomputable def Œ¥_naturality (n : ‚Ñï) :
    (seq'.Œ¥ n).comp (mapœÄ œÜ.mor‚ÇÉ (n + 1) seq.b seq'.b (by simp)) =
      (mapœÄ œÜ.mor‚ÇÅ n seq.f seq'.f (by simp)).comp (seq.Œ¥ n) := by
  ext x
  apply Œ¥_naturality_apply


@[simps]
protected def fiber {E B : SSet.{u}} (p : E ‚ü∂ B) [Fibration p]
    (e : E _‚¶ã0‚¶å) (b : B _‚¶ã0‚¶å)
    (he : p.app _ e = b) : FibrationSequence where
  f := Subcomplex.fiber.basePoint p he
  e := e
  isPullback := Subcomplex.fiber_isPullback p b

section

variable (X : SSet) [IsFibrant X] (x : X _‚¶ã0‚¶å)

@[simps]
noncomputable def loop : FibrationSequence where
  F := X.loop x
  E := X.path‚ÇÄ x
  B := X
  f := X.loopBasePoint x
  e := X.path‚ÇÄBasePoint x
  b := x
  i := X.loopŒπ x
  p := X.path‚ÇÄœÄ x
  isPullback := X.isPullback_loop  x

instance : IsFibrant ((loop X x).F) := by dsimp; infer_instance
instance : IsFibrant ((loop X x).E) := by dsimp; infer_instance
instance : IsFibrant ((loop X x).B) := by dsimp; infer_instance

end

lemma surjective_Œ¥ (n : ‚Ñï) [IsContractible seq.E] :
    Function.Surjective (seq.Œ¥ n) :=
  fun f ‚Ü¶ seq.exact‚ÇÅ f (Subsingleton.elim _ _)

lemma injective_Œ¥_succ (n : ‚Ñï) [IsContractible seq.E] :
    Function.Injective (seq.Œ¥ (n + 1)) := by
  rw [Group.injective_iff_of_map_mul _ (by simp)]
  intro b hb
  obtain ‚ü®e, rfl‚ü© := seq.exact‚ÇÉ b hb
  obtain rfl := Subsingleton.elim e 1
  simp only [mapœÄ_one]

lemma injective_Œ¥_zero [IsContractible seq.E] :
    Function.Injective (seq.Œ¥ 0) := by
  intro g‚ÇÅ g‚ÇÇ h
  obtain ‚ü®u, rfl‚ü© := seq.eq_mul_of_Œ¥_eq_Œ¥ _ _ h
  obtain rfl := Subsingleton.elim u 1
  simp

lemma bijective_Œ¥ (n : ‚Ñï) [IsContractible seq.E] :
    Function.Bijective (seq.Œ¥ n) := by
  constructor
  ¬∑ obtain _ | n := n
    ¬∑ exact seq.injective_Œ¥_zero
    ¬∑ exact seq.injective_Œ¥_succ n
  ¬∑ exact seq.surjective_Œ¥ n

lemma bijective_mapœÄ_succ_p (n : ‚Ñï)
    [Subsingleton (œÄ n seq.F seq.f)] [Subsingleton (œÄ (n + 1) seq.F seq.f)] :
    Function.Bijective (mapœÄ seq.p (n + 1) seq.e seq.b seq.he) := by
  constructor
  ¬∑ rw [Group.injective_iff_of_map_mul _ (by simp [mapœÄ_mul])]
    intro x hx
    obtain ‚ü®y, rfl‚ü© := seq.exact‚ÇÇ x hx
    obtain rfl := Subsingleton.elim y 1
    simp
  ¬∑ intro x
    exact seq.exact‚ÇÉ x (Subsingleton.elim _ _)

end FibrationSequence

end SSet
