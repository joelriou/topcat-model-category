import TopCatModelCategory.SSet.MinimalFibrations
import TopCatModelCategory.SSet.FiberwiseHomotopy

universe u

open CategoryTheory MonoidalCategory Simplicial HomotopicalAlgebra
  SSet.modelCategoryQuillen ChosenFiniteProducts Limits MonoidalClosed

namespace SSet

namespace MinimalFibration

variable {E B : SSet.{u}} (p : E ‚ü∂ B) [MinimalFibration p]

lemma congr_Œπ‚ÇÅ_comp {n : ‚Ñï} (h‚ÇÅ h‚ÇÇ : Œî[n] ‚äó Œî[1] ‚ü∂ E) (b : B _‚¶ãn‚¶å)
    (h‚ÇÅb : h‚ÇÅ ‚â´ p = fst _ _ ‚â´ yonedaEquiv.symm b)
    (h‚ÇÇb : h‚ÇÇ ‚â´ p = fst _ _ ‚â´ yonedaEquiv.symm b)
    (hŒπ : ‚àÇŒî[n].Œπ ‚ñ∑ _ ‚â´ h‚ÇÅ = ‚àÇŒî[n].Œπ ‚ñ∑ _ ‚â´ h‚ÇÇ)
    (eq : Œπ‚ÇÄ ‚â´ h‚ÇÅ = Œπ‚ÇÄ ‚â´ h‚ÇÇ) :
    Œπ‚ÇÅ ‚â´ h‚ÇÅ = Œπ‚ÇÅ ‚â´ h‚ÇÇ := by
  obtain ‚ü®œÜ, Œ±, eq‚ÇÅ, eq‚ÇÇ, eq‚ÇÉ‚ü© := exists_path_composition‚ÇÄ_above_of_fibration' (ihomToPullback ‚àÇŒî[n].Œπ p)
    (curry h‚ÇÅ) (curry h‚ÇÇ) (by
      apply uncurry_injective
      simp only [‚Üê cancel_epi (stdSimplex.rightUnitor _).inv, uncurry_natural_left,
        stdSimplex.rightUnitor_inv_map_Œ¥_one_assoc, uncurry_curry, eq]) (by
      ext : 1
      ¬∑ simp [curry_pre_app, hŒπ]
      ¬∑ simp only [Category.assoc, limit.lift_œÄ, PullbackCone.mk_pt, PullbackCone.mk_œÄ_app,
          ‚Üê curry_natural_right, h‚ÇÅb, h‚ÇÇb])
  obtain ‚ü®Œ¥, œÄ, sq, rfl‚ü© := ihomToPullbackTgt‚ÇÄMk_surjective Œ±
  have str : SimplexOverRelStruct p (yonedaEquiv (Œπ‚ÇÅ ‚â´ h‚ÇÅ)) (yonedaEquiv (Œπ‚ÇÅ ‚â´ h‚ÇÇ)) :=
    { h := uncurry œÜ
      h‚ÇÄ := by
        rw [Equiv.symm_apply_apply,
          ‚Üê stdSimplex.rightUnitor_inv_map_Œ¥_zero_assoc,
          ‚Üê stdSimplex.rightUnitor_inv_map_Œ¥_one_assoc,
          Iso.cancel_iso_inv_left, ‚Üê uncurry_natural_left, eq‚ÇÅ,
          uncurry_natural_left, uncurry_curry]
      h‚ÇÅ := by
        rw [Equiv.symm_apply_apply,
          ‚Üê stdSimplex.rightUnitor_inv_map_Œ¥_zero_assoc,
          ‚Üê stdSimplex.rightUnitor_inv_map_Œ¥_zero_assoc,
          Iso.cancel_iso_inv_left, ‚Üê uncurry_natural_left, eq‚ÇÇ,
          uncurry_natural_left, uncurry_curry]
      œÄ := œÄ
      d := Œ¥
      hœÄ := by
        have := eq‚ÇÉ =‚â´ pullback.snd _ _
        simp only [Category.assoc, limit.lift_œÄ, PullbackCone.mk_pt, PullbackCone.mk_œÄ_app,
          const_comp, pullback_snd_app_ihomToPullbackTgt‚ÇÄMk] at this
        rw [‚Üê uncurry_natural_right, this]
        rfl
      hd := by
        have := eq‚ÇÉ =‚â´ pullback.fst _ _
        simp only [Category.assoc, limit.lift_œÄ, PullbackCone.mk_pt, PullbackCone.mk_œÄ_app,
          const_comp, pullback_fst_app_ihomToPullbackTgt‚ÇÄMk] at this
        rw [‚Üê uncurry_pre_app, this]
        rfl
      }
  exact yonedaEquiv.injective str.eq

end MinimalFibration

namespace FiberwiseHomotopy

variable {E B : SSet.{u}} {p : E ‚ü∂ B} [MinimalFibration p]
  {u : E ‚ü∂ E} (hu : FiberwiseHomotopy p p u (ùüô _))

include hu

lemma injective_app_of_minimalFibration (n : SimplexCategory·µí·µñ) :
    Function.Injective (u.app n) := by
  have : MinimalFibration p := inferInstance
  have := hu
  obtain ‚ü®n‚ü© := n
  induction' n using SimplexCategory.rec with n
  induction' n using Nat.strong_induction_on with n hn
  intro s‚ÇÅ s‚ÇÇ hs
  obtain ‚ü®t, ht‚ÇÅ, ht‚ÇÇ‚ü© : ‚àÉ (t : B _‚¶ãn‚¶å), p.app _ s‚ÇÅ = t ‚àß p.app _ s‚ÇÇ = t := ‚ü®_, rfl, by
    convert congr_arg (p.app _ ) hs.symm using 1
    all_goals
    ¬∑ conv_lhs => rw [‚Üê hu.fac‚ÇÄ]; dsimp‚ü©
  simpa using MinimalFibration.congr_Œπ‚ÇÅ_comp p (yonedaEquiv.symm s‚ÇÅ ‚ñ∑ _ ‚â´ hu.h)
    (yonedaEquiv.symm s‚ÇÇ ‚ñ∑ _ ‚â´ hu.h) t (by simp [ht‚ÇÅ]) (by simp [ht‚ÇÇ]) (by
      simp only [‚Üê comp_whiskerRight_assoc]
      congr 2
      obtain _ | n := n
      ¬∑ ext
      ¬∑ refine boundary.hom_ext (fun j ‚Ü¶ ?_)
        simp only [boundary.Œπ_Œπ_assoc, stdSimplex.Œ¥_comp_yonedaEquiv_symm]
        congr 1
        exact hn _ (by simp) (by simp only [SSet.Œ¥_naturality_apply, hs])) (by simpa)

lemma surjective_app_of_minimalFibration (n : SimplexCategory·µí·µñ) :
    Function.Surjective (u.app n) := by
  have := hu.injective_app_of_minimalFibration n
  sorry

lemma isIso_of_minimalFibration : IsIso u := by
  rw [NatTrans.isIso_iff_isIso_app]
  intro n
  rw [isIso_iff_bijective]
  exact ‚ü®hu.injective_app_of_minimalFibration n,
    hu.surjective_app_of_minimalFibration n‚ü©

end FiberwiseHomotopy

namespace MinimalFibration

lemma isIso_of_fiberwiseHomotopyEquiv {E E' B : SSet.{u}} (p : E ‚ü∂ B) (p' : E' ‚ü∂ B)
    [MinimalFibration p] [MinimalFibration p']
    (u : E ‚ü∂ E') (v : E' ‚ü∂ E) (huv : FiberwiseHomotopy p p (u ‚â´ v) (ùüô E))
    (hvu : FiberwiseHomotopy p' p' (v ‚â´ u) (ùüô E')) : IsIso u := by
  have := huv.isIso_of_minimalFibration
  have := hvu.isIso_of_minimalFibration
  have := mono_of_mono u v
  have := epi_of_epi v u
  exact isIso_of_mono_of_epi u

end MinimalFibration

end SSet
