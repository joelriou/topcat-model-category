import TopCatModelCategory.SSet.MinimalFibrations
import TopCatModelCategory.SSet.FiberwiseHomotopy
import TopCatModelCategory.TrivialBundle

universe u

open CategoryTheory MonoidalCategory Simplicial HomotopicalAlgebra
  SSet.modelCategoryQuillen ChosenFiniteProducts Limits MonoidalClosed

namespace SSet

namespace stdSimplex

lemma isPullback_whiskerLeft_snd (X : SSet.{u}) {A B : SSet.{u}} (i : A ‚ü∂ B) :
    IsPullback (X ‚óÅ i) (snd _ _) (snd _ _) i where
  w := by simp
  isLimit' :=
    ‚ü®PullbackCone.IsLimit.mk _
      (fun s ‚Ü¶ lift (s.fst ‚â´ fst _ _) s.snd)
      (fun s ‚Ü¶ by ext : 1 <;> simp [s.condition])
      (fun s ‚Ü¶ by simp)
      (fun s m hm‚ÇÅ hm‚ÇÇ ‚Ü¶ by
        ext : 1
        ¬∑ simp [‚Üê hm‚ÇÅ]
        ¬∑ simp [‚Üê hm‚ÇÇ])‚ü©

lemma isPullback_Œπ‚ÇÄ (X : SSet.{u}) :
    IsPullback Œπ‚ÇÄ (isTerminalObj‚ÇÄ.from X) (snd X Œî[1]) (stdSimplex.Œ¥ 1) :=
  (isPullback_whiskerLeft_snd X (stdSimplex.Œ¥ (1 : Fin 2))).of_iso
    (rightUnitor _) (Iso.refl _) (Iso.refl _) (Iso.refl _) (by simp)
      (isTerminalObj‚ÇÄ.hom_ext _ _) (by simp) (by simp)

lemma isPullback_Œπ‚ÇÅ (X : SSet.{u}) :
    IsPullback Œπ‚ÇÅ (isTerminalObj‚ÇÄ.from X) (snd X Œî[1]) (stdSimplex.Œ¥ 0) :=
  (isPullback_whiskerLeft_snd X (stdSimplex.Œ¥ (0 : Fin 2))).of_iso
    (rightUnitor _) (Iso.refl _) (Iso.refl _) (Iso.refl _) (by simp)
      (isTerminalObj‚ÇÄ.hom_ext _ _) (by simp) (by simp)

lemma isPullback_Œπ‚ÇÄ_whiskerRight {X Y : SSet.{u}} (p : X ‚ü∂ Y) :
    IsPullback Œπ‚ÇÄ p (p ‚ñ∑ Œî[1]) Œπ‚ÇÄ :=
  IsPullback.of_bot  (by simpa using isPullback_Œπ‚ÇÄ X)
    (by simp) (isPullback_Œπ‚ÇÄ Y)

lemma isPullback_Œπ‚ÇÅ_whiskerRight {X Y : SSet.{u}} (p : X ‚ü∂ Y) :
    IsPullback Œπ‚ÇÅ p (p ‚ñ∑ Œî[1]) Œπ‚ÇÅ :=
  IsPullback.of_bot  (by simpa using isPullback_Œπ‚ÇÅ X)
    (by simp) (isPullback_Œπ‚ÇÅ Y)

open anodyneExtensions.retractArrowHornCastSuccŒπ in
noncomputable def deformationRetract :
    ‚àÄ (n : ‚Ñï), DeformationRetract Œî[0] Œî[n]
  | 0 =>
    { toRetract := .refl _
      h := fst _ _ }
  | n + 1 =>
    { i := SSet.const (obj‚ÇÄEquiv.symm 0)
      r := SSet.const (obj‚ÇÄEquiv.symm 0)
      retract := isTerminalObj‚ÇÄ.hom_ext _ _
      h := r (n := n) (0)
      hi := by
        rw [‚Üê cancel_epi (stdSimplex.leftUnitor _).inv]
        apply yonedaEquiv.injective
        ext i : 1
        fin_cases i <;> rfl }

@[simp]
lemma deformationRetract_i (n : ‚Ñï) :
    (deformationRetract.{u} n).i = SSet.const (obj‚ÇÄEquiv.symm 0) := by
  obtain _ | n := n
  ¬∑ apply isTerminalObj‚ÇÄ.hom_ext
  ¬∑ rfl

@[simp]
lemma deformationRetract_r (n : ‚Ñï) :
    (deformationRetract.{u} n).r = SSet.const (obj‚ÇÄEquiv.symm 0) := by
  obtain _ | n := n
  ¬∑ apply isTerminalObj‚ÇÄ.hom_ext
  ¬∑ rfl

end stdSimplex

namespace MinimalFibration

variable {E B : SSet.{u}} (p : E ‚ü∂ B) [MinimalFibration p]

lemma congr_Œπ‚ÇÅ_comp {n : ‚Ñï} (h‚ÇÅ h‚ÇÇ : Œî[n] ‚äó Œî[1] ‚ü∂ E) (b : B _‚¶ãn‚¶å)
    (h‚ÇÅb : h‚ÇÅ ‚â´ p = fst _ _ ‚â´ yonedaEquiv.symm b)
    (h‚ÇÇb : h‚ÇÇ ‚â´ p = fst _ _ ‚â´ yonedaEquiv.symm b)
    (hŒπ : ‚àÇŒî[n].Œπ ‚ñ∑ _ ‚â´ h‚ÇÅ = ‚àÇŒî[n].Œπ ‚ñ∑ _ ‚â´ h‚ÇÇ)
    (eq : Œπ‚ÇÄ ‚â´ h‚ÇÅ = Œπ‚ÇÄ ‚â´ h‚ÇÇ) :
    Œπ‚ÇÅ ‚â´ h‚ÇÅ = Œπ‚ÇÅ ‚â´ h‚ÇÇ := by
  obtain ‚ü®œÜ, Œ±, eq‚ÇÅ, eq‚ÇÇ, eq‚ÇÉ‚ü© := exists_path_composition‚ÇÄ_above_of_fibration' (ihomToPullback ‚àÇŒî[n].Œπ p)
    (curry h‚ÇÅ) (curry h‚ÇÇ) (by
      apply uncurry_injective
      simp only [‚Üê cancel_epi (stdSimplex.rightUnitor _).inv, uncurry_natural_left,
        stdSimplex.rightUnitor_inv_map_Œ¥_one_assoc, uncurry_curry, eq]) (by
      ext : 1
      ¬∑ simp [curry_pre_app, hŒπ]
      ¬∑ simp only [Category.assoc, limit.lift_œÄ, PullbackCone.mk_pt, PullbackCone.mk_œÄ_app,
          ‚Üê curry_natural_right, h‚ÇÅb, h‚ÇÇb])
  obtain ‚ü®Œ¥, œÄ, sq, rfl‚ü© := ihomToPullbackTgt‚ÇÄMk_surjective Œ±
  have str : SimplexOverRelStruct p (yonedaEquiv (Œπ‚ÇÅ ‚â´ h‚ÇÅ)) (yonedaEquiv (Œπ‚ÇÅ ‚â´ h‚ÇÇ)) :=
    { h := uncurry œÜ
      h‚ÇÄ := by
        rw [Equiv.symm_apply_apply,
          ‚Üê stdSimplex.rightUnitor_inv_map_Œ¥_zero_assoc,
          ‚Üê stdSimplex.rightUnitor_inv_map_Œ¥_one_assoc,
          Iso.cancel_iso_inv_left, ‚Üê uncurry_natural_left, eq‚ÇÅ,
          uncurry_natural_left, uncurry_curry]
      h‚ÇÅ := by
        rw [Equiv.symm_apply_apply,
          ‚Üê stdSimplex.rightUnitor_inv_map_Œ¥_zero_assoc,
          ‚Üê stdSimplex.rightUnitor_inv_map_Œ¥_zero_assoc,
          Iso.cancel_iso_inv_left, ‚Üê uncurry_natural_left, eq‚ÇÇ,
          uncurry_natural_left, uncurry_curry]
      œÄ := œÄ
      d := Œ¥
      hœÄ := by
        have := eq‚ÇÉ =‚â´ pullback.snd _ _
        simp only [Category.assoc, limit.lift_œÄ, PullbackCone.mk_pt, PullbackCone.mk_œÄ_app,
          const_comp, pullback_snd_app_ihomToPullbackTgt‚ÇÄMk] at this
        rw [‚Üê uncurry_natural_right, this]
        rfl
      hd := by
        have := eq‚ÇÉ =‚â´ pullback.fst _ _
        simp only [Category.assoc, limit.lift_œÄ, PullbackCone.mk_pt, PullbackCone.mk_œÄ_app,
          const_comp, pullback_fst_app_ihomToPullbackTgt‚ÇÄMk] at this
        rw [‚Üê uncurry_pre_app, this]
        rfl
      }
  exact yonedaEquiv.injective str.eq

lemma congr_Œπ‚ÇÄ_comp {n : ‚Ñï} (h‚ÇÅ h‚ÇÇ : Œî[n] ‚äó Œî[1] ‚ü∂ E) (b : B _‚¶ãn‚¶å)
    (h‚ÇÅb : h‚ÇÅ ‚â´ p = fst _ _ ‚â´ yonedaEquiv.symm b)
    (h‚ÇÇb : h‚ÇÇ ‚â´ p = fst _ _ ‚â´ yonedaEquiv.symm b)
    (hŒπ : ‚àÇŒî[n].Œπ ‚ñ∑ _ ‚â´ h‚ÇÅ = ‚àÇŒî[n].Œπ ‚ñ∑ _ ‚â´ h‚ÇÇ)
    (eq : Œπ‚ÇÅ ‚â´ h‚ÇÅ = Œπ‚ÇÅ ‚â´ h‚ÇÇ) :
    Œπ‚ÇÄ ‚â´ h‚ÇÅ = Œπ‚ÇÄ ‚â´ h‚ÇÇ := by
  obtain ‚ü®œÜ, Œ±, eq‚ÇÅ, eq‚ÇÇ, eq‚ÇÉ‚ü© := exists_path_composition‚ÇÇ_above_of_fibration' (ihomToPullback ‚àÇŒî[n].Œπ p)
    (curry h‚ÇÅ) (curry h‚ÇÇ) (by
      apply uncurry_injective
      simp only [‚Üê cancel_epi (stdSimplex.rightUnitor _).inv, uncurry_natural_left,
        stdSimplex.rightUnitor_inv_map_Œ¥_zero_assoc, uncurry_curry, eq]) (by
      ext : 1
      ¬∑ simp [curry_pre_app, hŒπ]
      ¬∑ simp only [Category.assoc, limit.lift_œÄ, PullbackCone.mk_pt, PullbackCone.mk_œÄ_app,
          ‚Üê curry_natural_right, h‚ÇÅb, h‚ÇÇb]
        )
  obtain ‚ü®Œ¥, œÄ, sq, rfl‚ü© := ihomToPullbackTgt‚ÇÄMk_surjective Œ±
  have str : SimplexOverRelStruct p (yonedaEquiv (Œπ‚ÇÄ ‚â´ h‚ÇÅ)) (yonedaEquiv (Œπ‚ÇÄ ‚â´ h‚ÇÇ)) :=
    { h := uncurry œÜ
      h‚ÇÄ := by
        rw [Equiv.symm_apply_apply,
          ‚Üê stdSimplex.rightUnitor_inv_map_Œ¥_one_assoc,
          ‚Üê stdSimplex.rightUnitor_inv_map_Œ¥_one_assoc,
          Iso.cancel_iso_inv_left, ‚Üê uncurry_natural_left, eq‚ÇÅ,
          uncurry_natural_left, uncurry_curry]
      h‚ÇÅ := by
        rw [Equiv.symm_apply_apply,
          ‚Üê stdSimplex.rightUnitor_inv_map_Œ¥_zero_assoc,
          ‚Üê stdSimplex.rightUnitor_inv_map_Œ¥_one_assoc,
          Iso.cancel_iso_inv_left, ‚Üê uncurry_natural_left, eq‚ÇÇ,
          uncurry_natural_left, uncurry_curry]
      œÄ := œÄ
      d := Œ¥
      hœÄ := by
        have := eq‚ÇÉ =‚â´ pullback.snd _ _
        simp only [Category.assoc, limit.lift_œÄ, PullbackCone.mk_pt, PullbackCone.mk_œÄ_app,
          const_comp, pullback_snd_app_ihomToPullbackTgt‚ÇÄMk] at this
        rw [‚Üê uncurry_natural_right, this]
        rfl
      hd := by
        have := eq‚ÇÉ =‚â´ pullback.fst _ _
        simp only [Category.assoc, limit.lift_œÄ, PullbackCone.mk_pt, PullbackCone.mk_œÄ_app,
          const_comp, pullback_fst_app_ihomToPullbackTgt‚ÇÄMk] at this
        rw [‚Üê uncurry_pre_app, this]
        rfl
      }
  exact yonedaEquiv.injective str.eq

end MinimalFibration

namespace FiberwiseHomotopy

variable {E B : SSet.{u}} {p : E ‚ü∂ B} [MinimalFibration p]
  {u : E ‚ü∂ E} (hu : FiberwiseHomotopy p p u (ùüô _))

include hu

lemma injective_app_of_minimalFibration (n : SimplexCategory·µí·µñ) :
    Function.Injective (u.app n) := by
  obtain ‚ü®n‚ü© := n
  induction' n using SimplexCategory.rec with n
  induction' n using Nat.strong_induction_on with n hn
  intro s‚ÇÅ s‚ÇÇ hs
  obtain ‚ü®t, ht‚ÇÅ, ht‚ÇÇ‚ü© : ‚àÉ (t : B _‚¶ãn‚¶å), p.app _ s‚ÇÅ = t ‚àß p.app _ s‚ÇÇ = t := ‚ü®_, rfl, by
    convert congr_arg (p.app _ ) hs.symm using 1
    all_goals
    ¬∑ conv_lhs => rw [‚Üê hu.fac‚ÇÄ]; dsimp‚ü©
  simpa using MinimalFibration.congr_Œπ‚ÇÅ_comp p (yonedaEquiv.symm s‚ÇÅ ‚ñ∑ _ ‚â´ hu.h)
    (yonedaEquiv.symm s‚ÇÇ ‚ñ∑ _ ‚â´ hu.h) t (by simp [ht‚ÇÅ]) (by simp [ht‚ÇÇ]) (by
      simp only [‚Üê comp_whiskerRight_assoc]
      congr 2
      obtain _ | n := n
      ¬∑ ext
      ¬∑ refine boundary.hom_ext (fun j ‚Ü¶ ?_)
        simp only [boundary.Œπ_Œπ_assoc, stdSimplex.Œ¥_comp_yonedaEquiv_symm]
        congr 1
        exact hn _ (by simp) (by simp only [SSet.Œ¥_naturality_apply, hs])) (by simpa)

lemma surjective_app_of_minimalFibration (n : SimplexCategory·µí·µñ) :
    Function.Surjective (u.app n) := by
  obtain ‚ü®n‚ü© := n
  induction' n using SimplexCategory.rec with n
  induction' n using Nat.strong_induction_on with n hn
  intro x
  obtain ‚ü®y, hy‚ü© :
      ‚àÉ (y : (‚àÇŒî[n] : SSet) ‚ü∂ E), y ‚â´ u = ‚àÇŒî[n].Œπ ‚â´ yonedaEquiv.symm x := by
    obtain _ | n := n
    ¬∑ exact ‚ü®boundary.isInitial.to _, by ext‚ü©
    ¬∑ let s (i : Fin (n + 2)) : E _‚¶ãn‚¶å := (hn n (by simp) (E.Œ¥ i x)).choose
      have hs (i : Fin (n + 2)) : u.app _ (s i) = E.Œ¥ i x :=
        (hn n (by simp) (E.Œ¥ i x)).choose_spec
      obtain _ | n := n
      ¬∑ refine ‚ü®boundary‚ÇÅ.desc (s 1) (s 0), ?_‚ü©
        apply boundary‚ÇÅ.hom_ext <;> simp [hs, stdSimplex.Œ¥_comp_yonedaEquiv_symm]
      ¬∑ obtain ‚ü®œÜ, hœÜ‚ü© := boundary.exists_desc (fun i ‚Ü¶ yonedaEquiv.symm (s i)) (by
          intro j k hjk
          dsimp
          obtain ‚ü®k, rfl‚ü© := k.eq_succ_of_ne_zero (Fin.ne_zero_of_lt hjk)
          obtain ‚ü®j, rfl‚ü© := j.eq_castSucc_of_ne_last (Fin.ne_last_of_lt hjk)
          simp only [Fin.pred_succ, Fin.castPred_castSucc,
            stdSimplex.Œ¥_comp_yonedaEquiv_symm]
          congr 1
          apply hu.injective_app_of_minimalFibration
          simp only [Œ¥_naturality_apply, hs]
          rw [‚Üê Fin.le_castSucc_iff, Fin.castSucc_le_castSucc_iff] at hjk
          exact (E.Œ¥_comp_Œ¥_apply hjk _).symm)
        refine ‚ü®œÜ, boundary.hom_ext (fun i ‚Ü¶ ?_)‚ü©
        rw [reassoc_of% hœÜ, boundary.Œπ_Œπ_assoc]
        apply yonedaEquiv.injective
        rw [yonedaEquiv_symm_comp, Equiv.apply_symm_apply, hs,
          stdSimplex.Œ¥_comp_yonedaEquiv_symm, Equiv.apply_symm_apply]
  obtain ‚ü®Œ¶, hŒ¶‚ÇÅ, hŒ¶‚ÇÇ, hŒ¶‚ÇÉ‚ü© :
      ‚àÉ (Œ¶ : Œî[n] ‚äó Œî[1] ‚ü∂ E), Œπ‚ÇÄ ‚â´ Œ¶ = yonedaEquiv.symm x ‚àß
        ‚àÇŒî[n].Œπ ‚ñ∑ _ ‚â´ Œ¶ = y ‚ñ∑ _ ‚â´ hu.h ‚àß Œ¶ ‚â´ p = fst _ _ ‚â´ yonedaEquiv.symm x ‚â´ p := by
    let i : pushout ‚àÇŒî[n].Œπ Œπ‚ÇÄ ‚ü∂ Œî[n] ‚äó Œî[1] :=
      pushout.desc (Œπ‚ÇÄ.{u}) (‚àÇŒî[n].Œπ ‚ñ∑ Œî[1]) (by simp)
    have sq : CommSq (pushout.desc (yonedaEquiv.symm x) (y ‚ñ∑ _ ‚â´ hu.h) (by aesop)) i
        p (fst _ _ ‚â´ yonedaEquiv.symm x ‚â´ p) := ‚ü®by
      ext : 1
      ¬∑ simp [i]
      ¬∑ simp only [colimit.Œπ_desc_assoc, span_right,
          Subcomplex.RelativeMorphism.botEquiv_symm_apply_map, PushoutCocone.mk_pt,
          PushoutCocone.mk_Œπ_app, Category.assoc, fac, whiskerRight_fst_assoc,
          yonedaEquiv_symm_comp, i]
        conv_lhs => rw [‚Üê hu.fac‚ÇÄ, reassoc_of% hy, yonedaEquiv_symm_comp]‚ü©
    have := anodyneExtensions.pushout_desc_Œπ‚ÇÄ_whiskerRight_mono ‚àÇŒî[n].Œπ p Fibration.mem
    refine ‚ü®sq.lift, ?_, ?_, by simp‚ü©
    ¬∑ have := pushout.inl _ _ ‚â´= sq.fac_left
      dsimp [i] at this
      rwa [pushout.inl_desc_assoc, pushout.inl_desc] at this
    ¬∑ have := pushout.inr _ _ ‚â´= sq.fac_left
      dsimp [i] at this
      rwa [pushout.inr_desc_assoc, pushout.inr_desc] at this
  obtain ‚ü®z, hz‚ü© := yonedaEquiv.symm.surjective (Œπ‚ÇÅ ‚â´ Œ¶)
  refine ‚ü®z, ?_‚ü©
  have := MinimalFibration.congr_Œπ‚ÇÄ_comp p Œ¶
    (yonedaEquiv.symm z ‚ñ∑ _ ‚â´ hu.h) (p.app _ x) (by aesop) (by
    simp only [Category.assoc, fac, whiskerRight_fst_assoc, yonedaEquiv_symm_comp]
    congr 1
    simp only [‚Üê yonedaEquiv_symm_comp, hz, Category.assoc, hŒ¶‚ÇÉ, Œπ‚ÇÅ_fst_assoc]) (by
    rw [hz, hŒ¶‚ÇÇ]
    rw [‚Üê comp_whiskerRight_assoc]
    rw [‚Üê Œπ‚ÇÅ_comp_assoc, hŒ¶‚ÇÇ, Œπ‚ÇÅ_comp_assoc, hu.h‚ÇÅ,
      Subcomplex.RelativeMorphism.botEquiv_symm_apply_map, Category.comp_id]) (by simp [hz])
  apply yonedaEquiv.symm.injective
  simp [‚Üê hŒ¶‚ÇÅ, this]

lemma isIso_of_minimalFibration : IsIso u := by
  rw [NatTrans.isIso_iff_isIso_app]
  intro n
  rw [isIso_iff_bijective]
  exact ‚ü®hu.injective_app_of_minimalFibration n,
    hu.surjective_app_of_minimalFibration n‚ü©

end FiberwiseHomotopy

namespace MinimalFibration

lemma isIso_of_fiberwiseHomotopyEquiv {E E' B : SSet.{u}} (p : E ‚ü∂ B) (p' : E' ‚ü∂ B)
    [MinimalFibration p] [MinimalFibration p']
    (u : E ‚ü∂ E') (v : E' ‚ü∂ E) (huv : FiberwiseHomotopy p p (u ‚â´ v) (ùüô E))
    (hvu : FiberwiseHomotopy p' p' (v ‚â´ u) (ùüô E')) : IsIso u := by
  have := huv.isIso_of_minimalFibration
  have := hvu.isIso_of_minimalFibration
  have := mono_of_mono u v
  have := epi_of_epi v u
  exact isIso_of_mono_of_epi u

lemma constant_of_prod_stdSimplex {E' B : SSet.{u}} (p' : E' ‚ü∂ B ‚äó Œî[1])
    [MinimalFibration p'] :
    ‚àÉ (E : SSet.{u}) (p : E ‚ü∂ B) (e : E ‚äó Œî[1] ‚âÖ E'), e.hom ‚â´ p' = p ‚ñ∑ Œî[1] := by
  let E := pullback p' Œπ‚ÇÄ
  let p : E ‚ü∂ B := pullback.snd _ _
  have hp : MinimalFibration (p ‚ñ∑ Œî[1]) := sorry
  let u : E ‚äó Œî[1] ‚ü∂ E' := sorry
  let v : E' ‚ü∂ E ‚äó Œî[1] := sorry
  sorry

lemma congr_pullback_of_homotopy
    {E A B E‚ÇÄ E‚ÇÅ : SSet.{u}} (p : E ‚ü∂ B) [MinimalFibration p]
    {f‚ÇÄ f‚ÇÅ : A ‚ü∂ B} (h : Homotopy f‚ÇÄ f‚ÇÅ)
    {p‚ÇÄ : E‚ÇÄ ‚ü∂ A} {g‚ÇÄ : E‚ÇÄ ‚ü∂ E} (sq‚ÇÄ : IsPullback g‚ÇÄ p‚ÇÄ p f‚ÇÄ)
    {p‚ÇÅ : E‚ÇÅ ‚ü∂ A} {g‚ÇÅ : E‚ÇÅ ‚ü∂ E} (sq‚ÇÅ : IsPullback g‚ÇÅ p‚ÇÅ p f‚ÇÅ) :
    ‚àÉ (e : E‚ÇÄ ‚âÖ E‚ÇÅ), e.hom ‚â´ p‚ÇÅ = p‚ÇÄ := by
  let E' := pullback p h.h
  obtain ‚ü®F, œÄ, e, fac‚ü© := constant_of_prod_stdSimplex (pullback.snd p h.h)
  have sq' : IsPullback (e.hom ‚â´ pullback.fst _ _) (œÄ ‚ñ∑ Œî[1]) p h.h :=
    IsPullback.of_iso (IsPullback.of_hasPullback p h.h) e.symm
      (Iso.refl _) (Iso.refl _) (Iso.refl _)
      (by simp) (by simp [‚Üê fac]) (by simp) (by simp)
  have sq‚ÇÄ' : IsPullback (Œπ‚ÇÄ ‚â´ e.hom ‚â´ pullback.fst _ _) œÄ p f‚ÇÄ := by
    simpa using IsPullback.paste_horiz (stdSimplex.isPullback_Œπ‚ÇÄ_whiskerRight œÄ) sq'
  have sq‚ÇÅ' : IsPullback (Œπ‚ÇÅ ‚â´ e.hom ‚â´ pullback.fst _ _) œÄ p f‚ÇÅ := by
    simpa using IsPullback.paste_horiz (stdSimplex.isPullback_Œπ‚ÇÅ_whiskerRight œÄ) sq'
  obtain ‚ü®e‚ÇÄ, fac‚ÇÄ‚ü© : ‚àÉ (e‚ÇÄ : F ‚âÖ E‚ÇÄ), e‚ÇÄ.hom ‚â´ p‚ÇÄ = œÄ :=
    ‚ü®_, IsLimit.conePointUniqueUpToIso_hom_comp sq‚ÇÄ'.isLimit sq‚ÇÄ.isLimit .right‚ü©
  obtain ‚ü®e‚ÇÅ, fac‚ÇÅ‚ü© : ‚àÉ (e‚ÇÅ : F ‚âÖ E‚ÇÅ), e‚ÇÅ.hom ‚â´ p‚ÇÅ = œÄ :=
    ‚ü®_, IsLimit.conePointUniqueUpToIso_hom_comp sq‚ÇÅ'.isLimit sq‚ÇÅ.isLimit .right‚ü©
  refine ‚ü®e‚ÇÄ.symm ‚â™‚â´ e‚ÇÅ, ?_‚ü©
  dsimp
  rw [Category.assoc, fac‚ÇÅ, ‚Üê fac‚ÇÄ, e‚ÇÄ.inv_hom_id_assoc]

open MorphismProperty in
lemma isTrivialBundle_of_stdSimplex
    {E : SSet.{u}} {n : ‚Ñï} (p : E ‚ü∂ Œî[n]) [MinimalFibration p] :
    trivialBundles p := by
  let f := (stdSimplex.deformationRetract.{u} n).r ‚â´
    (stdSimplex.deformationRetract n).i
  have fac : stdSimplex.isTerminalObj‚ÇÄ.from _ ‚â´
      SSet.const (stdSimplex.obj‚ÇÄEquiv.symm 0) = f := by
    simp [f]
  obtain ‚ü®e, he‚ü© := congr_pullback_of_homotopy p
    (stdSimplex.deformationRetract n).homotopy
    (IsPullback.of_hasPullback p f) (IsPullback.id_horiz p)
  exact (MorphismProperty.arrow_mk_iso_iff _ (Arrow.isoMk e (Iso.refl _))).1
    (trivialBundles.of_isPullback_of_fac (IsPullback.of_hasPullback p f)
      stdSimplex.isTerminalObj‚ÇÄ _ _ fac)

end MinimalFibration

end SSet
