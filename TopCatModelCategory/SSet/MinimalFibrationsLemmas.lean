import TopCatModelCategory.SSet.MinimalFibrations
import TopCatModelCategory.SSet.FiberwiseHomotopy

universe u

open CategoryTheory MonoidalCategory Simplicial HomotopicalAlgebra
  SSet.modelCategoryQuillen ChosenFiniteProducts

namespace SSet

namespace FiberwiseHomotopy
variable {E B : SSet.{u}} {p : E ‚ü∂ B} [MinimalFibration p]
  {u : E ‚ü∂ E} (hu : FiberwiseHomotopy p p u (ùüô _))

include hu

lemma injective_app_of_minimalFibration (n : SimplexCategory·µí·µñ) :
    Function.Injective (u.app n) := by
  have : MinimalFibration p := inferInstance
  have := hu
  obtain ‚ü®n‚ü© := n
  induction' n using SimplexCategory.rec with n
  induction' n using Nat.strong_induction_on with n hn
  intro s‚ÇÅ s‚ÇÇ hs
  have := (anodyneExtensions.subcomplex_unionProd_mem_of_right.{u}
    (boundary n) _ (anodyneExtensions.face 0)).hasLeftLiftingProperty p
  let t : B _‚¶ãn‚¶å  := p.app _ s‚ÇÅ
  have sq : CommSq sorry ((‚àÇŒî[n]).unionProd (stdSimplex.face {(0 : Fin 2)})).Œπ p
      (fst _ _ ‚â´ yonedaEquiv.symm t) := sorry
  let œÅ : SimplexOverRelStruct p s‚ÇÅ s‚ÇÇ :=
    { h := sq.lift
      h‚ÇÄ := sorry
      h‚ÇÅ := sorry
      œÄ := sorry
      d := sorry
      hœÄ := sorry
      hd := sorry }
  exact œÅ.eq

lemma surjective_app_of_minimalFibration (n : SimplexCategory·µí·µñ) :
    Function.Surjective (u.app n) := by
  have := hu.injective_app_of_minimalFibration n
  sorry

lemma isIso_of_minimalFibration : IsIso u := by
  rw [NatTrans.isIso_iff_isIso_app]
  intro n
  rw [isIso_iff_bijective]
  exact ‚ü®hu.injective_app_of_minimalFibration n,
    hu.surjective_app_of_minimalFibration n‚ü©

end FiberwiseHomotopy

namespace MinimalFibration

lemma isIso_of_fiberwiseHomotopyEquiv {E E' B : SSet.{u}} (p : E ‚ü∂ B) (p' : E' ‚ü∂ B)
    [MinimalFibration p] [MinimalFibration p']
    (u : E ‚ü∂ E') (v : E' ‚ü∂ E) (huv : FiberwiseHomotopy p p (u ‚â´ v) (ùüô E))
    (hvu : FiberwiseHomotopy p' p' (v ‚â´ u) (ùüô E')) : IsIso u := by
  have := huv.isIso_of_minimalFibration
  have := hvu.isIso_of_minimalFibration
  have := mono_of_mono u v
  have := epi_of_epi v u
  exact isIso_of_mono_of_epi u

end MinimalFibration

end SSet
