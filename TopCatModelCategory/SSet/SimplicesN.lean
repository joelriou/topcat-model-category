import TopCatModelCategory.SSet.Simplices
import Mathlib.AlgebraicTopology.SimplicialSet.Degenerate

universe u

open CategoryTheory Simplicial Limits Opposite

lemma Quiver.Hom.op_surjective {C : Type*} [Quiver C] {X Y : C·µí·µñ} (f : X ‚ü∂ Y) :
    ‚àÉ (g : Y.unop ‚ü∂ X.unop), f = g.op := ‚ü®f.unop, rfl‚ü©

instance {C : Type*} [Category C] {X Y : C} (f : X ‚ü∂ Y) [IsSplitEpi f] :
    IsSplitMono f.op where
  exists_splitMono := ‚ü®‚ü®(section_ f).op, Quiver.Hom.unop_inj (by simp)‚ü©‚ü©

lemma SimplexCategory.isIso_iff_len_eq_of_epi {n m : SimplexCategory} (f : n ‚ü∂ m) [Epi f] :
    IsIso f ‚Üî n.len = m.len := by
  have hf := len_le_of_epi (f := f) inferInstance
  refine ‚ü®fun _ ‚Ü¶ le_antisymm (len_le_of_mono (f := f) inferInstance) hf, fun h ‚Ü¶ ?_‚ü©
  obtain rfl : n = m := by aesop
  have h := (epi_iff_surjective (f := f)).1 inferInstance
  exact isIso_of_bijective ‚ü®by rwa [Finite.injective_iff_surjective], h‚ü©

namespace SSet

variable (X : SSet.{u})

def N : Type u := Sigma (fun (n : ‚Ñï) ‚Ü¶ X.nonDegenerate n)

namespace N

variable {X}

abbrev mk {n : ‚Ñï} (x : X _‚¶ãn‚¶å) (hx : x ‚àà X.nonDegenerate n) : X.N :=
    ‚ü®n, x, hx‚ü©

lemma induction
    {motive : ‚àÄ {n : ‚Ñï} (x : X _‚¶ãn‚¶å) (_ : x ‚àà X.nonDegenerate _), Prop}
    (h‚ÇÅ : ‚àÄ (x : X.N), motive x.2.1 x.2.2)
    {n : ‚Ñï} (x : X _‚¶ãn‚¶å) (hx : x ‚àà X.nonDegenerate _) : motive x hx :=
  h‚ÇÅ ‚ü®n, x, hx‚ü©

instance : LE X.N where
  le x y := Subcomplex.ofSimplex x.2.1 ‚â§ Subcomplex.ofSimplex y.2.1

lemma le_iff {x y : X.N} : x ‚â§ y ‚Üî Subcomplex.ofSimplex x.2.1 ‚â§ Subcomplex.ofSimplex y.2.1 :=
  Iff.rfl

lemma le_iff_exists {x y : X.N} :
    x ‚â§ y ‚Üî ‚àÉ (f : ‚¶ãx.1‚¶å ‚ü∂ ‚¶ãy.1‚¶å) (_ : Mono f), X.map f.op y.2 = x.2 := by
  simp only [le_iff, CategoryTheory.Subpresheaf.ofSection_le_iff,
    Subcomplex.mem_ofSimplex_obj_iff]
  refine ‚ü®?_, by tauto‚ü©
  rintro ‚ü®f, hf‚ü©
  refine ‚ü®f, ?_, hf‚ü©
  have : IsIso (factorThruImage f) := by
    rw [SimplexCategory.isIso_iff_len_eq_of_epi]
    obtain h | h := (SimplexCategory.len_le_of_epi
      (f := factorThruImage f) inferInstance).eq_or_lt
    ¬∑ exact h.symm
    ¬∑ exfalso
      apply (mem_nonDegenerate_iff_not_mem_degenerate _ _).1 x.2.2
      rw [mem_degenerate_iff]
      refine ‚ü®_, h, factorThruImage f, inferInstance, ?_‚ü©
      rw [‚Üê image.fac f, op_comp, FunctorToTypes.map_comp_apply] at hf
      rw [‚Üê hf]
      apply Set.mem_range_self
  have := isIso_of_mono_of_epi (factorThruImage f)
  rw [‚Üê image.fac f]
  infer_instance

lemma le_of_le {x y : X.N} (h : x ‚â§ y) : x.1 ‚â§ y.1 := by
  rw [le_iff_exists] at h
  obtain ‚ü®f, hf, _‚ü© := h
  exact SimplexCategory.len_le_of_mono hf

instance : PartialOrder X.N where
  le_refl x := by simp only [le_iff, le_refl]
  le_antisymm := by
    rintro ‚ü®n‚ÇÅ, x‚ÇÅ‚ü© ‚ü®n‚ÇÇ, x‚ÇÇ‚ü© h h'
    obtain rfl : n‚ÇÅ = n‚ÇÇ := le_antisymm (le_of_le h) (le_of_le h')
    rw [le_iff_exists] at h
    obtain ‚ü®f, hf, h‚ü© := h
    obtain rfl := SimplexCategory.eq_id_of_mono f
    aesop
  le_trans _ _ _ h h' := by
    simp only [le_iff] at h h' ‚ä¢
    exact h.trans h'

lemma eq_iff {x y : X.N} : x = y ‚Üî Subcomplex.ofSimplex x.2.1 = Subcomplex.ofSimplex y.2.1 :=
  ‚ü®by rintro rfl; rfl, fun h ‚Ü¶ by
    apply le_antisymm
    all_goals
    ¬∑ rw [le_iff, h]‚ü©

end N

@[simps]
def orderEmbeddingN : X.N ‚Ü™o X.Subcomplex where
  toFun x := Subcomplex.ofSimplex x.2.1
  inj' _ _ h := by
    dsimp at h
    apply le_antisymm <;> rw [N.le_iff, h]
  map_rel_iff' := Iff.rfl

@[simps! obj]
def functorN : X.N ‚•§ SSet.{u} :=
  X.orderEmbeddingN.monotone.functor ‚ãô Subcomplex.toPresheafFunctor

variable {X} in
@[simp]
lemma functorN_map {x‚ÇÅ x‚ÇÇ : X.N} (f : x‚ÇÅ ‚ü∂ x‚ÇÇ) :
    X.functorN.map f = Subcomplex.homOfLE (X.orderEmbeddingN.monotone (leOfHom f)) := rfl

@[simps]
def coconeN : Cocone X.functorN where
  pt := X
  Œπ := { app _ := Subcomplex.Œπ _ }

section

variable {n : ‚Ñï} (x : X _‚¶ãn‚¶å)

noncomputable def toN : X.N :=
  ‚ü®_, (X.exists_nonDegenerate x).choose_spec.choose_spec.choose_spec.choose‚ü©

noncomputable def toNœÄ : ‚¶ãn‚¶å ‚ü∂ ‚¶ã(X.toN x).1‚¶å :=
  (X.exists_nonDegenerate x).choose_spec.choose

instance : Epi (X.toNœÄ x) :=
  (X.exists_nonDegenerate x).choose_spec.choose_spec.choose

instance : IsSplitEpi (X.toNœÄ x) := isSplitEpi_of_epi _

@[simp]
lemma map_toNœÄ_op_toN : X.map (X.toNœÄ x).op (X.toN x).2.1 = x :=
  (X.exists_nonDegenerate x).choose_spec.choose_spec.choose_spec.choose_spec.symm

@[simp]
lemma map_splitEpiSection_eq_toN_snd (h : SplitEpi (X.toNœÄ x)) :
    X.map h.section_.op x = (X.toN x).2 := by
  nth_rw 6 [‚Üê X.map_toNœÄ_op_toN x]
  rw [‚Üê FunctorToTypes.map_comp_apply, ‚Üê op_comp, h.id,
    op_id, FunctorToTypes.map_id_apply]

@[simp]
lemma map_section_eq_toN_snd :
    X.map (section_ (X.toNœÄ x)).op x = (X.toN x).2 :=
  map_splitEpiSection_eq_toN_snd _ _ (IsSplitEpi.exists_splitEpi (f := X.toNœÄ x)).some

@[simp]
lemma ofSimplex_toN : Subcomplex.ofSimplex (X.toN x).2.1 = Subcomplex.ofSimplex x := by
  refine le_antisymm ?_ ?_
  ¬∑ simp only [Subpresheaf.ofSection_le_iff, Subcomplex.mem_ofSimplex_obj_iff]
    have : IsSplitEpi (X.toNœÄ x) := isSplitEpi_of_epi _
    have h : Mono (X.map (X.toNœÄ x).op) := inferInstance
    rw [mono_iff_injective] at h
    exact ‚ü®section_ (X.toNœÄ x), by simp‚ü©
  ¬∑ simp only [Subpresheaf.ofSection_le_iff, Subcomplex.mem_ofSimplex_obj_iff]
    exact ‚ü®X.toNœÄ x, by simp‚ü©

variable {X} in
lemma N.ext {n : ‚Ñï} (x : X _‚¶ãn‚¶å) (y‚ÇÅ y‚ÇÇ : X.N) (f‚ÇÅ : ‚¶ãn‚¶å ‚ü∂ ‚¶ãy‚ÇÅ.1‚¶å)
    (f‚ÇÇ : ‚¶ãn‚¶å ‚ü∂ ‚¶ãy‚ÇÇ.1‚¶å) [Epi f‚ÇÅ] [Epi f‚ÇÇ]
    (hf‚ÇÅ : X.map f‚ÇÅ.op y‚ÇÅ.2.1 = x) (hf‚ÇÇ : X.map f‚ÇÇ.op y‚ÇÇ.2.1 = x) : y‚ÇÅ = y‚ÇÇ := by
  obtain ‚ü®n‚ÇÅ, y‚ÇÅ‚ü© := y‚ÇÅ
  obtain ‚ü®n‚ÇÇ, y‚ÇÇ‚ü© := y‚ÇÇ
  obtain rfl := X.unique_nonDegenerate‚ÇÅ x _ _ hf‚ÇÅ.symm _ _ hf‚ÇÇ.symm
  obtain rfl := X.unique_nonDegenerate‚ÇÇ x _ _ hf‚ÇÅ.symm _ _ hf‚ÇÇ.symm
  rfl

lemma toN_eq {n : ‚Ñï} (x : X _‚¶ãn‚¶å) (y : X.N) (f : ‚¶ãn‚¶å ‚ü∂ ‚¶ãy.1‚¶å) [Epi f]
    (h : X.map f.op y.2.1 = x) : X.toN x = y :=
  N.ext x _ _ (X.toNœÄ x) f (by simp) h

lemma toN_surjective (s : X.N) : ‚àÉ (n : ‚Ñï) (x : X.nonDegenerate n), s = X.toN x.1 :=
  ‚ü®s.1, s.2, (X.toN_eq _ _ (ùüô _) (by simp)).symm‚ü©

end

namespace isColimitCoconeN

variable {X}

lemma hom_ext {Y : SSet.{u}} {f g : X ‚ü∂ Y}
    (h : ‚àÄ (x : X.N), (Subcomplex.ofSimplex x.2.1).Œπ ‚â´ f = (Subcomplex.ofSimplex x.2.1).Œπ ‚â´ g) :
    f = g := by
  rw [‚Üê cancel_epi (Subcomplex.topIso _).hom, ‚Üê Subpresheaf.equalizer_eq_iff,
    Subcomplex.eq_top_iff_contains_nonDegenerate]
  intro n x hx
  simpa [Subpresheaf.equalizer] using
    congr_fun (NatTrans.congr_app (h ‚ü®n, ‚ü®x, hx‚ü©‚ü©) (op ‚¶ãn‚¶å))
      ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©

variable (s : Cocone X.functorN)

noncomputable def descApp {n : ‚Ñï} (x : X _‚¶ãn‚¶å) : s.pt _‚¶ãn‚¶å :=
  yonedaEquiv (stdSimplex.map (X.toNœÄ x) ‚â´ Subcomplex.toOfSimplex _ ‚â´ s.Œπ.app (X.toN x))

lemma descApp_apply {n : ‚Ñï} (x : X _‚¶ãn‚¶å) (y : X.N) (f : ‚¶ãn‚¶å ‚ü∂ ‚¶ãy.1‚¶å) [Epi f]
    (hf : X.map f.op y.2.1 = x) :
    descApp s x = yonedaEquiv (stdSimplex.map f ‚â´ Subcomplex.toOfSimplex _ ‚â´ s.Œπ.app y) := by
  obtain rfl : y = X.toN x := by
    obtain ‚ü®m, y‚ü© := y
    obtain rfl := X.unique_nonDegenerate‚ÇÅ x _ _ hf.symm _ _ ((X.map_toNœÄ_op_toN x).symm)
    obtain rfl := X.unique_nonDegenerate‚ÇÇ x _ _ hf.symm _ _ ((X.map_toNœÄ_op_toN x).symm)
    rfl
  obtain rfl := X.unique_nonDegenerate‚ÇÉ x _ _ hf.symm _ _ ((X.map_toNœÄ_op_toN x).symm)
  rfl

@[simp]
lemma descApp_apply' (x : X.N) :
    descApp s x.2.1 = (s.Œπ.app x).app _ ‚ü®x.2, Subcomplex.mem_ofSimplex_obj _‚ü© := by
  rw [descApp_apply s x.2.1 x (ùüô _) (by simp), CategoryTheory.Functor.map_id, Category.id_comp,
    yonedaEquiv_comp, Subcomplex.yonedaEquiv_toOfSimplex]

noncomputable def desc : X ‚ü∂ s.pt where
  app := fun ‚ü®n‚ü© ‚Ü¶ by
    induction' n using SimplexCategory.rec with n
    exact descApp _
  naturality := by
    rintro ‚ü®n‚ü© ‚ü®m‚ü© f
    obtain ‚ü®f, rfl‚ü© := Quiver.Hom.op_surjective f
    induction' n using SimplexCategory.rec with n
    induction' m using SimplexCategory.rec with m
    dsimp [SimplexCategory.rec]
    ext x
    dsimp [descApp]
    have h : X.toN (X.map f.op x) ‚â§ X.toN x := by
      rw [N.le_iff, ofSimplex_toN, ofSimplex_toN, Subpresheaf.ofSection_le_iff,
        Subcomplex.mem_ofSimplex_obj_iff]
      exact ‚ü®f, rfl‚ü©
    apply yonedaEquiv.symm.injective
    rw [Equiv.symm_apply_apply, SSet.yonedaEquiv_symm_map,
      Equiv.symm_apply_apply, ‚Üê s.w (homOfLE h)]
    dsimp
    simp only [‚Üê Category.assoc]; congr 1; simp only [Category.assoc]
    rw [‚Üê cancel_mono (Subcomplex.Œπ _)]
    apply yonedaEquiv.injective
    dsimp
    simp only [Category.assoc, Subcomplex.homOfLE_Œπ, Subcomplex.toOfSimplex_Œπ,
      yonedaEquiv_map_comp, Equiv.apply_symm_apply, map_toNœÄ_op_toN]

@[simp]
lemma desc_app_apply {n : ‚Ñï} (x : X _‚¶ãn‚¶å) :
    (desc s).app _ x = descApp _ x := rfl

@[reassoc (attr := simp)]
def fac (x : X.N) : (Subcomplex.ofSimplex x.2.1).Œπ ‚â´ desc s = s.Œπ.app x := by
  rw [‚Üê cancel_epi (Subcomplex.toOfSimplex _),
    Subcomplex.toOfSimplex_Œπ_assoc, yonedaEquiv_symm_comp, desc_app_apply,
    descApp_apply']
  apply yonedaEquiv.injective
  rw [Equiv.apply_symm_apply, yonedaEquiv_comp, Subcomplex.yonedaEquiv_toOfSimplex]

end isColimitCoconeN

noncomputable def isColimitCoconeN : IsColimit X.coconeN where
  desc := isColimitCoconeN.desc
  fac := isColimitCoconeN.fac
  uniq s m hm := isColimitCoconeN.hom_ext (by aesop)

variable {X} {Y : SSet.{u}} (f : X ‚ü∂ Y)

@[simps -isSimp coe]
noncomputable def mapN : X.N ‚Üío Y.N where
  toFun x := Y.toN (f.app _ x.2.1)
  monotone' x x' h := by
    simp only [N.le_iff, ofSimplex_toN, Subpresheaf.ofSection_le_iff,
      mem_ofSimplex_obj_iff] at h ‚ä¢
    obtain ‚ü®g, hf‚ü© := h
    exact ‚ü®g, by simp only [‚Üê hf, FunctorToTypes.naturality]‚ü©

@[simp]
lemma mapN_toN {n : ‚Ñï} (x : X _‚¶ãn‚¶å) :
    mapN f (X.toN x) = Y.toN (f.app _ x) := by
  have : IsSplitEpi (X.toNœÄ x) := isSplitEpi_of_epi _
  simp only [mapN_coe]
  apply le_antisymm
  ¬∑ simp only [N.le_iff, ofSimplex_toN, Subpresheaf.ofSection_le_iff,
      mem_ofSimplex_obj_iff]
    exact ‚ü®section_ (X.toNœÄ x), by rw [‚Üê FunctorToTypes.naturality, map_section_eq_toN_snd]‚ü©
  ¬∑ simp only [N.le_iff, ofSimplex_toN, Subpresheaf.ofSection_le_iff,
      mem_ofSimplex_obj_iff]
    exact ‚ü®X.toNœÄ x, by rw [‚Üê FunctorToTypes.naturality, map_toNœÄ_op_toN]‚ü©

@[simp]
lemma id_app {n : SimplexCategory·µí·µñ} (x : X.obj n) : NatTrans.app (ùüô X) n x = x := rfl

@[simp]
lemma mapN_id : mapN (ùüô X) = OrderHom.id := by
  ext x
  obtain ‚ü®n, x, rfl‚ü© := X.toN_surjective x
  simp

lemma mapN_mapN {Z : SSet.{u}} (g : Y ‚ü∂ Z) (x : X.N) :
    mapN g (mapN f x) = mapN (f ‚â´ g) x := by
  obtain ‚ü®n, x, rfl‚ü© := X.toN_surjective x
  simp

end SSet
