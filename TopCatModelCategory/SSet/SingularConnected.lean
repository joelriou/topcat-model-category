import TopCatModelCategory.SSet.ConnectedComponents
import TopCatModelCategory.SSet.PiZero
import TopCatModelCategory.TopCat.Adj
import TopCatModelCategory.TopCat.CoyonedaPreservesCoproducts

universe u

open Simplicial CategoryTheory Limits Opposite NNReal

namespace CategoryTheory

namespace ObjectProperty

variable {C D : Type*} [Category C] [Category D] {F G : C ‚•§ D} (œÑ : F ‚ü∂ G)

def isIsoNatTransApp : ObjectProperty C :=
  fun X ‚Ü¶ IsIso (œÑ.app X)

lemma closedUnderCoproducts_isIsoNatTransApp (J : Type*) [Category J]
    [PreservesColimitsOfShape J F] [PreservesColimitsOfShape J G] :
    ClosedUnderColimitsOfShape J (isIsoNatTransApp œÑ) := by
  intro K c hc hK
  have (j : J) : IsIso (œÑ.app (K.obj j)) := by simpa [isIsoNatTransApp] using hK j
  let e (j : J) : F.obj (K.obj j) ‚âÖ G.obj (K.obj j) := asIso (œÑ.app (K.obj j))
  obtain ‚ü®œÜ, hœÜ‚ü© : ‚àÉ (œÜ : G.obj c.pt ‚ü∂ F.obj c.pt),
      ‚àÄ (j : J), G.map (c.Œπ.app j) ‚â´ œÜ = (e j).inv ‚â´ F.map (c.Œπ.app j) :=
    ‚ü®(isColimitOfPreserves G hc).desc (Cocone.mk _
      { app j := (e j).inv ‚â´ F.map (c.Œπ.app j)
        naturality j‚ÇÅ j‚ÇÇ f := by
          dsimp [e]
          rw [Category.comp_id, IsIso.eq_inv_comp, NatIso.naturality_2'_assoc, ‚Üê c.w f,
            Functor.map_comp] }),
      (isColimitOfPreserves G hc).fac _‚ü©
  exact ‚ü®œÜ, (isColimitOfPreserves F hc).hom_ext (fun j ‚Ü¶ by simp [hœÜ, e]),
    (isColimitOfPreserves G hc).hom_ext (fun j ‚Ü¶ by simp [reassoc_of% hœÜ, e])‚ü©

end ObjectProperty

end CategoryTheory

@[simp]
lemma NNReal.sum_coe {Œ± : Type*} [Fintype Œ±] (f : Œ± ‚Üí ‚Ñù‚â•0) :
    (Finset.univ.sum f).1 = Finset.univ.sum (fun i ‚Ü¶ (f i).1) := by
  let coe‚Ñù : ‚Ñù‚â•0 ‚Üí+ ‚Ñù := AddMonoidHom.mk' (fun (x : ‚Ñù‚â•0) ‚Ü¶ x.1) (by aesop)
  apply map_sum coe‚Ñù

namespace SSet

instance (n : ‚Ñï) : PathConnectedSpace |Œî[n]| :=
  ‚¶ãn‚¶å.toTopHomeo.symm.surjective.pathConnectedSpace (by continuity)

lemma œÄ‚ÇÄ.eq_of_path {X : TopCat.{u}} {x y : X} (p : _root_.Path x y) :
    œÄ‚ÇÄ.mk (TopCat.toSSetObj‚ÇÄEquiv.symm x) =
      œÄ‚ÇÄ.mk (TopCat.toSSetObj‚ÇÄEquiv.symm y) := by
  let e := stdSimplex.simplexCategoryToTopObjHomeoUnitInterval.{u}
  refine œÄ‚ÇÄ.sound
    ((TopCat.toSSetObjEquiv _ _).symm (p.comp (ContinuousMap.comp ‚ü®_, continuous_uliftDown‚ü©
    ‚ü®_, stdSimplex.simplexCategoryToTopObjHomeoUnitInterval.{u}.continuous_toFun‚ü©))) ?_ ?_
  ¬∑ apply TopCat.toSSetObj‚ÇÄEquiv.injective
    dsimp
    rw [TopCat.toSSetObj‚ÇÄEquiv_toSSet_obj_Œ¥_one]
    change p (e (e.symm 0)).1 = _
    aesop
  ¬∑ apply TopCat.toSSetObj‚ÇÄEquiv.injective
    dsimp
    rw [TopCat.toSSetObj‚ÇÄEquiv_toSSet_obj_Œ¥_zero]
    change p (e (e.symm 1)).1 = _
    aesop

variable (X : SSet.{u})

lemma surjective_mapœÄ‚ÇÄ_sSetTopAdj_unit_app :
    Function.Surjective (mapœÄ‚ÇÄ (sSetTopAdj.unit.app X)) := by
  intro x
  obtain ‚ü®x, rfl‚ü© := x.mk_surjective
  obtain ‚ü®x, rfl‚ü© := TopCat.toSSetObj‚ÇÄEquiv.symm.surjective x
  obtain ‚ü®‚ü®‚ü®n‚ü©, s‚ü©, x, rfl‚ü© := Types.jointly_surjective_of_isColimit
    (isColimitOfPreserves (toTop ‚ãô forget _)
    (X.isColimitCoconeFromElementsOp)) x
  induction n using SimplexCategory.rec with | _ n
  dsimp at x
  refine ‚ü®œÄ‚ÇÄ.mk (X.map (‚¶ã0‚¶å.const ‚¶ãn‚¶å 0).op s), ?_‚ü©
  dsimp [-TopCat.toSSetObj‚ÇÄEquiv_symm_apply]
  let x‚ÇÄ := (toTop.map (SSet.stdSimplex.map (‚¶ã0‚¶å.const ‚¶ãn‚¶å 0)) (by exact default))
  refine Eq.trans ?_ (congr_arg (mapœÄ‚ÇÄ (TopCat.toSSet.map (toTop.map (yonedaEquiv.symm s))))
    (œÄ‚ÇÄ.eq_of_path (PathConnectedSpace.somePath x‚ÇÄ x)))
  simp only [TopCat.toSSetObj‚ÇÄEquiv_symm_apply, mapœÄ‚ÇÄ_mk]
  congr
  have := congr_fun (congr_app (sSetTopAdj.unit.naturality (yonedaEquiv.symm s)) (op ‚¶ã0‚¶å))
    (stdSimplex.obj‚ÇÄEquiv.symm 0)
  dsimp at this
  convert this
  apply TopCat.toSSetObj‚ÇÄEquiv.injective
  dsimp [TopCat.toSSetObj‚ÇÄEquiv, x‚ÇÄ]
  let f : ‚¶ã0‚¶å ‚ü∂ ‚¶ãn‚¶å := SimplexCategory.const _ _ 0
  have : toTop.{u}.map (SSet.stdSimplex.map f) =
    TopCat.ofHom ((TopCat.toSSetObjEquiv _ _
      (((sSetTopAdj.unit.app Œî[n]).app (op ‚¶ã0‚¶å)) (yonedaEquiv (SSet.stdSimplex.map f)))).comp
      (toContinuousMap ‚¶ã0‚¶å.toTopHomeo)) := by
    ext x‚ÇÄ
    have h‚ÇÅ : (stdSimplex.{u}.map f).app (op ‚¶ã0‚¶å) (yonedaEquiv (ùüô Œî[0])) =
      yonedaEquiv (SSet.stdSimplex.map f) := rfl
    have h‚ÇÇ := congr_fun (congr_app (sSetTopAdj.unit.naturality (SSet.stdSimplex.map f)) (op ‚¶ã0‚¶å))
      (yonedaEquiv (ùüô _))
    dsimp at h‚ÇÇ ‚ä¢
    rw [‚Üê h‚ÇÅ, h‚ÇÇ]
    apply congr_arg (toTop.map (SSet.stdSimplex.map f))
    apply Subsingleton.elim
  rfl

def isIsoWhiskerRightSSetTopAdjUnitœÄ‚ÇÄFunctorApp : ObjectProperty SSet.{u} :=
  fun X ‚Ü¶ IsIso ((Functor.whiskerRight sSetTopAdj.{u}.unit œÄ‚ÇÄFunctor).app X)

lemma isIsoWhiskerRightSSetTopAdjUnitœÄ‚ÇÄFunctorApp_of_connected (X : SSet.{u})
    (hX : Subsingleton (œÄ‚ÇÄ X)) :
    isIsoWhiskerRightSSetTopAdjUnitœÄ‚ÇÄFunctorApp X := by
  simp only [isIsoWhiskerRightSSetTopAdjUnitœÄ‚ÇÄFunctorApp, Functor.comp_obj, Functor.id_obj,
    œÄ‚ÇÄFunctor_obj, Functor.whiskerRight_app, isIso_iff_bijective]
  exact ‚ü®Function.injective_of_subsingleton (Œ± := œÄ‚ÇÄ X) _,
      surjective_mapœÄ‚ÇÄ_sSetTopAdj_unit_app X‚ü©

lemma isIsoWhiskerRightSSetTopAdjUnitœÄ‚ÇÄFunctorApp_eq_top :
    isIsoWhiskerRightSSetTopAdjUnitœÄ‚ÇÄFunctorApp.{u} = ‚ä§ := by
  change ObjectProperty.isIsoNatTransApp _ = ‚ä§
  ext X
  simp only [Pi.top_apply, ¬´Prop¬ª.top_eq_true, iff_true]
  apply ObjectProperty.closedUnderCoproducts_isIsoNatTransApp
    (Functor.whiskerRight sSetTopAdj.unit œÄ‚ÇÄFunctor) (Discrete X.œÄ‚ÇÄ) (œÄ‚ÇÄ.isColimitCofan X)
  rintro ‚ü®c‚ü©
  apply isIsoWhiskerRightSSetTopAdjUnitœÄ‚ÇÄFunctorApp_of_connected
  dsimp
  infer_instance

lemma bijective_mapœÄ‚ÇÄ_sSetTopAdj_unit_app :
    Function.Bijective (mapœÄ‚ÇÄ (sSetTopAdj.unit.app X)) := by
  simp only [‚Üê isIso_iff_bijective]
  exact isIsoWhiskerRightSSetTopAdjUnitœÄ‚ÇÄFunctorApp_eq_top.ge _ (by simp)

end SSet
