import TopCatModelCategory.II
import TopCatModelCategory.TopCat.TopologyOrderHom
import TopCatModelCategory.SSet.NonDegenerateProdSimplex
import Mathlib.Topology.Category.TopCat.Basic
import Mathlib.Topology.Order.MonotoneContinuity
import Mathlib.Order.Fin.Tuple

universe u

open CategoryTheory Simplicial

lemma Topology.IsInducing.subtype {X : Type*} [TopologicalSpace X] (p : X ‚Üí Prop) :
    Topology.IsInducing (Subtype.val (p := p)) where
  eq_induced := rfl

namespace TopCat

section

variable (I : Type u) [Preorder I] [TopologicalSpace I]
  [OrderBot I] [OrderTop I]

namespace cosimp

abbrev obj (n : SimplexCategory) : Type u :=
  { f : Fin (n.len + 2) ‚Üío I // f 0 = ‚ä• ‚àß f (Fin.last _) = ‚ä§ }

variable {I} in
@[simps]
def obj‚ÇÅOrderIso : I ‚âÉo obj I ‚¶ã1‚¶å where
  toFun x := ‚ü®‚ü®![‚ä•, x, ‚ä§], by aesop‚ü©, by aesop‚ü©
  invFun f := f.1 1
  left_inv _ := rfl
  right_inv f := by
    ext i
    fin_cases i
    ¬∑ exact f.2.1.symm
    ¬∑ rfl
    ¬∑ exact f.2.2.symm
  map_rel_iff' {f g} := by simp [OrderHom.le_def, Fin.forall_fin_succ]

variable {I} in
@[simps]
def obj‚ÇÇEquiv : { x : I √ó I // x.1 ‚â§ x.2} ‚âÉ obj I ‚¶ã2‚¶å where
  toFun x := ‚ü®‚ü®![‚ä•, x.1.1, x.1.2, ‚ä§], by aesop‚ü©, by aesop‚ü©
  invFun f := ‚ü®‚ü®f.1 1, f.1 2‚ü©, f.1.2 (by simp)‚ü©
  left_inv _ := rfl
  right_inv f := by
    ext i
    fin_cases i
    ¬∑ exact f.2.1.symm
    ¬∑ rfl
    ¬∑ rfl
    ¬∑ exact f.2.2.symm

@[continuity]
lemma continuous_apply {n : SimplexCategory} (a : Fin (n.len + 2)) :
    Continuous (fun (f : obj I n) ‚Ü¶ f.1 a) :=
  (OrderHom.continuous_apply I a).comp continuous_induced_dom

variable {n m : SimplexCategory}

@[simps]
def map (f : n ‚ü∂ m) : obj I n ‚Üí obj I m :=
  fun g ‚Ü¶ ‚ü®g.1.comp (SimplexCategory.II.map f).unop.toOrderHom,
    by simpa [SimplexCategory.II] using g.2.1,
    by simpa [SimplexCategory.II] using g.2.2‚ü©

lemma continuous_map (f : n ‚ü∂ m) : Continuous (map I f) := by
  rw [(Topology.IsInducing.subtype _).continuous_iff,
    OrderHom.continuous_iff]
  continuity

end cosimp

@[simps]
def cosimp : CosimplicialObject TopCat.{u} where
  obj n := TopCat.of (cosimp.obj I n)
  map f := ConcreteCategory.ofHom ‚ü®cosimp.map I f, cosimp.continuous_map I f‚ü©

end

namespace cosimp

section

variable {I‚ÇÅ I‚ÇÇ I‚ÇÉ : Type u}
  [Preorder I‚ÇÅ] [TopologicalSpace I‚ÇÅ] [OrderBot I‚ÇÅ] [OrderTop I‚ÇÅ]
  [Preorder I‚ÇÇ] [TopologicalSpace I‚ÇÇ] [OrderBot I‚ÇÇ] [OrderTop I‚ÇÇ]
  [Preorder I‚ÇÉ] [TopologicalSpace I‚ÇÉ] [OrderBot I‚ÇÉ] [OrderTop I‚ÇÉ]
  (f : I‚ÇÅ ‚Üío I‚ÇÇ) (hf : Continuous f) (hf‚ÇÄ : f ‚ä• = ‚ä•) (hf‚ÇÅ : f ‚ä§ = ‚ä§)

def actionMap (n : SimplexCategory) :
    cosimp.obj I‚ÇÅ n ‚Üí cosimp.obj I‚ÇÇ n :=
  fun x ‚Ü¶ ‚ü®f.comp x.1, by simp [x.2.1, hf‚ÇÄ], by simp [x.2.2, hf‚ÇÅ]‚ü©

include hf in
lemma continuous_actionMap (n : SimplexCategory) :
    Continuous (cosimp.actionMap f hf‚ÇÄ hf‚ÇÅ n) := by
  rw [(Topology.IsInducing.subtype _).continuous_iff,
    OrderHom.continuous_iff]
  continuity

@[simps]
def action : cosimp I‚ÇÅ ‚ü∂ cosimp I‚ÇÇ where
  app n := ConcreteCategory.ofHom ‚ü®cosimp.actionMap f hf‚ÇÄ hf‚ÇÅ n,
    cosimp.continuous_actionMap f hf hf‚ÇÄ hf‚ÇÅ n‚ü©

@[reassoc]
lemma action_comp
    (g : I‚ÇÇ ‚Üío I‚ÇÉ) (hg : Continuous g) (hg‚ÇÄ : g ‚ä• = ‚ä•) (hg‚ÇÅ : g ‚ä§ = ‚ä§) :
    action f hf hf‚ÇÄ hf‚ÇÅ ‚â´ action g hg hg‚ÇÄ hg‚ÇÅ =
    action (g.comp f) (hg.comp hf) (by simp [hf‚ÇÄ, hg‚ÇÄ]) (by simp [hf‚ÇÅ, hg‚ÇÅ]) :=
  rfl

variable (I‚ÇÅ) in
lemma action_id :
    cosimp.action (OrderHom.id : I‚ÇÅ ‚Üío I‚ÇÅ) (by continuity) rfl rfl = ùüô _ :=
  rfl

lemma action_injective
    (g : I‚ÇÅ ‚Üío I‚ÇÇ) (hg : Continuous g) (hg‚ÇÄ : g ‚ä• = ‚ä•) (hg‚ÇÅ : g ‚ä§ = ‚ä§)
    (H : cosimp.action f hf hf‚ÇÄ hf‚ÇÅ = cosimp.action g hg hg‚ÇÄ hg‚ÇÅ) : f = g := by
  ext x
  exact congr_arg cosimp.obj‚ÇÅOrderIso.symm
    (congr_fun ((forget _).congr_map (NatTrans.congr_app H ‚¶ã1‚¶å))
    (cosimp.obj‚ÇÅOrderIso x))

def œÜ {n : ‚Ñï} (i : Fin (n + 2)) :
    ‚¶ãn‚¶å ‚ü∂ ‚¶ã1‚¶å :=
  SSet.stdSimplex.objEquiv (SSet.stdSimplex.objMk‚ÇÅ.{0} i)

lemma œÜ_eq_zero {n : ‚Ñï} (i : Fin (n + 2)) (j : Fin (n + 1)) (h : j.castSucc < i) :
    œÜ i j = 0 :=
  if_pos h

lemma œÜ_eq_one {n : ‚Ñï} (i : Fin (n + 2)) (j : Fin (n + 1)) (h : i ‚â§ j.castSucc) :
    œÜ i j = 1 :=
  if_neg (by simpa using h)

omit [TopologicalSpace I‚ÇÅ] in
lemma hœÜ {n : ‚Ñï} (i : Fin (n + 1)) (x : obj I‚ÇÅ ‚¶ãn‚¶å) :
    cosimp.map I‚ÇÅ (cosimp.œÜ i.castSucc) x = cosimp.obj‚ÇÅOrderIso (x.1 i.castSucc) := by
  apply cosimp.obj‚ÇÅOrderIso.symm.injective
  rw [OrderIso.symm_apply_apply]
  dsimp
  erw [obj‚ÇÅOrderIso_symm_apply]
  dsimp [map]
  congr
  dsimp [SimplexCategory.II]
  rw [SimplexCategory.II.map'_eq_castSucc_iff]
  constructor
  ¬∑ erw [œÜ_eq_one] <;> simp
  ¬∑ intro j hj
    erw [œÜ_eq_zero]
    ¬∑ simp
    ¬∑ simpa

lemma comp_forget_hom_ext
    {f g : cosimp I‚ÇÅ ‚ãô forget _ ‚ü∂ cosimp I‚ÇÇ ‚ãô forget _}
    (h : f.app ‚¶ã1‚¶å = g.app ‚¶ã1‚¶å) : f = g := by
  ext n x
  induction' n using SimplexCategory.rec with n
  dsimp
  apply Subtype.ext
  ext i
  obtain ‚ü®i, rfl‚ü© | rfl := Fin.eq_castSucc_or_eq_last i
  ¬∑ have (Œ± : cosimp I‚ÇÅ ‚ãô forget TopCat ‚ü∂ cosimp I‚ÇÇ ‚ãô forget TopCat) :
      (Œ±.app ‚¶ãn‚¶å x).1 i.castSucc =
          cosimp.obj‚ÇÅOrderIso.symm (Œ±.app ‚¶ã1‚¶å (cosimp.obj‚ÇÅOrderIso (x.1 i.castSucc))) := by
        have : Œ±.app _ (cosimp.map I‚ÇÅ (cosimp.œÜ i.castSucc) x) =
            (cosimp.map I‚ÇÇ (cosimp.œÜ i.castSucc) (Œ±.app _ x)) :=
          congr_fun ((forget _).congr_map (Œ±.naturality (cosimp.œÜ i.castSucc))) x
        dsimp at this
        rw [cosimp.hœÜ, cosimp.hœÜ] at this
        rw [this, OrderIso.symm_apply_apply]
    simp only [this, h]
  ¬∑ exact (f.app ‚¶ãn‚¶å x).2.2.trans ((g.app ‚¶ãn‚¶å x).2.2).symm

lemma hom_ext
    {f g : cosimp I‚ÇÅ ‚ü∂ cosimp I‚ÇÇ}
    (h : f.app ‚¶ã1‚¶å = g.app ‚¶ã1‚¶å) : f = g := by
  have : whiskerRight f (forget _) = whiskerRight g (forget _) :=
    comp_forget_hom_ext ((forget _).congr_map h)
  ext n x
  exact congr_fun (NatTrans.congr_app this n) x

end

variable {I‚ÇÅ I‚ÇÇ I‚ÇÉ : Type u}
  [PartialOrder I‚ÇÅ] [TopologicalSpace I‚ÇÅ] [OrderBot I‚ÇÅ] [OrderTop I‚ÇÅ]
  [PartialOrder I‚ÇÇ] [TopologicalSpace I‚ÇÇ] [OrderBot I‚ÇÇ] [OrderTop I‚ÇÇ]
  [PartialOrder I‚ÇÉ] [TopologicalSpace I‚ÇÉ] [OrderBot I‚ÇÉ] [OrderTop I‚ÇÉ]

namespace orderIso

section

variable (œÜ : cosimp I‚ÇÅ ‚ü∂ cosimp I‚ÇÇ)

def f : I‚ÇÅ ‚Üí I‚ÇÇ :=
  Function.comp cosimp.obj‚ÇÅOrderIso.symm (((forget _).map (œÜ.app ‚¶ã1‚¶å)).comp
    cosimp.obj‚ÇÅOrderIso)

lemma monotone_f : Monotone (f œÜ) := by
  intro x‚ÇÅ x‚ÇÇ h
  let y := cosimp.obj‚ÇÇEquiv ‚ü®‚ü®x‚ÇÅ, x‚ÇÇ‚ü©, h‚ü©
  convert (cosimp.obj‚ÇÇEquiv.symm ((œÜ.app _ y))).2
  ¬∑ have := (congr_fun ((forget _).congr_map (œÜ.naturality (cosimp.œÜ (1 : Fin 3).castSucc))) y)
    simp [cosimp.hœÜ, -Fin.castSucc_one, -Fin.reduceCastSucc] at this
    apply cosimp.obj‚ÇÅOrderIso.injective
    dsimp at this
    simp [f, ‚Üê this]
    rfl
  ¬∑ have := (congr_fun ((forget _).congr_map (œÜ.naturality (cosimp.œÜ (2 : Fin 3).castSucc))) y)
    simp [cosimp.hœÜ, -Fin.castSucc_one, -Fin.reduceCastSucc] at this
    apply cosimp.obj‚ÇÅOrderIso.injective
    dsimp at this
    simp [f, ‚Üê this]
    rfl

end

variable (I‚ÇÅ) in
@[simp]
lemma f_id (x : I‚ÇÅ) :
    f (ùüô (cosimp I‚ÇÅ)) x = x := rfl

@[simp]
lemma f_f (œÜ : cosimp I‚ÇÅ ‚ü∂ cosimp I‚ÇÇ) (œà : cosimp I‚ÇÇ ‚ü∂ cosimp I‚ÇÉ) (x : I‚ÇÅ) :
    f œà (f œÜ x) = f (œÜ ‚â´ œà) x := by
  simp [f]

end orderIso

@[simps]
def orderIso (œÜ : cosimp I‚ÇÅ ‚âÖ cosimp I‚ÇÇ) : I‚ÇÅ ‚âÉo I‚ÇÇ where
  toFun := orderIso.f œÜ.hom
  invFun := orderIso.f œÜ.inv
  left_inv _ := by simp
  right_inv _ := by simp
  map_rel_iff' := ‚ü®fun h ‚Ü¶ by simpa using orderIso.monotone_f œÜ.inv h,
    fun h ‚Ü¶ orderIso.monotone_f œÜ.hom h‚ü©

@[simp]
lemma action_orderIso [OrderTopology I‚ÇÅ] [OrderTopology I‚ÇÇ] (œÜ : cosimp I‚ÇÅ ‚âÖ cosimp I‚ÇÇ) :
    action (orderIso œÜ).toOrderEmbedding.toOrderHom (orderIso œÜ).continuous
      (by simp) (by simp) = œÜ.hom := by
  apply ((whiskeringRight SimplexCategory _ _).obj (forget TopCat)).map_injective
  apply comp_forget_hom_ext
  ext x : 1
  apply cosimp.obj‚ÇÅOrderIso.symm.injective
  change cosimp.obj‚ÇÅOrderIso.symm (œÜ.hom.app _
    (cosimp.obj‚ÇÅOrderIso (cosimp.obj‚ÇÅOrderIso.symm x))) =
      cosimp.obj‚ÇÅOrderIso.symm (œÜ.hom.app _ x)
  rw [OrderIso.apply_symm_apply]

open orderIso in
lemma action_surjective [OrderTopology I‚ÇÅ] [OrderTopology I‚ÇÇ]
    (œÜ : cosimp I‚ÇÅ ‚âÖ cosimp I‚ÇÇ) :
    ‚àÉ (f : I‚ÇÅ ‚Üío I‚ÇÇ) (hf : Continuous f) (hf‚ÇÄ : f ‚ä• = ‚ä•) (hf‚ÇÅ : f ‚ä§ = ‚ä§),
    action f hf hf‚ÇÄ hf‚ÇÅ = œÜ.hom :=
  ‚ü®(orderIso œÜ).toOrderEmbedding.toOrderHom,
    (orderIso œÜ).continuous, by simp, by simp, by simp‚ü©

variable (I‚ÇÅ)

protected def Aut : Type u := I‚ÇÅ ‚âÉo I‚ÇÅ

namespace Aut

instance : Group (cosimp.Aut I‚ÇÅ) where
  mul f g := g.trans f
  inv f := f.symm
  one := .refl _
  mul_assoc _ _ _ := rfl
  one_mul _ := rfl
  mul_one _ := rfl
  inv_mul_cancel g := OrderIso.ext (by funext; apply g.left_inv)

end Aut

def autAction [OrderTopology I‚ÇÅ] : cosimp.Aut I‚ÇÅ ‚âÉ* Aut (cosimp I‚ÇÅ) where
  toFun g :=
    { hom := cosimp.action g.toOrderEmbedding.toOrderHom g.continuous (by simp) (by simp)
      inv := cosimp.action g.symm.toOrderEmbedding.toOrderHom g.symm.continuous (by simp) (by simp)
      hom_inv_id := by
        rw [action_comp]
        convert action_id I‚ÇÅ
        aesop
      inv_hom_id := by
        rw [action_comp]
        convert action_id I‚ÇÅ
        aesop }
  invFun e := orderIso e
  left_inv _ := rfl
  right_inv g := by aesop
  map_mul' _ _ := rfl

end cosimp

end TopCat
