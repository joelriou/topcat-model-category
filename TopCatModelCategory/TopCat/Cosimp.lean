import TopCatModelCategory.II
import TopCatModelCategory.TopCat.TopologyOrderHom
import Mathlib.Topology.Category.TopCat.Basic
import Mathlib.Order.Fin.Tuple

universe u

open CategoryTheory Simplicial

lemma Topology.IsInducing.subtype {X : Type*} [TopologicalSpace X] (p : X ‚Üí Prop) :
    Topology.IsInducing (Subtype.val (p := p)) where
  eq_induced := rfl

namespace TopCat

section

variable (I : Type u) [Preorder I] [TopologicalSpace I]
  [OrderBot I] [OrderTop I]

namespace cosimp

abbrev obj (n : SimplexCategory) : Type u :=
  { f : Fin (n.len + 2) ‚Üío I // f 0 = ‚ä• ‚àß f (Fin.last _) = ‚ä§ }

variable {I} in
@[simps]
def obj‚ÇÅEquiv : I ‚âÉo obj I ‚¶ã1‚¶å where
  toFun x := ‚ü®‚ü®![‚ä•, x, ‚ä§], by aesop‚ü©, by aesop‚ü©
  invFun f := f.1 1
  left_inv _ := rfl
  right_inv f := by
    ext i
    fin_cases i
    ¬∑ exact f.2.1.symm
    ¬∑ rfl
    ¬∑ exact f.2.2.symm
  map_rel_iff' {f g} := by simp [OrderHom.le_def, Fin.forall_fin_succ]

@[continuity]
lemma continuous_apply {n : SimplexCategory} (a : Fin (n.len + 2)) :
    Continuous (fun (f : obj I n) ‚Ü¶ f.1 a) :=
  (OrderHom.continuous_apply I a).comp continuous_induced_dom

variable {n m : SimplexCategory}

@[simps]
def map (f : n ‚ü∂ m) : obj I n ‚Üí obj I m :=
  fun g ‚Ü¶ ‚ü®g.1.comp (SimplexCategory.II.map f).unop.toOrderHom,
    by simpa [SimplexCategory.II] using g.2.1,
    by simpa [SimplexCategory.II] using g.2.2‚ü©

lemma continuous_map (f : n ‚ü∂ m) : Continuous (map I f) := by
  rw [(Topology.IsInducing.subtype _).continuous_iff,
    OrderHom.continuous_iff]
  continuity

end cosimp

@[simps]
def cosimp : CosimplicialObject TopCat.{u} where
  obj n := TopCat.of (cosimp.obj I n)
  map f := ConcreteCategory.ofHom ‚ü®cosimp.map I f, cosimp.continuous_map I f‚ü©

end

section

variable {I‚ÇÅ I‚ÇÇ I‚ÇÉ : Type u}
  [Preorder I‚ÇÅ] [TopologicalSpace I‚ÇÅ] [OrderBot I‚ÇÅ] [OrderTop I‚ÇÅ]
  [Preorder I‚ÇÇ] [TopologicalSpace I‚ÇÇ] [OrderBot I‚ÇÇ] [OrderTop I‚ÇÇ]
  [Preorder I‚ÇÉ] [TopologicalSpace I‚ÇÉ] [OrderBot I‚ÇÉ] [OrderTop I‚ÇÉ]
  (f : I‚ÇÅ ‚Üío I‚ÇÇ) (hf : Continuous f) (hf‚ÇÄ : f ‚ä• = ‚ä•) (hf‚ÇÅ : f ‚ä§ = ‚ä§)

def cosimp.action (n : SimplexCategory) :
    cosimp.obj I‚ÇÅ n ‚Üí cosimp.obj I‚ÇÇ n :=
  fun x ‚Ü¶ ‚ü®f.comp x.1, by simp [x.2.1, hf‚ÇÄ], by simp [x.2.2, hf‚ÇÅ]‚ü©

include hf in
lemma cosimp.continuous_action (n : SimplexCategory) :
    Continuous (cosimp.action f hf‚ÇÄ hf‚ÇÅ n) := by
  rw [(Topology.IsInducing.subtype _).continuous_iff,
    OrderHom.continuous_iff]
  continuity

@[simps]
def cosimpAction : cosimp I‚ÇÅ ‚ü∂ cosimp I‚ÇÇ where
  app n := ConcreteCategory.ofHom ‚ü®cosimp.action f hf‚ÇÄ hf‚ÇÅ n,
    cosimp.continuous_action f hf hf‚ÇÄ hf‚ÇÅ n‚ü©

@[reassoc]
lemma cosimpAction_comp (g : I‚ÇÇ ‚Üío I‚ÇÉ) (hg : Continuous g) (hg‚ÇÄ : g ‚ä• = ‚ä•) (hg‚ÇÅ : g ‚ä§ = ‚ä§) :
      cosimpAction f hf hf‚ÇÄ hf‚ÇÅ ‚â´ cosimpAction g hg hg‚ÇÄ hg‚ÇÅ =
    cosimpAction (g.comp f) (hg.comp hf) (by simp [hf‚ÇÄ, hg‚ÇÄ]) (by simp [hf‚ÇÅ, hg‚ÇÅ]) :=
  rfl

variable (I‚ÇÅ) in
lemma cosimpAction_id :
    cosimpAction (OrderHom.id : I‚ÇÅ ‚Üío I‚ÇÅ) (by continuity) rfl rfl = ùüô _ :=
  rfl

lemma cosimpAction_injective
    (g : I‚ÇÅ ‚Üío I‚ÇÇ) (hg : Continuous g) (hg‚ÇÄ : g ‚ä• = ‚ä•) (hg‚ÇÅ : g ‚ä§ = ‚ä§)
    (H : cosimpAction f hf hf‚ÇÄ hf‚ÇÅ = cosimpAction g hg hg‚ÇÄ hg‚ÇÅ) : f = g := by
  ext x
  exact congr_arg cosimp.obj‚ÇÅEquiv.symm
    (congr_fun ((forget _).congr_map (NatTrans.congr_app H ‚¶ã1‚¶å))
    (cosimp.obj‚ÇÅEquiv x))

/-lemma cosimp_comp_forget_hom_ext
    {f g : cosimp I‚ÇÅ ‚ãô forget _ ‚ü∂ cosimp I‚ÇÇ ‚ãô forget _}
    (h : f.app ‚¶ã1‚¶å = g.app ‚¶ã1‚¶å) : f = g := by
  ext n x
  induction' n using SimplexCategory.rec with n
  dsimp
  apply Subtype.ext
  ext i
  obtain ‚ü®i, rfl‚ü© | rfl := Fin.eq_castSucc_or_eq_last i
  ¬∑ have (Œ± : cosimp I‚ÇÅ ‚ãô forget TopCat ‚ü∂ cosimp I‚ÇÇ ‚ãô forget TopCat) :
      (Œ±.app ‚¶ãn‚¶å x).1 i.castSucc =
        cosimp.obj‚ÇÅEquiv.symm (Œ±.app ‚¶ã1‚¶å (cosimp.obj‚ÇÅEquiv (x.1 i.castSucc))) := by
        let œÜ : ‚¶ã1‚¶å ‚ü∂ ‚¶ãn‚¶å := sorry
        have := congr_fun ((forget _).congr_map (Œ±.naturality œÜ))
          (cosimp.obj‚ÇÅEquiv (x.1 i.castSucc))
        sorry
    simp only [this, h]
  ¬∑ exact (f.app ‚¶ãn‚¶å x).2.2.trans ((g.app ‚¶ãn‚¶å x).2.2).symm

lemma cosimp_hom_ext
    {f g : cosimp I‚ÇÅ ‚ü∂ cosimp I‚ÇÇ}
    (h : f.app ‚¶ã1‚¶å = g.app ‚¶ã1‚¶å) : f = g := by
  have : whiskerRight f (forget _) = whiskerRight g (forget _) :=
    cosimp_comp_forget_hom_ext ((forget _).congr_map h)
  ext n x
  exact congr_fun (NatTrans.congr_app this n) x-/

end

variable {I‚ÇÅ I‚ÇÇ : Type u}
  [PartialOrder I‚ÇÅ] [TopologicalSpace I‚ÇÅ] [OrderBot I‚ÇÅ] [OrderTop I‚ÇÅ]
  [PartialOrder I‚ÇÇ] [TopologicalSpace I‚ÇÇ] [OrderBot I‚ÇÇ] [OrderTop I‚ÇÇ]

/-lemma cosimpAction_surjective
    (œÜ : cosimp I‚ÇÅ ‚âÖ cosimp I‚ÇÇ) :
    ‚àÉ (f : I‚ÇÅ ‚Üío I‚ÇÇ) (hf : Continuous f) (hf‚ÇÄ : f ‚ä• = ‚ä•) (hf‚ÇÅ : f ‚ä§ = ‚ä§),
    cosimpAction f hf hf‚ÇÄ hf‚ÇÅ = œÜ.hom := by
  refine ‚ü®‚ü®Function.comp cosimp.obj‚ÇÅEquiv.symm (((forget _).map (œÜ.hom.app ‚¶ã1‚¶å)).comp
    cosimp.obj‚ÇÅEquiv), ?_‚ü©, ?_, ?_, ?_, ?_‚ü©
  ¬∑ sorry
  ¬∑ sorry
  ¬∑ simp
    sorry
  ¬∑ sorry
  ¬∑ sorry-/

end TopCat
