import TopCatModelCategory.SSet.MinimalFibrationsLemmas
import TopCatModelCategory.SSet.FiniteInduction
import TopCatModelCategory.TrivialBundleOver
import TopCatModelCategory.TopCat.SerreFibrationBundle
import TopCatModelCategory.TopCat.BoundaryClosedEmbeddings
import TopCatModelCategory.TopCat.ToTopExact
import TopCatModelCategory.ModelCategoryTopCat
import TopCatModelCategory.Pullback

universe u

open Simplicial CategoryTheory MorphismProperty HomotopicalAlgebra
  TopCat.modelCategory Limits Topology GeneratedByTopCat

namespace CategoryTheory

lemma Limits.PushoutCocone.isPushout_iff_nonempty_isColimit
    {C : Type*} [Category C]
    {S T‚ÇÅ T‚ÇÇ : C} {f‚ÇÅ : S ‚ü∂ T‚ÇÅ} {f‚ÇÇ : S ‚ü∂ T‚ÇÇ}
    (c : PushoutCocone f‚ÇÅ f‚ÇÇ) :
    IsPushout f‚ÇÅ f‚ÇÇ c.inl c.inr ‚Üî Nonempty (IsColimit c) :=
  ‚ü®fun sq ‚Ü¶ ‚ü®IsColimit.ofIsoColimit sq.isColimit (PushoutCocone.ext (Iso.refl _))‚ü©, fun h ‚Ü¶
    { w := c.condition
      isColimit' := ‚ü®IsColimit.ofIsoColimit h.some (PushoutCocone.ext (Iso.refl _))‚ü© }‚ü©

namespace Over

variable {C : Type*} [Category C] {B : C} {X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : Over B}
  {t : X‚ÇÅ ‚ü∂ X‚ÇÇ} {l : X‚ÇÅ ‚ü∂ X‚ÇÉ} {r : X‚ÇÇ ‚ü∂ X‚ÇÑ} {b : X‚ÇÉ ‚ü∂ X‚ÇÑ}

lemma isPushout_iff_forget [HasPushouts C] :
    IsPushout t l r b ‚Üî IsPushout t.left l.left r.left b.left :=
  ‚ü®fun sq ‚Ü¶ sq.map (Over.forget _), fun sq ‚Ü¶
    { w := by ext; exact sq.w
      isColimit' := ‚ü®by
        refine PushoutCocone.IsColimit.mk _
          (fun s ‚Ü¶ Over.homMk (sq.desc s.inl.left s.inr.left
            ((Over.forget _).congr_map s.condition)) (by apply sq.hom_ext <;> simp))
          (by aesop) (by aesop) (fun s m h‚ÇÅ h‚ÇÇ ‚Ü¶ ?_)
        ext
        apply sq.hom_ext
        ¬∑ simp [‚Üê h‚ÇÅ]
        ¬∑ simp [‚Üê h‚ÇÇ]‚ü© }‚ü©

instance {D : Type*} [Category D] [HasPushouts C] [HasPushouts D]
    (F : C ‚•§ D) [PreservesColimitsOfShape WalkingSpan F] (X : C) :
    PreservesColimitsOfShape WalkingSpan (Over.post (X := X) F) := by
  suffices ‚àÄ {S T‚ÇÅ T‚ÇÇ : Over X} (f‚ÇÅ : S ‚ü∂ T‚ÇÅ) (f‚ÇÇ : S ‚ü∂ T‚ÇÇ),
      PreservesColimit (span f‚ÇÅ f‚ÇÇ) (Over.post (X := X) F) from
    ‚ü®fun {K} ‚Ü¶ preservesColimit_of_iso_diagram _ (diagramIsoSpan K).symm‚ü©
  intro S T‚ÇÅ T‚ÇÇ f‚ÇÅ f‚ÇÇ
  constructor
  intro c hc
  refine ‚ü®(PushoutCocone.isColimitMapCoconeEquiv _ _).2
    (((PushoutCocone.isPushout_iff_nonempty_isColimit _).1 ?_).some)‚ü©
  rw [isPushout_iff_forget]
  exact (PushoutCocone.isPushout_iff_nonempty_isColimit _).2
    ‚ü®(PushoutCocone.isColimitMapCoconeEquiv _ _).1
      (isColimitOfPreserves (Over.forget _ ‚ãô F) hc)‚ü©

instance {X Y : C} (f : X ‚ü∂ Y) [HasPushouts C] :
    PreservesColimitsOfShape WalkingSpan (Over.map f) where
  preservesColimit {K} := ‚ü®fun {c} hc ‚Ü¶ ‚ü®by
    have := isColimitOfPreserves (Over.forget _ ) hc
    exact isColimitOfReflects (Over.forget _) this
    ‚ü©‚ü©

end Over

end CategoryTheory

def DeltaGenerated'.isLimitBinaryFanOfIsEmpty
    {X Y : DeltaGenerated'.{u}} {c : BinaryFan X Y}
    (hX : IsEmpty ((forget _).obj X)) (_ : IsEmpty ((forget _).obj c.pt)) :
    IsLimit c :=
  have h {T : DeltaGenerated'.{u}} (f : T ‚ü∂ X) (t : (forget _).obj T) : False := by
    have := Function.isEmpty ((forget _).map f)
    exact isEmptyElim (Œ± := ((forget _).obj T)) t
  BinaryFan.IsLimit.mk _ (fun {T} f‚ÇÅ _ ‚Ü¶ TopCat.ofHom ‚ü®fun t ‚Ü¶ (h f‚ÇÅ t).elim, by
      rw [continuous_iff_continuousAt]
      intro t
      exact (h f‚ÇÅ t).elim‚ü©)
    (fun f‚ÇÅ _ ‚Ü¶ by ext t; exact (h f‚ÇÅ t).elim)
    (fun f‚ÇÅ _ ‚Ü¶ by ext t; exact (h f‚ÇÅ t).elim)
    (fun f‚ÇÅ _ _ _ _ ‚Ü¶ by ext t; exact (h f‚ÇÅ t).elim)

def DeltaGenerated'.isInitialOfIsEmpty (X : DeltaGenerated'.{u})
    [IsEmpty ((forget _).obj X)] :
    IsInitial X :=
  have h {T : DeltaGenerated'.{u}} (f : T ‚ü∂ X) (t : (forget _).obj T) : False := by
    have := Function.isEmpty ((forget _).map f)
    exact isEmptyElim (Œ± := ((forget _).obj T)) t
  IsInitial.ofUniqueHom
    (fun _ ‚Ü¶ TopCat.ofHom ‚ü®fun (x : (forget _).obj X) ‚Ü¶ isEmptyElim x, by
      rw [continuous_iff_continuousAt]
      intro (x : (forget _).obj X)
      exact isEmptyElim x‚ü©)
    (fun _ f ‚Ü¶ by
      ext (x : (forget _).obj X)
      dsimp
      exact isEmptyElim x)

lemma DeltaGenerated'.isEmpty_of_isInitial {X : DeltaGenerated'.{u}}
    (hX : IsInitial X) : IsEmpty ((forget _).obj X) := by
  let f : X ‚ü∂ GeneratedByTopCat.of PEmpty := hX.to _
  exact Function.isEmpty f

namespace DeltaGenerated'

lemma trivialBundlesWithFiber_overLocally_of_isPushout'
    {E B F : DeltaGenerated'.{u}} {X‚ÇÅ X‚ÇÇ X‚ÇÉ : Over B} {t : X‚ÇÅ ‚ü∂ X‚ÇÇ}
    {l : X‚ÇÅ ‚ü∂ X‚ÇÉ} (sq : IsPushout t.left l.left X‚ÇÇ.hom X‚ÇÉ.hom)
    (hl : TopCat.closedEmbeddings (toTopCat.map l.left)) (p : E ‚ü∂ B)
    [PreservesColimit (span t l) (Over.pullback p)]
    (h‚ÇÇ : ((trivialBundlesWithFiber F).objectPropertyOver p).overLocally grothendieckTopology X‚ÇÇ)
    (h‚ÇÉ : (trivialBundlesWithFiber F).objectPropertyOver p X‚ÇÉ)
    {U : DeltaGenerated'.{u}} (j : U ‚ü∂ X‚ÇÉ.left) (hj : openImmersions j)
    (l' : X‚ÇÅ.left ‚ü∂ U) (fac : l' ‚â´ j = l.left) (œÅ : U ‚ü∂ X‚ÇÅ.left) (fac' : l' ‚â´ œÅ = ùüô _) :
    ((trivialBundlesWithFiber F).objectPropertyOver p).overLocally grothendieckTopology
      (Over.mk (ùüô B)) := by
  sorry

lemma trivialBundlesWithFiber_overLocally_of_isPushout
    {E B F : DeltaGenerated'.{u}} {X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : Over B} {t : X‚ÇÅ ‚ü∂ X‚ÇÇ}
    {l : X‚ÇÅ ‚ü∂ X‚ÇÉ} {r : X‚ÇÇ ‚ü∂ X‚ÇÑ} {b : X‚ÇÉ ‚ü∂ X‚ÇÑ} (sq : IsPushout t l r b)
    (hl : TopCat.closedEmbeddings (toTopCat.map l.left)) (p : E ‚ü∂ B)
    [PreservesColimit (span t l) (Over.pullback p)]
    (h‚ÇÇ : ((trivialBundlesWithFiber F).objectPropertyOver p).overLocally grothendieckTopology X‚ÇÇ)
    (h‚ÇÉ : (trivialBundlesWithFiber F).objectPropertyOver p X‚ÇÉ)
    {U : DeltaGenerated'.{u}} (j : U ‚ü∂ X‚ÇÉ.left) (hj : openImmersions j)
    (l'' : X‚ÇÅ.left ‚ü∂ U) (fac : l'' ‚â´ j = l.left) (œÅ : U ‚ü∂ X‚ÇÅ.left) (fac' : l'' ‚â´ œÅ = ùüô _) :
    ((trivialBundlesWithFiber F).objectPropertyOver p).overLocally grothendieckTopology X‚ÇÑ := by
  rw [Over.isPushout_iff_forget] at sq
  let Y‚ÇÅ := Over.mk (t.left ‚â´ r.left)
  let Y‚ÇÇ := Over.mk (r.left)
  let Y‚ÇÉ := Over.mk (b.left)
  let t' : Y‚ÇÅ ‚ü∂ Y‚ÇÇ := Over.homMk t.left
  let l' : Y‚ÇÅ ‚ü∂ Y‚ÇÉ := Over.homMk l.left sq.w.symm
  let Z‚ÇÑ := pullback p X‚ÇÑ.hom
  let p' : Z‚ÇÑ ‚ü∂ X‚ÇÑ.left := pullback.snd _ _
  have sq' : IsPullback (pullback.fst _ _) p' p X‚ÇÑ.hom := IsPullback.of_hasPullback _ _
  replace sq : IsPushout t'.left l'.left Y‚ÇÇ.hom Y‚ÇÉ.hom := sq
  have : PreservesColimit (span t' l' ‚ãô Over.map X‚ÇÑ.hom)
      (CategoryTheory.Over.pullback p ‚ãô Over.forget E) := by
    have e : (span t' l' ‚ãô Over.map X‚ÇÑ.hom) ‚âÖ span t l :=
      spanCompIso _ _ _ ‚â™‚â´ spanExt (by exact Over.isoMk (Iso.refl _))
        (by exact Over.isoMk (Iso.refl _)) (by exact Over.isoMk (Iso.refl _))
        (by ext : 1; simp [t']) (by ext : 1; simp [l'])
    apply preservesColimit_of_iso_diagram _ e.symm
  have : PreservesColimit (span t' l') (CategoryTheory.Over.pullback p' ‚ãô Over.forget _) :=
    preservesColimit_of_natIso _ (Over.pullbackCompForgetOfIsPullback sq').symm
  have : PreservesColimit (span t' l') (CategoryTheory.Over.pullback p') :=
    preservesColimit_of_reflects_of_preserves _ (Over.forget _)
  have := trivialBundlesWithFiber_overLocally_of_isPushout' sq hl p' (F := F) (by
    rw [‚Üê overLocally_objectPropertyOver_over_map_obj_iff _ _ sq']
    exact ObjectProperty.prop_of_iso _ (by exact Over.isoMk (Iso.refl _)) h‚ÇÇ) (by
    rw [objectPropertyOver_iff_map_of_isPullback _ sq']
    exact ObjectProperty.prop_of_iso _ (by exact Over.isoMk (Iso.refl _)) h‚ÇÉ)
    j hj l'' fac œÅ fac'
  rw [‚Üê overLocally_objectPropertyOver_over_map_obj_iff _ _ sq'] at this
  exact ObjectProperty.prop_of_iso _ (Over.isoMk (Iso.refl _)) this

end DeltaGenerated'

namespace SSet

variable {E B : SSet.{u}} {p : E ‚ü∂ B} {F : SSet.{u}}
  (œÑ : ‚àÄ ‚¶Én : ‚Ñï‚¶Ñ (œÉ : Œî[n] ‚ü∂ B), TrivialBundleWithFiberOver F p œÉ)

namespace MinimalFibrationLocTrivial

section

noncomputable abbrev pull (_ : ‚àÄ ‚¶Én : ‚Ñï‚¶Ñ (œÉ : Œî[n] ‚ü∂ B), TrivialBundleWithFiberOver F p œÉ) :=
    Over.pullback ((toDeltaGenerated.map p))

variable (A : Over (toDeltaGenerated.obj B))

noncomputable def pullObj : DeltaGenerated'.{u} := ((pull œÑ).obj A).left

noncomputable def Œπ : pullObj œÑ A ‚ü∂ toDeltaGenerated.obj E := ((pull œÑ).obj A).hom

noncomputable def œÄ : pullObj œÑ A ‚ü∂ A.left := pullback.fst _ _

lemma isPullback : IsPullback (Œπ œÑ A) (œÄ œÑ A) (toDeltaGenerated.map p) A.hom :=
  (IsPullback.of_hasPullback _ _).flip

variable (p F) in
def IsTrivial {A : DeltaGenerated'} (f : A ‚ü∂ toDeltaGenerated.obj B) : Prop :=
  Nonempty (TrivialBundleWithFiberOver (toDeltaGenerated.obj F) (toDeltaGenerated.map p) f)

instance (X : Type u) [IsEmpty X] [TopologicalSpace X] [DeltaGeneratedSpace' X] :
    IsEmpty ((forget DeltaGenerated').obj (.of X)) := by assumption

lemma isTrivial_of_isEmpty (h : IsEmpty ((forget _).obj A.left)) :
    IsTrivial p F A.hom := by
  let œÜ := ((forget _).map (pullback.fst (X := A.left) A.hom (toDeltaGenerated.map p)))
  have := Function.isEmpty œÜ
  exact
    ‚ü®{sq := (IsPullback.of_hasPullback _ _).flip
      h :=
      { r := (DeltaGenerated'.isInitialOfIsEmpty _).to _
        isLimit :=DeltaGenerated'.isLimitBinaryFanOfIsEmpty h (by assumption) } }‚ü©

lemma isTrivial_of_fac {A' A : DeltaGenerated'} {f : A ‚ü∂ toDeltaGenerated.obj B}
    (h : IsTrivial p F f) (j : A' ‚ü∂ A)
    (f' : A' ‚ü∂ toDeltaGenerated.obj B)
    (fac : j ‚â´ f = f')  :
    IsTrivial p F f' := by
  subst fac
  exact ‚ü®h.some.pullback' _‚ü©

def IsLocTrivial : Prop :=
  (trivialBundlesWithFiber (toDeltaGenerated.obj F)).locallyTarget
    GeneratedByTopCat.grothendieckTopology (œÄ œÑ A)

variable (p F) in
def IsLocTrivialAt {A : DeltaGenerated'} (f : A ‚ü∂ toDeltaGenerated.obj B) (a : A) : Prop :=
  ‚àÉ (U : DeltaGenerated') (i : U ‚ü∂ A)
        (_ : GeneratedByTopCat.openImmersions i) (_ : a ‚àà Set.range i),
        IsTrivial p F (i ‚â´ f)

lemma isLocTrivial_iff :
    IsLocTrivial œÑ A ‚Üî
      ‚àÄ (a : A.left), IsLocTrivialAt p F A.hom a := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ intro a
    obtain ‚ü®C, hC‚ü© := h
    obtain ‚ü®i, u, rfl‚ü© := C.exists_eq a
    refine ‚ü®C.U i, C.p i, C.hp i, ‚ü®_, rfl‚ü©, ?_‚ü©
    have hi := hC (C.p i) (Sieve.ofArrows_mk _ _ _)
    rw [mem_sieveLocallyTarget_iff] at hi
    obtain ‚ü®hi‚ü© := hi
    exact ‚ü®{
      E' := _
      p' := hi.l
      t := hi.t ‚â´ Œπ œÑ A
      sq := hi.sq.paste_horiz (isPullback œÑ A)
      h := hi.hl.some
    }‚ü©
  ¬∑ choose U i hi hU' t using h
    refine ‚ü®{
      Œπ := A.left
      U := U
      p := i
      hp := hi }, ?_‚ü©
    simp only [Sieve.ofArrows_le_iff]
    intro a
    rw [mem_sieveLocallyTarget_iff]
    refine ‚ü®?_‚ü©
    have ip := (t a).some
    exact {
      obj := _
      t := _
      l := _
      sq := (IsPullback.of_hasPullback (i a) (œÄ œÑ A)).flip
      hl := ‚ü®(t a).some.trivialBundleWithFiber
          ((IsPullback.of_hasPullback _ _).flip.paste_horiz (isPullback œÑ A))‚ü© }

variable {œÑ A} in
lemma IsTrivial.isLocTrivial (hA : IsTrivial p F A.hom) : IsLocTrivial œÑ A :=
  MorphismProperty.le_locallyTarget _ _ _
    ‚ü®hA.some.trivialBundleWithFiber (IsPullback.of_hasPullback _ _).flip‚ü©

section

variable {Z : DeltaGenerated'.{u}} {t : Z ‚ü∂ toDeltaGenerated.obj E}
    {l : Z ‚ü∂ A.left} (sq : IsPullback t l (toDeltaGenerated.map p) A.hom)

include sq

noncomputable def objIso : pullObj œÑ A ‚âÖ Z :=
  (IsPullback.exists_iso_of_isos (isPullback œÑ A) sq (Iso.refl _)
    (Iso.refl _) (Iso.refl _) (by simp) (by simp)).choose

@[reassoc (attr := simp)]
lemma objIso_hom_comp_eq_œÄ : (objIso œÑ A sq).hom ‚â´ l = œÄ œÑ A := by
  simpa using ((IsPullback.exists_iso_of_isos (isPullback œÑ A) sq (Iso.refl _)
    (Iso.refl _) (Iso.refl _) (by simp) (by simp)).choose_spec.2).symm

end

end

section

variable {A} {K‚ÇÄ A‚ÇÄ K : Over (toDeltaGenerated.obj B)}
  {t : K‚ÇÄ ‚ü∂ A‚ÇÄ} {l : K‚ÇÄ ‚ü∂ K} {r : A‚ÇÄ ‚ü∂ A} {b : K ‚ü∂ A}
  (sq : IsPushout t l r b)

include sq

lemma isLocTrivial_of_isPushout
    (hl : TopCat.closedEmbeddings (DeltaGenerated'.toTopCat.map l.left))
    (hK : IsTrivial p F K.hom) (hA‚ÇÄ : IsLocTrivial œÑ A‚ÇÄ)
    (hsq : PreservesColimit (span t l) (CategoryTheory.Over.pullback (toDeltaGenerated.map p)))
    {U : DeltaGenerated'.{u}} (i : U ‚ü∂ K.left) (hi : GeneratedByTopCat.openImmersions i)
    (l' : K‚ÇÄ.left ‚ü∂ U) (fac : l' ‚â´ i = l.left) (œÅ : U ‚ü∂ K‚ÇÄ.left) (fac' : l' ‚â´ œÅ = ùüô _) :
    IsLocTrivial œÑ A := by
  rw [isLocTrivial_iff] at hA‚ÇÄ ‚ä¢
  intro a
  obtain (‚ü®a‚ÇÄ, rfl‚ü© | ‚ü®k, rfl, hk‚ü©) := Types.eq_or_eq_of_isPushout'
    (sq.map (Over.forget _ ‚ãô DeltaGenerated'.toTopCat ‚ãô forget _)) a
  ¬∑ dsimp at a‚ÇÄ
    dsimp
    sorry
  ¬∑ dsimp at k hk ‚ä¢
    let e : ((Set.range l.left)·∂ú : Set _) ‚âÉ‚Çú ((Set.range r.left)·∂ú : Set _) :=
      TopCat.homeoComplOfIsPushoutOfIsClosedEmbedding
        (sq.map (Over.forget _ ‚ãô DeltaGenerated'.toTopCat)).flip hl
    have hr : IsOpen ((Set.range r.left)·∂ú) :=
      TopCat.closedEmbeddings.isOpen
        (TopCat.isClosedEmbedding_of_isPushout
          (sq.flip.map (Over.forget _ ‚ãô DeltaGenerated'.toTopCat)) hl)
    have : DeltaGeneratedSpace' ((Set.range l.left)·∂ú : Set _) :=
      IsOpen.isGeneratedBy _ (by simpa only [isOpen_compl_iff] using hl.isClosed_range)
    refine ‚ü®.of ((Set.range l.left)·∂ú : Set _),
      TopCat.ofHom (ContinuousMap.comp ‚ü®_, continuous_subtype_val‚ü© ‚ü®_, e.continuous‚ü©),
      (IsOpenEmbedding.comp (IsOpen.isOpenEmbedding_subtypeVal hr) e.isOpenEmbedding :),
      ‚ü®‚ü®k, hk‚ü©, rfl‚ü©,
      isTrivial_of_fac hK (TopCat.ofHom ‚ü®_, continuous_subtype_val‚ü©) _
      (by rw [‚Üê Over.w b]; rfl)‚ü©

end

lemma isLocTrivial' {Z : SSet.{u}} [IsFinite Z] (a : Z ‚ü∂ B) :
    IsLocTrivial œÑ (Over.mk (toDeltaGenerated.map a)) := by
  induction Z using SSet.finite_induction with
  | hP‚ÇÄ X =>
    refine (isTrivial_of_isEmpty _
      (DeltaGenerated'.isEmpty_of_isInitial ?_)).isLocTrivial
    dsimp
    exact IsInitial.isInitialObj _ _ (SSet.isInitialOfNotNonempty
      (by rwa [SSet.notNonempty_iff_hasDimensionLT_zero]))
  | @hP Z‚ÇÄ Z i n j j‚ÇÄ sq _ h‚ÇÄ =>
    let t : Over.mk (j ‚â´ i ‚â´ a) ‚ü∂ Over.mk (i ‚â´ a) := Over.homMk j
    let b : Over.mk (j‚ÇÄ ‚â´ a) ‚ü∂ Over.mk a := Over.homMk j‚ÇÄ
    have sq' : IsPushout (Over.homMk j : Over.mk (j ‚â´ i ‚â´ a) ‚ü∂ Over.mk (i ‚â´ a))
        (Over.homMk (Subcomplex.Œπ _) (by simp [sq.w_assoc]))
        (Over.homMk (by exact i)) (Over.homMk j‚ÇÄ : Over.mk (j‚ÇÄ ‚â´ a) ‚ü∂ Over.mk a) := by
      rwa [Over.isPushout_iff_forget ]
    refine isLocTrivial_of_isPushout œÑ (sq'.map (Over.post (SSet.toDeltaGenerated)))
      ?_ ‚ü®(œÑ (j‚ÇÄ ‚â´ a)).map toDeltaGenerated‚ü© (h‚ÇÄ _) ?_ (U := ?_) ?_ ?_ ?_ ?_ ?_ ?_
    ¬∑ dsimp
      apply closedEmbeddings_toObj_map_of_mono
    ¬∑ dsimp
      sorry
    -- the next goals are about taking the complement of the isobarycenter in the simplex
    ¬∑ sorry
    ¬∑ sorry
    ¬∑ sorry
    ¬∑ sorry
    ¬∑ sorry
    ¬∑ sorry
    ¬∑ sorry

include œÑ  in
lemma isLocTrivial {Z : SSet.{u}} [IsFinite Z] (a : Z ‚ü∂ B) :
   ((trivialBundlesWithFiber (toDeltaGenerated.obj F)).objectPropertyOver
    (toDeltaGenerated.map p)).overLocally grothendieckTopology
    (Over.mk (toDeltaGenerated.map a)) := by
  have := œÑ
  sorry

end MinimalFibrationLocTrivial

variable (p) in
open MinimalFibrationLocTrivial MorphismProperty in
include œÑ in
lemma fibration_toTop_map_of_trivialBundle_over_simplices [IsFinite B] :
    Fibration (toTop.map p) := by
  apply DeltaGenerated'.fibration_toTopCat_map_of_locallyTarget_trivialBundle
    (p := toDeltaGenerated.map p)
  apply locallyTarget_monotone (trivialBundlesWithFiber_le_trivialBundles (toDeltaGenerated.obj F))
  rw [‚Üê MorphismProperty.overLocally_objectPropertyOver_iff_locallyTarget _ _ _
    (Over.mk (ùüô (toDeltaGenerated.obj B))) IsPullback.of_id_fst]
  simpa using isLocTrivial œÑ (ùüô B)

end SSet
