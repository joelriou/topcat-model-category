import TopCatModelCategory.SSet.MinimalFibrationsLemmas
import TopCatModelCategory.SSet.FiniteInduction
import TopCatModelCategory.SSet.Pullback
import TopCatModelCategory.TrivialBundleOver
import TopCatModelCategory.TopCat.SerreFibrationBundle
import TopCatModelCategory.TopCat.BoundaryClosedEmbeddings
import TopCatModelCategory.TopCat.ToTopExact
import TopCatModelCategory.TopCat.Pullback
import TopCatModelCategory.ModelCategoryTopCat
import TopCatModelCategory.Pullback

universe u

open Simplicial CategoryTheory MorphismProperty HomotopicalAlgebra
  TopCat.modelCategory Limits Topology GeneratedByTopCat

namespace CategoryTheory

lemma Limits.preservesColimits_comp_of_hasColimit {J C D E : Type*} [Category J] [Category C]
    [Category D] [Category E] (F : J ‚•§ C) (G : C ‚•§ D) (K : D ‚•§ E)
    [PreservesColimit F (G ‚ãô K)] [HasColimit F] [PreservesColimit F G] :
    PreservesColimit (F ‚ãô G) K :=
  preservesColimit_of_preserves_colimit_cocone (isColimitOfPreserves G (colimit.isColimit F))
    (isColimitOfPreserves (G ‚ãô K) (colimit.isColimit F))

lemma Limits.PushoutCocone.isPushout_iff_nonempty_isColimit
    {C : Type*} [Category C]
    {S T‚ÇÅ T‚ÇÇ : C} {f‚ÇÅ : S ‚ü∂ T‚ÇÅ} {f‚ÇÇ : S ‚ü∂ T‚ÇÇ}
    (c : PushoutCocone f‚ÇÅ f‚ÇÇ) :
    IsPushout f‚ÇÅ f‚ÇÇ c.inl c.inr ‚Üî Nonempty (IsColimit c) :=
  ‚ü®fun sq ‚Ü¶ ‚ü®IsColimit.ofIsoColimit sq.isColimit (PushoutCocone.ext (Iso.refl _))‚ü©, fun h ‚Ü¶
    { w := c.condition
      isColimit' := ‚ü®IsColimit.ofIsoColimit h.some (PushoutCocone.ext (Iso.refl _))‚ü© }‚ü©

namespace Over

variable {C : Type*} [Category C] {B : C} {X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : Over B}
  {t : X‚ÇÅ ‚ü∂ X‚ÇÇ} {l : X‚ÇÅ ‚ü∂ X‚ÇÉ} {r : X‚ÇÇ ‚ü∂ X‚ÇÑ} {b : X‚ÇÉ ‚ü∂ X‚ÇÑ}

lemma isPushout_iff_forget [HasPushouts C] :
    IsPushout t l r b ‚Üî IsPushout t.left l.left r.left b.left :=
  ‚ü®fun sq ‚Ü¶ sq.map (Over.forget _), fun sq ‚Ü¶
    { w := by ext; exact sq.w
      isColimit' := ‚ü®by
        refine PushoutCocone.IsColimit.mk _
          (fun s ‚Ü¶ Over.homMk (sq.desc s.inl.left s.inr.left
            ((Over.forget _).congr_map s.condition)) (by apply sq.hom_ext <;> simp))
          (by aesop) (by aesop) (fun s m h‚ÇÅ h‚ÇÇ ‚Ü¶ ?_)
        ext
        apply sq.hom_ext
        ¬∑ simp [‚Üê h‚ÇÅ]
        ¬∑ simp [‚Üê h‚ÇÇ]‚ü© }‚ü©

instance {D : Type*} [Category D] [HasPushouts C] [HasPushouts D]
    (F : C ‚•§ D) [PreservesColimitsOfShape WalkingSpan F] (X : C) :
    PreservesColimitsOfShape WalkingSpan (Over.post (X := X) F) := by
  suffices ‚àÄ {S T‚ÇÅ T‚ÇÇ : Over X} (f‚ÇÅ : S ‚ü∂ T‚ÇÅ) (f‚ÇÇ : S ‚ü∂ T‚ÇÇ),
      PreservesColimit (span f‚ÇÅ f‚ÇÇ) (Over.post (X := X) F) from
    ‚ü®fun {K} ‚Ü¶ preservesColimit_of_iso_diagram _ (diagramIsoSpan K).symm‚ü©
  intro S T‚ÇÅ T‚ÇÇ f‚ÇÅ f‚ÇÇ
  constructor
  intro c hc
  refine ‚ü®(PushoutCocone.isColimitMapCoconeEquiv _ _).2
    (((PushoutCocone.isPushout_iff_nonempty_isColimit _).1 ?_).some)‚ü©
  rw [isPushout_iff_forget]
  exact (PushoutCocone.isPushout_iff_nonempty_isColimit _).2
    ‚ü®(PushoutCocone.isColimitMapCoconeEquiv _ _).1
      (isColimitOfPreserves (Over.forget _ ‚ãô F) hc)‚ü©

instance {X Y : C} (f : X ‚ü∂ Y) [HasPushouts C] :
    PreservesColimitsOfShape WalkingSpan (Over.map f) where
  preservesColimit {K} := ‚ü®fun {c} hc ‚Ü¶ ‚ü®by
    have := isColimitOfPreserves (Over.forget _ ) hc
    exact isColimitOfReflects (Over.forget _) this
    ‚ü©‚ü©

end Over

end CategoryTheory

def DeltaGenerated'.isLimitBinaryFanOfIsEmpty
    {X Y : DeltaGenerated'.{u}} {c : BinaryFan X Y}
    (hX : IsEmpty ((forget _).obj X)) (_ : IsEmpty ((forget _).obj c.pt)) :
    IsLimit c :=
  have h {T : DeltaGenerated'.{u}} (f : T ‚ü∂ X) (t : (forget _).obj T) : False := by
    have := Function.isEmpty ((forget _).map f)
    exact isEmptyElim (Œ± := ((forget _).obj T)) t
  BinaryFan.IsLimit.mk _ (fun {T} f‚ÇÅ _ ‚Ü¶ TopCat.ofHom ‚ü®fun t ‚Ü¶ (h f‚ÇÅ t).elim, by
      rw [continuous_iff_continuousAt]
      intro t
      exact (h f‚ÇÅ t).elim‚ü©)
    (fun f‚ÇÅ _ ‚Ü¶ by ext t; exact (h f‚ÇÅ t).elim)
    (fun f‚ÇÅ _ ‚Ü¶ by ext t; exact (h f‚ÇÅ t).elim)
    (fun f‚ÇÅ _ _ _ _ ‚Ü¶ by ext t; exact (h f‚ÇÅ t).elim)

def DeltaGenerated'.isInitialOfIsEmpty (X : DeltaGenerated'.{u})
    [IsEmpty ((forget _).obj X)] :
    IsInitial X :=
  have h {T : DeltaGenerated'.{u}} (f : T ‚ü∂ X) (t : (forget _).obj T) : False := by
    have := Function.isEmpty ((forget _).map f)
    exact isEmptyElim (Œ± := ((forget _).obj T)) t
  IsInitial.ofUniqueHom
    (fun _ ‚Ü¶ TopCat.ofHom ‚ü®fun (x : (forget _).obj X) ‚Ü¶ isEmptyElim x, by
      rw [continuous_iff_continuousAt]
      intro (x : (forget _).obj X)
      exact isEmptyElim x‚ü©)
    (fun _ f ‚Ü¶ by
      ext (x : (forget _).obj X)
      dsimp
      exact isEmptyElim x)

lemma DeltaGenerated'.isEmpty_of_isInitial {X : DeltaGenerated'.{u}}
    (hX : IsInitial X) : IsEmpty X := by
  let f : X ‚ü∂ GeneratedByTopCat.of PEmpty := hX.to _
  exact Function.isEmpty f

namespace DeltaGenerated'

set_option maxHeartbeats 600000 in
lemma trivialBundlesWithFiber_overLocally_of_isPushout'
    {E B F : DeltaGenerated'.{u}} {X‚ÇÅ X‚ÇÇ X‚ÇÉ : Over B} {t : X‚ÇÅ ‚ü∂ X‚ÇÇ}
    {l : X‚ÇÅ ‚ü∂ X‚ÇÉ} (sq : IsPushout t.left l.left X‚ÇÇ.hom X‚ÇÉ.hom)
    (hl : TopCat.closedEmbeddings (toTopCat.map l.left)) (p : E ‚ü∂ B)
    [PreservesColimit (span t l) (Over.pullback p)]
    (h‚ÇÇ : ((trivialBundlesWithFiber F).objectPropertyOver p).overLocally grothendieckTopology X‚ÇÇ)
    (h‚ÇÉ : (trivialBundlesWithFiber F).objectPropertyOver p X‚ÇÉ)
    {U : DeltaGenerated'.{u}} (j : U ‚ü∂ X‚ÇÉ.left) (hj : openImmersions j)
    (l' : X‚ÇÅ.left ‚ü∂ U) (fac : l' ‚â´ j = l.left) (œÅ : U ‚ü∂ X‚ÇÅ.left) (fac' : l' ‚â´ œÅ = ùüô _) :
    ((trivialBundlesWithFiber F).objectPropertyOver p).overLocally grothendieckTopology
      (Over.mk (ùüô B)) := by
  rw [objectProprertyOverLocally_iff] at h‚ÇÇ ‚ä¢
  intro a
  obtain (‚ü®a‚ÇÄ, rfl‚ü© | ‚ü®k, rfl, hk‚ü©) := Types.eq_or_eq_of_isPushout'
    (sq.map (DeltaGenerated'.toTopCat ‚ãô forget _)) a
  ¬∑ obtain ‚ü®V‚ÇÄ, i, hi, ha‚ÇÄ, hi'‚ü© := h‚ÇÇ a‚ÇÄ
    obtain ‚ü®V, V‚ÇÅ, V‚ÇÇ, V‚ÇÉ, hV‚ÇÇ, hV‚ÇÇ', hV‚ÇÅ, hV‚ÇÉ, hV‚ÇÉ'‚ü© :
      ‚àÉ (V : TopologicalSpace.Opens B) (V‚ÇÅ : TopologicalSpace.Opens X‚ÇÅ.left)
        (V‚ÇÇ : TopologicalSpace.Opens X‚ÇÇ.left) (V‚ÇÉ : TopologicalSpace.Opens U),
        V‚ÇÇ.1 = Set.range i.left ‚àß X‚ÇÇ.hom ‚Åª¬π' V.1 = V‚ÇÇ.1 ‚àß t.left ‚Åª¬π' V‚ÇÇ.1 = V‚ÇÅ.1 ‚àß
        V‚ÇÉ.1 = œÅ ‚Åª¬π' V‚ÇÅ.1 ‚àß X‚ÇÉ.hom ‚Åª¬π' V.1 = Set.image j V‚ÇÉ.1 := sorry
    let W : Over B := Over.mk (Y := .of V) (TopCat.ofHom ‚ü®_, continuous_subtype_val‚ü©)
    have hW : openImmersions W.hom := V.isOpen.isOpenEmbedding_subtypeVal
    have := hW.preservesColimitsOfShape_overPullback (J := WalkingSpan)
    refine ‚ü®W, Over.homMk W.hom, hW, ?_, ?_‚ü©
    ¬∑ rw [‚Üê hV‚ÇÇ, ‚Üê hV‚ÇÇ'] at ha‚ÇÄ
      dsimp [W] at ha‚ÇÄ ‚ä¢
      simp only [Set.mem_range, Subtype.exists]
      simp only [Set.mem_preimage, SetLike.mem_coe] at ha‚ÇÄ
      exact ‚ü®_, ha‚ÇÄ, rfl‚ü©
    ¬∑ let r : X‚ÇÇ ‚ü∂ Over.mk (ùüô B) := Over.homMk X‚ÇÇ.hom
      let b : X‚ÇÉ ‚ü∂ Over.mk (ùüô B) := Over.homMk X‚ÇÉ.hom
      have sq : IsPushout t l r b := by rwa [Over.isPushout_iff_forget]
      have : IsSplitMono ((CategoryTheory.Over.pullback W.hom ‚ãô Over.map W.hom).map l).left := by
        let k : (GeneratedByTopCat.of V‚ÇÉ : DeltaGenerated') ‚ü∂ X‚ÇÉ.left :=
          TopCat.ofHom ‚ü®_, continuous_subtype_val‚ü© ‚â´ j
        have hk : openImmersions k :=
          MorphismProperty.comp_mem _ _ _ (V‚ÇÉ.isOpen.isOpenEmbedding_subtypeVal) hj
        let Œ± : (GeneratedByTopCat.of V‚ÇÅ : DeltaGenerated') ‚ü∂ X‚ÇÉ.left :=
          TopCat.ofHom ‚ü®_, continuous_subtype_val‚ü© ‚â´ l.left
        obtain ‚ü®œÜ, hœÜ‚ü© := hk.exists_lift Œ± (by
            rintro _ ‚ü®a, rfl‚ü©
            refine ‚ü®‚ü®l' a.1, ?_‚ü©, ConcreteCategory.congr_hom fac a.1‚ü©
            change l' a.1 ‚àà V‚ÇÉ.carrier
            rw [hV‚ÇÉ]
            have : œÅ (l' a.1) = a.1 := ConcreteCategory.congr_hom fac' a.1
            simp only [TopologicalSpace.Opens.carrier_eq_coe, Set.mem_preimage, SetLike.mem_coe,
              this, SetLike.coe_mem])
        have : IsSplitMono œÜ := ‚ü®‚ü®{
          retraction := TopCat.ofHom ‚ü®fun x ‚Ü¶ ‚ü®œÅ x.1, by
            obtain ‚ü®x, (hx : x ‚àà V‚ÇÉ.carrier)‚ü© := x
            rwa [hV‚ÇÉ] at hx‚ü©, by continuity‚ü©
          id := by
            ext ‚ü®v, hv‚ü© : 3
            have : (œÜ ‚ü®v, hv‚ü©).1 = l' v := hj.injective (by
              change (œÜ ‚â´ k) ‚ü®v, hv‚ü© = _
              simp only [hœÜ, Œ±, ‚Üê fac]
              rfl)
            change œÅ (œÜ ‚ü®v, hv‚ü©).1 = v
            rw [this]
            exact ConcreteCategory.congr_hom fac' v
            }‚ü©‚ü©
        let ŒπV‚ÇÅ : GeneratedByTopCat.of V‚ÇÅ ‚ü∂ X‚ÇÅ.left := TopCat.ofHom ‚ü®_, continuous_subtype_val‚ü©
        let pV‚ÇÅ : GeneratedByTopCat.of V‚ÇÅ ‚ü∂ W.left :=
          TopCat.ofHom ‚ü®fun ‚ü®v, (hv : v ‚àà V‚ÇÅ.carrier)‚ü© ‚Ü¶ ‚ü®X‚ÇÅ.hom v, by
            rw [‚Üê hV‚ÇÅ, ‚Üê hV‚ÇÇ', ‚Üê Set.preimage_comp] at hv
            dsimp at hv
            rwa [‚Üê CategoryTheory.hom_comp, Over.w t] at hv‚ü©, by continuity‚ü©
        let ŒπV‚ÇÉ : GeneratedByTopCat.of V‚ÇÉ ‚ü∂ X‚ÇÉ.left :=
          TopCat.ofHom ‚ü®_, continuous_subtype_val‚ü© ‚â´ j
        let pV‚ÇÉ : GeneratedByTopCat.of V‚ÇÉ ‚ü∂ W.left :=
          TopCat.ofHom ‚ü®fun ‚ü®v, hv‚ü© ‚Ü¶ ‚ü®X‚ÇÉ.hom (j v), by
            dsimp
            erw [‚Üê Set.mem_preimage, hV‚ÇÉ']
            exact Set.mem_image_of_mem _ hv‚ü©, by continuity‚ü©
        have facŒπ : ŒπV‚ÇÅ ‚â´ l.left = œÜ ‚â´ ŒπV‚ÇÉ := hœÜ.symm
        have facp : pV‚ÇÅ = œÜ ‚â´ pV‚ÇÉ := by
          ext ‚ü®x, hx‚ü©
          rw [Subtype.ext_iff]
          dsimp [pV‚ÇÅ, pV‚ÇÉ]
          change X‚ÇÅ.hom x = X‚ÇÉ.hom ((œÜ ‚â´ k) ‚ü®x, hx‚ü©)
          rw [hœÜ, ‚Üê Over.w l]
          rfl
        have sq‚ÇÅ : IsPullback ŒπV‚ÇÅ pV‚ÇÅ X‚ÇÅ.hom W.hom := by
          apply openImmersions.isPullback
          ¬∑ exact V‚ÇÅ.isOpen.isOpenEmbedding_subtypeVal
          ¬∑ exact hW
          ¬∑ rfl
          ¬∑ rintro x hx
            simp only [Functor.const_obj_obj, Set.mem_preimage, Set.mem_range] at hx
            obtain ‚ü®y, hy‚ü© := hx
            refine ‚ü®‚ü®x, ?_‚ü©, rfl‚ü©
            change x ‚àà V‚ÇÅ.1
            rw [‚Üê hV‚ÇÅ, ‚Üê hV‚ÇÇ', ‚Üê Set.preimage_comp]
            dsimp
            rw [‚Üê CategoryTheory.hom_comp, Over.w t]
            simp only [Set.mem_preimage, SetLike.mem_coe]
            rw [‚Üê hy]
            exact y.2
        have sq‚ÇÉ : IsPullback ŒπV‚ÇÉ pV‚ÇÉ X‚ÇÉ.hom W.hom := by
          apply openImmersions.isPullback
          ¬∑ exact MorphismProperty.comp_mem _ _ _ (V‚ÇÉ.isOpen.isOpenEmbedding_subtypeVal) hj
          ¬∑ exact hW
          ¬∑ rfl
          ¬∑ rintro x ‚ü®y, hy‚ü©
            have hx : x ‚àà j '' V‚ÇÉ := by
              dsimp at hV‚ÇÉ'
              rw [‚Üê hV‚ÇÉ']
              simp only [Set.mem_preimage, SetLike.mem_coe]
              erw [‚Üê hy]
              exact y.2
            obtain ‚ü®z, hz, rfl‚ü© := hx
            exact ‚ü®‚ü®z, hz‚ü©, rfl‚ü©
        let e‚ÇÅ : GeneratedByTopCat.of V‚ÇÅ ‚âÖ pullback X‚ÇÅ.hom W.hom := sq‚ÇÅ.isoPullback
        let e‚ÇÉ : GeneratedByTopCat.of V‚ÇÉ ‚âÖ pullback X‚ÇÉ.hom W.hom := sq‚ÇÉ.isoPullback
        have : ((CategoryTheory.Over.pullback W.hom ‚ãô Over.map W.hom).map l).left =
            e‚ÇÅ.inv ‚â´ œÜ ‚â´ e‚ÇÉ.hom := by
          rw [‚Üê cancel_epi e‚ÇÅ.hom, e‚ÇÅ.hom_inv_id_assoc]
          apply pullback.hom_ext
          ¬∑ simp [e‚ÇÅ, e‚ÇÉ, facŒπ]
          ¬∑ simp [e‚ÇÅ, e‚ÇÉ, facp]
        rw [this]
        infer_instance
      have : PreservesColimit (span t l)
        ((CategoryTheory.Over.pullback W.hom ‚ãô Over.map W.hom) ‚ãô
          CategoryTheory.Over.pullback p) := by
        let W' := (CategoryTheory.Over.pullback p).obj W
        have hW' : openImmersions W'.hom :=
          MorphismProperty.of_isPullback (IsPullback.of_hasPullback _ _) hW
        have := hW'.preservesColimitsOfShape_overPullback (J := WalkingSpan)
        have e : (CategoryTheory.Over.pullback W.hom ‚ãô Over.map W.hom) ‚ãô
          CategoryTheory.Over.pullback p ‚âÖ
            CategoryTheory.Over.pullback p ‚ãô CategoryTheory.Over.pullback W'.hom ‚ãô
              Over.map W'.hom :=
          Functor.associator _ _ _ ‚â™‚â´
            Functor.isoWhiskerLeft _
              (Over.mapCompPullbackIsoOfIsPullback (IsPullback.of_hasPullback W.hom p).flip) ‚â™‚â´
              (Functor.associator _ _ _).symm ‚â™‚â´ Functor.isoWhiskerRight
                ((Over.pullbackComp _ _).symm ‚â™‚â´ eqToIso (by
                  congr 1; exact pullback.condition) ‚â™‚â´ Over.pullbackComp _ _) _ ‚â™‚â´
                Functor.associator _ _ _
        exact preservesColimit_of_natIso _ e.symm
      have : PreservesColimit
          (span t l ‚ãô (CategoryTheory.Over.pullback W.hom ‚ãô Over.map W.hom))
          (CategoryTheory.Over.pullback p) :=
        preservesColimits_comp_of_hasColimit (span t l) _ _
      have : PreservesColimit
          (span ((CategoryTheory.Over.pullback W.hom ‚ãô Over.map W.hom).map t)
            ((CategoryTheory.Over.pullback W.hom ‚ãô Over.map W.hom).map l))
          (CategoryTheory.Over.pullback p) :=
        preservesColimit_of_iso_diagram _ (spanCompIso _ t l)
      have := TrivialBundleWithFiberOver.nonempty_of_isPushout_of_isSplitMono
        (sq.map (Over.pullback W.hom ‚ãô Over.map W.hom)) p (F := F) (Nonempty.some (by
          rw [‚Üê Over.nonempty_over_trivialBundlesWithFiber_iff, ‚Üê objectPropertyOver_iff]
          refine ObjectProperty.of_precomp _ (Over.homMk (hi.lift (pullback.fst _ _) ?_) ?_) hi'
          ¬∑ rw [‚Üê hV‚ÇÇ, ‚Üê hV‚ÇÇ']
            rintro _ ‚ü®b, rfl‚ü©
            dsimp at b ‚ä¢
            simp only [Set.mem_preimage, SetLike.mem_coe]
            convert (pullback.snd X‚ÇÇ.hom W.hom b).2
            exact congr_fun ((forget _).congr_map
              (pullback.condition (f := X‚ÇÇ.hom) (g := W.hom))) b
          ¬∑ dsimp
            rw [‚Üê Over.w i, hi.lift_comp_assoc, pullback.condition])) (Nonempty.some (by
          rw [‚Üê Over.nonempty_over_trivialBundlesWithFiber_iff, ‚Üê objectPropertyOver_iff]
          exact ObjectProperty.of_precomp _
            (Over.homMk (pullback.fst _ _) (by simp [pullback.condition])) h‚ÇÉ))
      rw [‚Üê Over.nonempty_over_trivialBundlesWithFiber_iff, ‚Üê objectPropertyOver_iff] at this
      exact ObjectProperty.of_precomp _ (by exact Over.homMk (pullback.lift W.hom (ùüô _))) this
  ¬∑ dsimp at k hk ‚ä¢
    let e : ((Set.range l.left)·∂ú : Set _) ‚âÉ‚Çú ((Set.range X‚ÇÇ.hom)·∂ú : Set _) :=
      TopCat.homeoComplOfIsPushoutOfIsClosedEmbedding
        (sq.map (DeltaGenerated'.toTopCat)).flip hl
    have hr : IsOpen ((Set.range X‚ÇÇ.hom)·∂ú) :=
      TopCat.closedEmbeddings.isOpen
        (TopCat.isClosedEmbedding_of_isPushout
          (sq.flip.map (DeltaGenerated'.toTopCat)) hl)
    have : DeltaGeneratedSpace' ((Set.range l.left)·∂ú : Set _) :=
      IsOpen.isGeneratedBy _ (by simpa only [isOpen_compl_iff] using hl.isClosed_range)
    exact ‚ü®Over.mk (Y := .of ((Set.range l.left)·∂ú : Set _))
      (TopCat.ofHom (ContinuousMap.comp ‚ü®_, continuous_subtype_val‚ü© ‚ü®_, e.continuous‚ü©)),
      Over.homMk (TopCat.ofHom ‚ü®fun ‚ü®x, _‚ü© ‚Ü¶ X‚ÇÉ.hom x, by continuity‚ü©),
      (IsOpenEmbedding.comp (IsOpen.isOpenEmbedding_subtypeVal hr) e.isOpenEmbedding :),
      ‚ü®‚ü®k, hk‚ü©, rfl‚ü©, h‚ÇÉ.precomp (Over.homMk (TopCat.ofHom ‚ü®_, continuous_subtype_val‚ü©))‚ü©

lemma trivialBundlesWithFiber_overLocally_of_isPushout
    {E B F : DeltaGenerated'.{u}} {X‚ÇÅ X‚ÇÇ X‚ÇÉ X‚ÇÑ : Over B} {t : X‚ÇÅ ‚ü∂ X‚ÇÇ}
    {l : X‚ÇÅ ‚ü∂ X‚ÇÉ} {r : X‚ÇÇ ‚ü∂ X‚ÇÑ} {b : X‚ÇÉ ‚ü∂ X‚ÇÑ} (sq : IsPushout t l r b)
    (hl : TopCat.closedEmbeddings (toTopCat.map l.left)) (p : E ‚ü∂ B)
    [PreservesColimit (span t l) (Over.pullback p)]
    (h‚ÇÇ : ((trivialBundlesWithFiber F).objectPropertyOver p).overLocally grothendieckTopology X‚ÇÇ)
    (h‚ÇÉ : (trivialBundlesWithFiber F).objectPropertyOver p X‚ÇÉ)
    {U : DeltaGenerated'.{u}} (j : U ‚ü∂ X‚ÇÉ.left) (hj : openImmersions j)
    (l'' : X‚ÇÅ.left ‚ü∂ U) (fac : l'' ‚â´ j = l.left) (œÅ : U ‚ü∂ X‚ÇÅ.left) (fac' : l'' ‚â´ œÅ = ùüô _) :
    ((trivialBundlesWithFiber F).objectPropertyOver p).overLocally grothendieckTopology X‚ÇÑ := by
  rw [Over.isPushout_iff_forget] at sq
  let Y‚ÇÅ := Over.mk (t.left ‚â´ r.left)
  let Y‚ÇÇ := Over.mk (r.left)
  let Y‚ÇÉ := Over.mk (b.left)
  let t' : Y‚ÇÅ ‚ü∂ Y‚ÇÇ := Over.homMk t.left
  let l' : Y‚ÇÅ ‚ü∂ Y‚ÇÉ := Over.homMk l.left sq.w.symm
  let Z‚ÇÑ := pullback p X‚ÇÑ.hom
  let p' : Z‚ÇÑ ‚ü∂ X‚ÇÑ.left := pullback.snd _ _
  have sq' : IsPullback (pullback.fst _ _) p' p X‚ÇÑ.hom := IsPullback.of_hasPullback _ _
  replace sq : IsPushout t'.left l'.left Y‚ÇÇ.hom Y‚ÇÉ.hom := sq
  have : PreservesColimit (span t' l' ‚ãô Over.map X‚ÇÑ.hom)
      (CategoryTheory.Over.pullback p ‚ãô Over.forget E) := by
    have e : (span t' l' ‚ãô Over.map X‚ÇÑ.hom) ‚âÖ span t l :=
      spanCompIso _ _ _ ‚â™‚â´ spanExt (by exact Over.isoMk (Iso.refl _))
        (by exact Over.isoMk (Iso.refl _)) (by exact Over.isoMk (Iso.refl _))
        (by ext : 1; simp [t']) (by ext : 1; simp [l'])
    apply preservesColimit_of_iso_diagram _ e.symm
  have : PreservesColimit (span t' l') (CategoryTheory.Over.pullback p' ‚ãô Over.forget _) :=
    preservesColimit_of_natIso _ (Over.pullbackCompForgetOfIsPullback sq').symm
  have : PreservesColimit (span t' l') (CategoryTheory.Over.pullback p') :=
    preservesColimit_of_reflects_of_preserves _ (Over.forget _)
  have := trivialBundlesWithFiber_overLocally_of_isPushout' sq hl p' (F := F) (by
    rw [‚Üê overLocally_objectPropertyOver_over_map_obj_iff _ _ sq']
    exact ObjectProperty.prop_of_iso _ (by exact Over.isoMk (Iso.refl _)) h‚ÇÇ) (by
    rw [objectPropertyOver_iff_map_of_isPullback _ sq']
    exact ObjectProperty.prop_of_iso _ (by exact Over.isoMk (Iso.refl _)) h‚ÇÉ)
    j hj l'' fac œÅ fac'
  rw [‚Üê overLocally_objectPropertyOver_over_map_obj_iff _ _ sq'] at this
  exact ObjectProperty.prop_of_iso _ (Over.isoMk (Iso.refl _)) this

end DeltaGenerated'

namespace SSet

variable {E B : SSet.{u}} {p : E ‚ü∂ B} {F : SSet.{u}}
  (œÑ : ‚àÄ ‚¶Én : ‚Ñï‚¶Ñ (œÉ : Œî[n] ‚ü∂ B), TrivialBundleWithFiberOver F p œÉ)

namespace MinimalFibrationLocTrivial

include œÑ  in
lemma isLocTrivial {Z : SSet.{u}} [IsFinite Z] (a : Z ‚ü∂ B) :
   ((trivialBundlesWithFiber (toDeltaGenerated.obj F)).objectPropertyOver
    (toDeltaGenerated.map p)).overLocally grothendieckTopology
    (Over.mk (toDeltaGenerated.map a)) := by
  induction Z using SSet.finite_induction with
  | hP‚ÇÄ X =>
    rw [objectProprertyOverLocally_iff]
    have : IsEmpty (toDeltaGenerated.obj X) :=
      DeltaGenerated'.isEmpty_of_isInitial
        (IsInitial.isInitialObj _ _ (SSet.isInitialOfNotNonempty
            (by rwa [SSet.notNonempty_iff_hasDimensionLT_zero])))
    dsimp
    intro x
    exact (IsEmpty.false x).elim
  | @hP Z‚ÇÄ Z i n j‚ÇÄ j sq _ h‚ÇÄ =>
    let Y‚ÇÅ := Over.mk (j‚ÇÄ ‚â´ i ‚â´ a)
    let Y‚ÇÇ := Over.mk (i ‚â´ a)
    let Y‚ÇÉ := Over.mk (j ‚â´ a)
    let Y‚ÇÑ := Over.mk a
    let t' : Y‚ÇÅ ‚ü∂ Y‚ÇÇ := Over.homMk j‚ÇÄ
    let l' : Y‚ÇÅ ‚ü∂ Y‚ÇÉ := Over.homMk ‚àÇŒî[n].Œπ (by simp [Y‚ÇÅ, Y‚ÇÉ, sq.w_assoc])
    let r' : Y‚ÇÇ ‚ü∂ Y‚ÇÑ := Over.homMk i
    let b' : Y‚ÇÉ ‚ü∂ Y‚ÇÑ := Over.homMk j
    have : Mono l'.left := by dsimp [l']; infer_instance
    have sq' : IsPushout t' l' r' b' := by rwa [Over.isPushout_iff_forget]
    have : PreservesColimit (span t' l') (Over.post toDeltaGenerated ‚ãô
      CategoryTheory.Over.pullback (toDeltaGenerated.map p) ‚ãô
        Over.forget (toDeltaGenerated.obj E)) :=
      preservesColimit_of_natIso _
        (Functor.isoWhiskerRight (Over.pullbackPostIso toDeltaGenerated p) (Over.forget _))
    have := preservesColimits_comp_of_hasColimit (span t' l') (Over.post toDeltaGenerated)
      (CategoryTheory.Over.pullback (toDeltaGenerated.map p) ‚ãô
        Over.forget (toDeltaGenerated.obj E))
    have : PreservesColimit (span ((Over.post toDeltaGenerated).map t')
      ((Over.post toDeltaGenerated).map l'))
      (CategoryTheory.Over.pullback (toDeltaGenerated.map p) ‚ãô
        Over.forget (toDeltaGenerated.obj E)) :=
      preservesColimit_of_iso_diagram _ (spanCompIso (Over.post toDeltaGenerated) t' l')
    have : PreservesColimit (span ((Over.post toDeltaGenerated).map t')
        ((Over.post toDeltaGenerated).map l'))
        (CategoryTheory.Over.pullback (toDeltaGenerated.map p)) :=
        preservesColimit_of_reflects_of_preserves _ (Over.forget _)
    refine DeltaGenerated'.trivialBundlesWithFiber_overLocally_of_isPushout
      (sq'.map (Over.post toDeltaGenerated)) (closedEmbeddings_toObj_map_of_mono _) _ (h‚ÇÄ _) ?_
      (U := ?_) ?_ ?_ ?_ ?_ ?_ ?_
    ¬∑ rw [objectPropertyOver_iff,
        Over.nonempty_over_trivialBundlesWithFiber_iff]
      exact ‚ü®(œÑ (j ‚â´ a)).map (SSet.toDeltaGenerated)‚ü©
    ¬∑ sorry
    ¬∑ sorry
    ¬∑ sorry
    ¬∑ sorry
    ¬∑ sorry
    ¬∑ sorry
    ¬∑ sorry

end MinimalFibrationLocTrivial

variable (p) in
open MinimalFibrationLocTrivial MorphismProperty in
include œÑ in
lemma fibration_toTop_map_of_trivialBundle_over_simplices [IsFinite B] :
    Fibration (toTop.map p) := by
  apply DeltaGenerated'.fibration_toTopCat_map_of_locallyTarget_trivialBundle
    (p := toDeltaGenerated.map p)
  apply locallyTarget_monotone (trivialBundlesWithFiber_le_trivialBundles (toDeltaGenerated.obj F))
  rw [‚Üê MorphismProperty.overLocally_objectPropertyOver_iff_locallyTarget _ _ _
    (Over.mk (ùüô (toDeltaGenerated.obj B))) IsPullback.of_id_fst]
  simpa using isLocTrivial œÑ (ùüô B)

end SSet
