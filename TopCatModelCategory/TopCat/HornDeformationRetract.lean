import TopCatModelCategory.TopCat.Adj

open CategoryTheory MorphismProperty TopCat Simplicial HomotopicalAlgebra
  SSet.modelCategoryQuillen

namespace SSet

instance (n : ‚Ñï) : T2Space |Œî[n]| := ‚¶ãn‚¶å.toTopHomeo.symm.t2Space

def horn.deformationRetractToTopMap {n : ‚Ñï} (i : Fin (n + 2)) :
    TopCat.DeformationRetract |horn (n + 1) i| |Œî[n + 1]| := sorry

@[simp]
lemma horn.deformationRetractToTopMap_i {n : ‚Ñï} (i : Fin (n + 2)) :
    (horn.deformationRetractToTopMap i).i = toTop.map (horn (n + 1) i).Œπ := sorry

@[reassoc (attr := simp)]
lemma horn.Œπ_deformationRetractToTopMap_r {n : ‚Ñï} (i : Fin (n + 2)) :
    toTop.map (horn (n + 1) i).Œπ ‚â´ (horn.deformationRetractToTopMap i).r = ùüô _ := by
  simpa only [deformationRetractToTopMap_i]
    using (horn.deformationRetractToTopMap i).retract


instance (Z : TopCat.{0}) : IsFibrant (TopCat.toSSet.obj Z) := by
  rw [isFibrant_iff, fibration_iff]
  intro _ _ _ hi
  simp only [J, iSup_iff] at hi
  obtain ‚ü®n, ‚ü®i‚ü©‚ü© := hi
  constructor
  intro t _ sq
  refine ‚ü®‚ü®
    { l := sSetTopAdj.homEquiv _ _
        ((horn.deformationRetractToTopMap i).r ‚â´ (sSetTopAdj.homEquiv _ _).symm t)
      fac_left := by
        simp [‚Üê Adjunction.homEquiv_naturality_left]
      fac_right := Subsingleton.elim _ _ }‚ü©‚ü©

end SSet
