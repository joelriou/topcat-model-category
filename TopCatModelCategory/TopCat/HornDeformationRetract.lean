import TopCatModelCategory.TopCat.BoundaryClosedEmbeddings

open CategoryTheory MorphismProperty TopCat Simplicial HomotopicalAlgebra
  SSet.modelCategoryQuillen NNReal MonoidalCategory

universe u

namespace TopCat

variable (n : ‚Ñï)

section

variable (i : Fin (n + 1))

protected def horn : Set (ToType ‚¶ãn‚¶å ‚Üí ‚Ñù‚â•0) :=
  (SSet.Subcomplex.toTopSet (SSet.stdSimplex.ŒπToTop.{0} n)).obj (SSet.horn.{0} n i)

variable {n}

lemma mem_horn_iff (f : ToType ‚¶ãn‚¶å ‚Üí ‚Ñù‚â•0) :
    f ‚àà TopCat.horn n i ‚Üî f ‚àà ‚¶ãn‚¶å.toTopObj ‚àß ‚àÉ (j : Fin (n + 1))
      (_ : j ‚â† i), f j = 0 := by
  simp only [TopCat.horn, SSet.horn_eq_iSup, SSet.Subcomplex.toTopSet_iSup,
    SSet.stdSimplex.toTopSet_obj_face_singleton_compl]
  aesop

lemma mem_horn_iff' (f : ‚¶ãn‚¶å.toTopObj) :
    f.1 ‚àà TopCat.horn n i ‚Üî ‚àÉ (j : Fin (n + 1))
      (_ : j ‚â† i), f j = 0 := by
  rw [mem_horn_iff]
  aesop

lemma horn_le_toTopObj : TopCat.horn n i ‚äÜ ‚¶ãn‚¶å.toTopObj :=
  (SSet.Subcomplex.toTopSet_obj_subset _ _).trans (by simp)

def horn.Œπ : of (TopCat.horn n i) ‚ü∂ of (‚¶ãn‚¶å.toTopObj) :=
  ofHom ‚ü®fun ‚ü®x, hx‚ü© ‚Ü¶ ‚ü®x, horn_le_toTopObj i hx‚ü©, by continuity‚ü©

end

namespace horn

variable {n}

lemma continuous_min {Œπ : Type*}
    (S : Finset Œπ) (hS : S.Nonempty) :
    Continuous (fun (f : Œπ ‚Üí ‚Ñù) ‚Ü¶ (Finset.image f S).min' (by simpa)) := by
  classical
  revert S
  apply Finset.induction
  ¬∑ simp
  ¬∑ intro i‚ÇÄ S hi‚ÇÄ hŒ± h'
    by_cases hS : S.Nonempty
    ¬∑ let Œ± (f : Œπ ‚Üí ‚Ñù) := (Finset.image f S).min' (by simpa)
      let Œ≤ (f : Œπ ‚Üí ‚Ñù) : ‚Ñù := min (Œ± f) (f i‚ÇÄ)
      have hŒ≤ : Continuous Œ≤ := by continuity
      have : Œ≤ = fun (f : Œπ ‚Üí ‚Ñù) ‚Ü¶ (Finset.image f (insert i‚ÇÄ S)).min' (by simp) := by
        ext f
        dsimp [Œ±, Œ≤]
        apply le_antisymm
        ¬∑ simp only [Finset.image_insert, Finset.le_min'_iff, Finset.mem_insert, Finset.mem_image,
            inf_le_iff, forall_eq_or_imp, le_refl, or_true, forall_exists_index, and_imp,
            forall_apply_eq_imp_iff‚ÇÇ, true_and]
          intro i hi
          left
          apply Finset.min'_le
          aesop
        ¬∑ simp only [Finset.image_insert, le_inf_iff, Finset.le_min'_iff, Finset.mem_image,
            forall_exists_index, and_imp, forall_apply_eq_imp_iff‚ÇÇ]
          constructor <;> intros <;> apply Finset.min'_le <;> aesop
      rwa [‚Üê this]
    ¬∑ simp only [Finset.not_nonempty_iff_eq_empty] at hS
      subst hS
      simp only [insert_empty_eq, Finset.image_singleton, Finset.min'_singleton]
      continuity

variable (i : Fin (n + 2))

lemma nonempty_image_singleton_compl (f : (ToType ‚¶ãn + 1‚¶å ‚Üí ‚Ñù)) :
    (Finset.image f ({i}·∂ú : Finset _)).Nonempty := by
  rw [Finset.image_nonempty, ‚Üê Finset.coe_nonempty, Finset.coe_compl,
    Finset.coe_singleton]
  exact Set.nonempty_compl_of_nontrivial i

noncomputable def Œº : (ToType ‚¶ãn + 1‚¶å ‚Üí ‚Ñù) ‚Üí ‚Ñù :=
  fun f ‚Ü¶ Finset.min' _ (nonempty_image_singleton_compl i f)

variable {i} in
lemma Œº_le (f : ToType ‚¶ãn + 1‚¶å ‚Üí ‚Ñù) {j : ToType ‚¶ãn + 1‚¶å} (hij : j ‚â† i) :
    Œº i f ‚â§ f j :=
  Finset.min'_le _ _ (by aesop)

@[continuity]
lemma continuous_Œº : Continuous (Œº i) :=
  continuous_min _ (by
    rw [‚Üê Finset.coe_nonempty, Finset.coe_compl,
      Finset.coe_singleton]
    exact Set.nonempty_compl_of_nontrivial i)

lemma exists_eq_Œº (f : ToType ‚¶ãn + 1‚¶å ‚Üí ‚Ñù) :
    ‚àÉ (j : Fin (n + 2)) (_ : j ‚â† i), f j = Œº i f := by
  have this := Finset.min'_mem _ (nonempty_image_singleton_compl i f)
  aesop

@[simp]
lemma Œº_eq_zero (f : TopCat.horn (n + 1) i) :
    Œº i (fun j ‚Ü¶ f.1 j)= 0 := by
  dsimp [Œº]
  apply le_antisymm
  ¬∑ apply Finset.min'_le
    obtain ‚ü®f, hf‚ü© := f
    rw [mem_horn_iff] at hf
    obtain ‚ü®_, ‚ü®j, hj, hj'‚ü©‚ü© := hf
    simp only [Finset.mem_image, Finset.mem_compl, Finset.mem_singleton]
    refine ‚ü®j, hj, by simpa‚ü©
  ¬∑ simp

-- FIXME: v(i) should be -(n + 1)...
def v : ToType ‚¶ãn + 1‚¶å ‚Üí ‚Ñù :=
  fun j ‚Ü¶ if j = i then - (n + 1) else 1

variable {i} in
lemma v_eq_one {j : Fin (n + 2)} (hij : j ‚â† i) : v i j = 1 :=
  if_neg hij

@[simp]
lemma v_eq : v i i = - (n + 1) := if_pos rfl

@[simp]
lemma sum_v : ‚àë (j : Fin (n + 2)), v i j = 0 := by
  rw [‚Üê Finset.sum_compl_add_sum {i}, Finset.sum_singleton, v_eq, ‚Üê sub_eq_add_neg,
    sub_eq_zero, Finset.sum_congr rfl (g := fun _ ‚Ü¶ 1)
      (fun j hj ‚Ü¶ v_eq_one (by simpa using hj)),
    Finset.sum_const, nsmul_eq_mul, mul_one, Finset.card_compl, Fintype.card_fin,
    Finset.card_singleton, Nat.add_one_sub_one, Nat.cast_add, Nat.cast_one]

noncomputable def h' : (ToType ‚¶ãn + 1‚¶å ‚Üí ‚Ñù) √ó TopCat.I.{u} ‚Üí (ToType ‚¶ãn + 1‚¶å ‚Üí ‚Ñù) :=
  fun ‚ü®f, t‚ü© j ‚Ü¶ f j - TopCat.I.to‚Ñù (TopCat.I.symm t) * Œº i f * v i j

@[simps! hom]
noncomputable def h : of ‚¶ãn + 1‚¶å.toTopObj ‚äó I ‚ü∂ of ‚¶ãn + 1‚¶å.toTopObj :=
  ofHom ‚ü®fun ‚ü®f, t‚ü© ‚Ü¶ ‚ü®fun j ‚Ü¶ ‚ü®f j - TopCat.I.to‚Ñù (TopCat.I.symm t) *
      Œº i (fun k ‚Ü¶ (f.1 k).1) * v i j, by
    obtain ‚ü®j‚ÇÄ, hj‚ÇÄ, hj‚ÇÄ'‚ü© := exists_eq_Œº i (fun k ‚Ü¶ (f.1 k))
    by_cases hij : j = i
    ¬∑ erw [‚Üê hj‚ÇÄ']
      subst hij
      rw [v_eq, mul_neg, sub_neg_eq_add]
      exact add_nonneg (f.1 j).2 (mul_nonneg
        (mul_nonneg (I.symm t).1.2.1 (f.1 j‚ÇÄ).2) (by linarith))
    ¬∑ rw [v_eq_one hij, mul_one, sub_nonneg]
      refine le_trans ?_ (Œº_le (fun k ‚Ü¶ f.1 k) hij)
      refine mul_le_of_le_one_left ?_ (I.symm t).1.2.2
      erw [‚Üê hj‚ÇÄ']
      exact (f.1 j‚ÇÄ).2‚ü©, by
      ext
      let coe‚Ñù : ‚Ñù‚â•0 ‚Üí+ ‚Ñù := AddMonoidHom.mk' (fun (x : ‚Ñù‚â•0) ‚Ü¶ x.1) (by aesop)
      apply (map_sum coe‚Ñù _ _).trans
      have hf := f.2
      simp only [SimplexCategory.toTopObj, Set.mem_setOf_eq] at hf
      rw [Subtype.ext_iff] at hf
      replace hf := (map_sum coe‚Ñù _ _).symm.trans hf
      dsimp [coe‚Ñù] at hf ‚ä¢
      simp only [Finset.sum_sub_distrib, hf, sub_eq_self]
      rw [‚Üê Finset.mul_sum]
      erw [sum_v i]
      rw [mul_zero]‚ü©, by
    apply Continuous.subtype_mk
    apply continuous_pi
    intro j
    apply Continuous.subtype_mk
    apply Continuous.sub
    ¬∑ apply Continuous.comp'
      ¬∑ apply continuous_induced_dom
      ¬∑ exact (continuous_apply j).comp (Continuous.fst' continuous_subtype_val)
    ¬∑ apply Continuous.mul
      ¬∑ apply Continuous.mul
        ¬∑ continuity
        ¬∑ apply Continuous.comp'
          ¬∑ apply TopCat.horn.continuous_Œº
          ¬∑ apply continuous_pi
            intro j
            apply Continuous.comp'
            ¬∑ apply continuous_induced_dom
            ¬∑ exact (continuous_apply j).comp (Continuous.fst' continuous_subtype_val)
      ¬∑ exact continuous_const‚ü©

lemma hi (f : TopCat.horn (n + 1) i) (t : TopCat.I) (j : ToType ‚¶ãn + 1‚¶å):
    h i ‚ü®‚ü®f.1, horn_le_toTopObj i f.2‚ü©, t‚ü© j = f.1 j := by
  aesop

noncomputable def r : of ‚¶ãn + 1‚¶å.toTopObj ‚ü∂ of (TopCat.horn (n + 1) i) :=
  ofHom ‚ü®fun f ‚Ü¶ ‚ü®h i ‚ü®f, 0‚ü©, by
    rw [mem_horn_iff]
    refine ‚ü®(h i ‚ü®f, 0‚ü©).2, ?_‚ü©
    obtain ‚ü®j, hij, hj‚ü© := exists_eq_Œº i (fun k ‚Ü¶ f.1 k)
    exact ‚ü®j, hij, by simp [hj, v_eq_one hij]‚ü©‚ü©, by
      apply Continuous.subtype_mk
      exact Continuous.comp continuous_subtype_val (Œπ‚ÇÄ ‚â´ h i).hom.2‚ü©

noncomputable def deformationRetractŒπ : TopCat.DeformationRetract
    (of (TopCat.horn (n + 1) i)) (of ‚¶ãn + 1‚¶å.toTopObj) where
  i := horn.Œπ i
  h := h i
  r := r i
  retract := by ext : 3; apply hi
  hi := by ext : 3; apply hi
  h‚ÇÄ := rfl
  h‚ÇÅ := by
    ext x : 4
    dsimp
    rw [Œπ‚ÇÅ_apply]
    simp

def deformationRetracts_Œπ : TopCat.deformationRetracts (horn.Œπ i) :=
  ‚ü®deformationRetractŒπ i, rfl‚ü©

end horn

end TopCat

namespace SSet

instance (n : ‚Ñï) : T2Space |Œî[n]| := ‚¶ãn‚¶å.toTopHomeo.symm.t2Space

def horn.deformationRetracts_toTopMap {n : ‚Ñï} (i : Fin (n + 2)) :
    TopCat.deformationRetracts (toTop.map (horn (n + 1) i).Œπ) := by
  sorry
  --refine (deformationRetracts.arrow_mk_iso_iff ?_).2
  --  (horn.deformationRetracts_Œπ i)
  --exact (SSet.Subcomplex.arrowMkToTopMapŒπIso (stdSimplex.hŒπToTop (n + 1))
  --  (horn (n + 1) i)) ‚â™‚â´ Arrow.isoMk (Iso.refl _)
  --    (Set.functorToTopCat.mapIso (eqToIso (by simp))) rfl

noncomputable def horn.deformationRetractToTopMap {n : ‚Ñï} (i : Fin (n + 2)) :
    TopCat.DeformationRetract |horn (n + 1) i| |Œî[n + 1]| :=
  (horn.deformationRetracts_toTopMap i).choose

@[simp]
lemma horn.deformationRetractToTopMap_i {n : ‚Ñï} (i : Fin (n + 2)) :
    (horn.deformationRetractToTopMap i).i = toTop.map (horn (n + 1) i).Œπ :=
  (horn.deformationRetracts_toTopMap i).choose_spec

@[reassoc (attr := simp)]
lemma horn.Œπ_deformationRetractToTopMap_r {n : ‚Ñï} (i : Fin (n + 2)) :
    toTop.map (horn (n + 1) i).Œπ ‚â´ (horn.deformationRetractToTopMap i).r = ùüô _ := by
  simpa only [deformationRetractToTopMap_i]
    using (horn.deformationRetractToTopMap i).retract


instance (Z : TopCat.{u}) : IsFibrant (TopCat.toSSet.obj Z) := by
  rw [isFibrant_iff, fibration_iff]
  intro _ _ _ hi
  simp only [J, iSup_iff] at hi
  obtain ‚ü®n, ‚ü®i‚ü©‚ü© := hi
  constructor
  intro t _ sq
  refine ‚ü®‚ü®
    { l := sSetTopAdj.homEquiv _ _
        ((horn.deformationRetractToTopMap i).r ‚â´ (sSetTopAdj.homEquiv _ _).symm t)
      fac_left := by
        simp [‚Üê Adjunction.homEquiv_naturality_left]
      fac_right := Subsingleton.elim _ _ }‚ü©‚ü©

instance (X : SSet.{u}) : IsFibrant ((SSet.toTop ‚ãô TopCat.toSSet).obj X) := by
  dsimp
  infer_instance

end SSet
