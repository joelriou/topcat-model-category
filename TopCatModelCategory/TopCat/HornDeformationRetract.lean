import TopCatModelCategory.TopCat.Adj

open CategoryTheory MorphismProperty TopCat Simplicial HomotopicalAlgebra
  SSet.modelCategoryQuillen NNReal

namespace TopCat

variable (n : ‚Ñï)

section

variable (i : Fin (n + 1))

-- this definition should be changed using the results
-- in `BoundaryClosedEmbeddings.lean`
protected def horn : Set (ToType ‚¶ãn‚¶å ‚Üí ‚Ñù‚â•0) :=
  ‚¶ãn‚¶å.toTopObj ‚äì (‚®Ü (j ‚àà ({i}·∂ú : Set _)), setOf (fun f ‚Ü¶ f j = 0))

variable {n}

lemma mem_horn_iff (f : ToType ‚¶ãn‚¶å ‚Üí ‚Ñù‚â•0) :
    f ‚àà TopCat.horn n i ‚Üî f ‚àà ‚¶ãn‚¶å.toTopObj ‚àß ‚àÉ (j : Fin (n + 1))
      (_ : j ‚â† i), f j = 0 := by
  simp [TopCat.horn]

lemma mem_horn_iff' (f : ‚¶ãn‚¶å.toTopObj) :
    f.1 ‚àà TopCat.horn n i ‚Üî ‚àÉ (j : Fin (n + 1))
      (_ : j ‚â† i), f j = 0 := by
  simp [TopCat.horn]

lemma horn_le_toTopObj : TopCat.horn n i ‚äÜ ‚¶ãn‚¶å.toTopObj := by
  simp [TopCat.horn]

def horn.Œπ : of (TopCat.horn n i) ‚ü∂ of (‚¶ãn‚¶å.toTopObj) :=
  ofHom ‚ü®fun ‚ü®x, hx‚ü© ‚Ü¶ ‚ü®x, horn_le_toTopObj i hx‚ü©, by continuity‚ü©

end

namespace horn

variable {n}

lemma continuous_min {Œπ : Type*}
    (S : Finset Œπ) (hS : S.Nonempty) :
    Continuous (fun (f : Œπ ‚Üí ‚Ñù‚â•0) ‚Ü¶ (Finset.image f S).min' (by simpa)) := by
  sorry

variable (i : Fin (n + 2))

noncomputable def Œº : (ToType ‚¶ãn + 1‚¶å ‚Üí ‚Ñù‚â•0) ‚Üí ‚Ñù‚â•0 :=
  fun f ‚Ü¶ (Finset.image f ({i}·∂ú : Finset _)).min' (by
    rw [Finset.image_nonempty, ‚Üê Finset.coe_nonempty, Finset.coe_compl,
      Finset.coe_singleton]
    exact Set.nonempty_compl_of_nontrivial i)

@[continuity]
lemma continuous_Œº : Continuous (Œº i) :=
  continuous_min _ (by
    rw [‚Üê Finset.coe_nonempty, Finset.coe_compl,
      Finset.coe_singleton]
    exact Set.nonempty_compl_of_nontrivial i)

def v : ToType ‚¶ãn + 1‚¶å ‚Üí ‚Ñù‚â•0 :=
  fun j ‚Ü¶ if j = i then 0 else 1

noncomputable def h : (ToType ‚¶ãn + 1‚¶å ‚Üí ‚Ñù‚â•0) √ó TopCat.I.{0} ‚Üí (ToType ‚¶ãn + 1‚¶å ‚Üí ‚Ñù‚â•0) :=
  fun ‚ü®f, t‚ü© ‚Ü¶ f - (TopCat.I.toNNReal (TopCat.I.symm t) * Œº i f) ‚Ä¢ v i

@[continuity]
lemma continuous_h : Continuous (horn.h i) :=
  continuous_pi (fun j ‚Ü¶ by
    apply Continuous.sub
    ¬∑ exact (continuous_apply j).comp continuous_fst
    ¬∑ continuity)

lemma h‚ÇÅ (f : ToType ‚¶ãn + 1‚¶å ‚Üí ‚Ñù‚â•0) :
    h i ‚ü®f, 1‚ü© = f := by
  simp [h]
  aesop

def deformationRetracts_Œπ : TopCat.deformationRetracts (horn.Œπ i) := sorry

end horn

end TopCat

namespace SSet

instance (n : ‚Ñï) : T2Space |Œî[n]| := ‚¶ãn‚¶å.toTopHomeo.symm.t2Space

def horn.deformationRetracts_ToTopMap {n : ‚Ñï} (i : Fin (n + 2)) :
    TopCat.deformationRetracts (toTop.map (horn (n + 1) i).Œπ) := by
  refine (deformationRetracts.arrow_mk_iso_iff ?_).2
    (horn.deformationRetracts_Œπ i)
  sorry

noncomputable def horn.deformationRetractToTopMap {n : ‚Ñï} (i : Fin (n + 2)) :
    TopCat.DeformationRetract |horn (n + 1) i| |Œî[n + 1]| :=
  (horn.deformationRetracts_ToTopMap i).choose

@[simp]
lemma horn.deformationRetractToTopMap_i {n : ‚Ñï} (i : Fin (n + 2)) :
    (horn.deformationRetractToTopMap i).i = toTop.map (horn (n + 1) i).Œπ :=
  (horn.deformationRetracts_ToTopMap i).choose_spec

@[reassoc (attr := simp)]
lemma horn.Œπ_deformationRetractToTopMap_r {n : ‚Ñï} (i : Fin (n + 2)) :
    toTop.map (horn (n + 1) i).Œπ ‚â´ (horn.deformationRetractToTopMap i).r = ùüô _ := by
  simpa only [deformationRetractToTopMap_i]
    using (horn.deformationRetractToTopMap i).retract


instance (Z : TopCat.{0}) : IsFibrant (TopCat.toSSet.obj Z) := by
  rw [isFibrant_iff, fibration_iff]
  intro _ _ _ hi
  simp only [J, iSup_iff] at hi
  obtain ‚ü®n, ‚ü®i‚ü©‚ü© := hi
  constructor
  intro t _ sq
  refine ‚ü®‚ü®
    { l := sSetTopAdj.homEquiv _ _
        ((horn.deformationRetractToTopMap i).r ‚â´ (sSetTopAdj.homEquiv _ _).symm t)
      fac_left := by
        simp [‚Üê Adjunction.homEquiv_naturality_left]
      fac_right := Subsingleton.elim _ _ }‚ü©‚ü©

end SSet
