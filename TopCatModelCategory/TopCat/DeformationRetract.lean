import Mathlib.CategoryTheory.MorphismProperty.Retract
import Mathlib.CategoryTheory.MorphismProperty.Limits
import Mathlib.Topology.UnitInterval
import TopCatModelCategory.TopCat.Monoidal
import TopCatModelCategory.TopCat.CompactOpen
import TopCatModelCategory.CommSq

universe w u

open CategoryTheory MonoidalCategory CartesianMonoidalCategory Limits

namespace TopCat

variable (X Y : TopCat.{u})

structure DeformationRetract extends Retract X Y where
  h : Y ‚äó I ‚ü∂ Y
  hi : toRetract.i ‚ñ∑ _ ‚â´ h = fst _ _ ‚â´ toRetract.i := by aesop_cat
  h‚ÇÄ : Œπ‚ÇÄ ‚â´ h = r ‚â´ i := by aesop_cat
  h‚ÇÅ : Œπ‚ÇÅ ‚â´ h = ùüô Y := by aesop_cat

open DeformationRetract in
attribute [reassoc] hi h‚ÇÄ h‚ÇÅ

def deformationRetracts : MorphismProperty TopCat.{u} := fun _ _ f ‚Ü¶
  ‚àÉ (h : DeformationRetract _ _), h.i = f

instance : deformationRetracts.{u}.IsStableUnderCobaseChange where
  of_isPushout := by
    rintro X‚ÇÅ X‚ÇÇ X‚ÇÅ' X‚ÇÇ' _ p‚ÇÅ i' p‚ÇÇ sq ‚ü®h, rfl‚ü©
    obtain ‚ü®r', i'_r', p‚ÇÇ_r'‚ü© := sq.exists_desc (ùüô _) (h.r ‚â´ p‚ÇÅ) (by simp)
    obtain ‚ü®h', h'‚ÇÅ, h'‚ÇÇ‚ü© :=
      (sq.map (tensorRight I)).exists_desc (fst _ _ ‚â´ i') (h.h ‚â´ p‚ÇÇ) (by
        dsimp
        rw [whiskerRight_fst_assoc, h.hi_assoc, sq.w])
    dsimp at h'‚ÇÅ h'‚ÇÇ
    exact ‚ü®{
      i := i'
      r := r'
      retract := i'_r'
      h := h'
      hi := h'‚ÇÅ
      h‚ÇÄ := by
        apply sq.hom_ext
        ¬∑ rw [‚Üê Œπ‚ÇÄ_comp_assoc, h'‚ÇÅ, Œπ‚ÇÄ_fst_assoc, reassoc_of% i'_r']
        ¬∑ rw [‚Üê Œπ‚ÇÄ_comp_assoc, h'‚ÇÇ, reassoc_of% h.h‚ÇÄ,
            reassoc_of% p‚ÇÇ_r', sq.w]
      h‚ÇÅ := by
        apply sq.hom_ext
        ¬∑ rw [‚Üê Œπ‚ÇÅ_comp_assoc, h'‚ÇÅ, Œπ‚ÇÅ_fst_assoc, Category.comp_id]
        ¬∑ dsimp
          rw [‚Üê Œπ‚ÇÅ_comp_assoc, h'‚ÇÇ, reassoc_of% h.h‚ÇÅ, Category.comp_id]
    }, rfl‚ü©

instance {J : Type w} (Y : J ‚Üí TopCat.{u}) [HasCoproduct Y] [(tensorRight X).IsLeftAdjoint] :
    HasCoproduct (fun j ‚Ü¶ (tensorRight X).obj (Y j)) :=
  ‚ü®‚ü®‚ü®_, isColimitOfHasCoproductOfPreservesColimit _ _‚ü©‚ü©‚ü©

instance {J : Type w} (Y : J ‚Üí TopCat.{u}) [HasCoproduct Y] [(tensorRight X).IsLeftAdjoint] :
    HasCoproduct (fun j ‚Ü¶ Y j ‚äó X) :=
  ‚ü®‚ü®‚ü®_, isColimitOfHasCoproductOfPreservesColimit (tensorRight X) _‚ü©‚ü©‚ü©

@[reassoc (attr := simp)]
lemma Œπ‚ÇÄ_preservesCoproduct_iso_hom {J : Type w} (Y : J ‚Üí TopCat.{u}) [HasCoproduct Y] :
    Œπ‚ÇÄ ‚â´ (PreservesCoproduct.iso (tensorRight I) Y).hom =
      Limits.Sigma.map (fun _ ‚Ü¶ Œπ‚ÇÄ) := by
  rw [‚Üê cancel_mono (PreservesCoproduct.iso (tensorRight I) Y).inv, Category.assoc,
    Iso.hom_inv_id, Category.comp_id]
  ext j : 1
  have := Œπ_comp_sigmaComparison (tensorRight I) Y
  dsimp at this
  rw [Œπ_colimMap_assoc, PreservesCoproduct.inv_hom, this]
  dsimp

@[reassoc (attr := simp)]
lemma Œπ‚ÇÅ_preservesCoproduct_iso_hom {J : Type w} (Y : J ‚Üí TopCat.{u}) [HasCoproduct Y] :
    Œπ‚ÇÅ ‚â´ (PreservesCoproduct.iso (tensorRight I) Y).hom =
      Limits.Sigma.map (fun _ ‚Ü¶ Œπ‚ÇÅ) := by
  rw [‚Üê cancel_mono (PreservesCoproduct.iso (tensorRight I) Y).inv, Category.assoc,
    Iso.hom_inv_id, Category.comp_id]
  ext j : 1
  have := Œπ_comp_sigmaComparison (tensorRight I) Y
  dsimp at this
  rw [Œπ_colimMap_assoc, PreservesCoproduct.inv_hom, this]
  dsimp

@[reassoc (attr := simp)]
lemma colimitŒπ_whiskerRight_comp_preservesCoproduct_iso_hom
    {J : Type w} (Y : J ‚Üí TopCat.{u}) [HasCoproduct Y]
    (X : TopCat.{u})
    [(tensorRight X).IsLeftAdjoint] (j : J) :
    Sigma.Œπ Y j ‚ñ∑ X ‚â´ (PreservesCoproduct.iso (tensorRight X) Y).hom =
      Sigma.Œπ (fun j ‚Ü¶ Y j ‚äó X) j := by
  rw [‚Üê cancel_mono (PreservesCoproduct.iso (tensorRight X) Y).inv, Category.assoc,
    Iso.hom_inv_id, Category.comp_id, PreservesCoproduct.inv_hom]
  exact (Œπ_comp_sigmaComparison (tensorRight X) Y j).symm

instance : MorphismProperty.IsStableUnderCoproducts.{w} deformationRetracts.{u} where
  isStableUnderCoproductsOfShape J := by
    apply MorphismProperty.IsStableUnderCoproductsOfShape.mk
    intro X Y _ _ f hf
    let R (j : J) : DeformationRetract (X j) (Y j) := (hf j).choose
    have hR (j : J) : (R j).i = f j := (hf j).choose_spec
    exact ‚ü®
      { i := Limits.Sigma.map f
        r := Limits.Sigma.map (fun j ‚Ü¶ (R j).r)
        retract := by simp only [Sigma.map_comp_map, ‚Üê hR, Retract.retract, Sigma.map_id]
        h := (PreservesCoproduct.iso (tensorRight I) Y).hom ‚â´
          Limits.Sigma.map (fun j ‚Ü¶ (R j).h)
        hi := by
          dsimp
          rw [‚Üê cancel_epi (PreservesCoproduct.iso (tensorRight I) X).inv]
          ext j : 1
          rw [PreservesCoproduct.inv_hom, Œπ_comp_sigmaComparison_assoc,
            Œπ_comp_sigmaComparison_assoc]
          dsimp
          rw [‚Üê comp_whiskerRight_assoc, Œπ_colimMap,
            whiskerRight_fst_assoc, Œπ_colimMap]
          dsimp
          rw [comp_whiskerRight_assoc,
            colimitŒπ_whiskerRight_comp_preservesCoproduct_iso_hom_assoc,
            Œπ_colimMap]
          dsimp
          rw [‚Üê hR, (R j).hi_assoc]
        h‚ÇÄ := by
          ext j : 1
          simp [(R j).h‚ÇÄ_assoc, hR]
        h‚ÇÅ := by
          ext j : 1
          simp [(R j).h‚ÇÅ_assoc] }, rfl‚ü©

end TopCat
