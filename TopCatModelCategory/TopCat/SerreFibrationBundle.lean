import TopCatModelCategory.TopCat.SerreFibrationLocal
import TopCatModelCategory.Convenient.GrothendieckTopology
import TopCatModelCategory.Convenient.Fibrations
import TopCatModelCategory.MorphismPropertyLocally
import TopCatModelCategory.TrivialBundleGluing

universe u

open CategoryTheory HomotopicalAlgebra TopCat.modelCategory Limits
  MorphismProperty MonoidalCategory CartesianMonoidalCategory

namespace DeltaGenerated'

variable {E B : DeltaGenerated'.{u}} {p : E ‚ü∂ B}

lemma fibration_toTopCat_map_of_locally
    (hp : ((fibrations TopCat).inverseImage toTopCat).locally
      GeneratedByTopCat.grothendieckTopology p) : Fibration (toTopCat.map p) := by
  obtain ‚ü®c, hc‚ü© := hp
  have h (i : c.Œπ) := (c.hp i).exists_iso
  choose V e fac using h
  have hV : TopologicalSpace.IsOpenCover V := .mk (by
    ext b
    simp only [ObjectProperty.Œπ_obj, TopologicalSpace.Opens.coe_iSup, Set.mem_iUnion,
      SetLike.mem_coe, TopologicalSpace.Opens.coe_top, Set.mem_univ, iff_true]
    obtain ‚ü®i, u, rfl‚ü© := c.exists_eq b
    refine ‚ü®i, ?_‚ü©
    rw [‚Üê fac]
    exact ((e i).hom u).2)
  refine TopCat.fibration_of_isOpenCover hV (fun i ‚Ü¶ ?_)
  rw [TopCat.IsSerreFibrationOver.iff_fibration]
  let W : DeltaGenerated' := GeneratedByTopCat.of (V i)
  let j : W ‚ü∂ B := TopCat.ofHom ‚ü®_, continuous_subtype_val‚ü©
  have hœÄ : c.sieve j := by
    let e' : c.U i ‚âÖ W := fullyFaithfulToTopCat.preimageIso (e i)
    convert c.sieve.downward_closed (Sieve.ofArrows_mk _ _ _) e'.inv
    rw [‚Üê cancel_epi e'.hom, e'.hom_inv_id_assoc]
    exact fac i
  replace hœÄ := hc _ hœÄ
  rw [mem_sieveLocally_iff] at hœÄ
  obtain ‚ü®hœÄ‚ü© := hœÄ
  have : Limits.PreservesLimit (Limits.cospan j p) toTopCat :=
    GeneratedByTopCat.openImmersions.preservesLimit_cospan
      (by exact ((V i).isOpen.isOpenEmbedding_subtypeVal)) _
  obtain ‚ü®iso, h‚ÇÅ, h‚ÇÇ‚ü© := IsPullback.exists_iso_of_isos (hœÄ.sq.flip.map (toTopCat))
    (TopCat.isPullbackRestrictPreimage (toTopCat.map p) (V i)).flip
    (Iso.refl _) (Iso.refl _) (Iso.refl _) (by simp; rfl) (by simp)
  dsimp at h‚ÇÅ h‚ÇÇ
  rw [Category.comp_id] at h‚ÇÅ h‚ÇÇ
  have := hœÄ.hl
  rw [fibration_iff]
  exact (arrow_mk_iso_iff _ (Arrow.isoMk iso (Iso.refl _))).1 hœÄ.hl

open MorphismProperty

instance (F : TopCat.{u}) (p : F ‚ü∂ ùüô_ TopCat) : Fibration p := by
  rw [‚Üê isFibrant_iff_of_isTerminal _ isTerminalTensorUnit]
  infer_instance

instance (S F : TopCat.{u}) : Fibration (fst S F) := by
  rw [fibration_iff]
  refine of_isPullback (IsPullback.of_isLimit_binaryFan_of_isTerminal
    (tensorProductIsBinaryProduct S F) isTerminalTensorUnit).flip ?_
  rw [‚Üê fibration_iff]
  infer_instance

def arrowIsoToTopCatFst (S F : DeltaGenerated'.{u}) :
    Arrow.mk (TopCat.toDeltaGenerated'.map (fst (toTopCat.obj S) (toTopCat.obj F))) ‚âÖ
      Arrow.mk (fst S F) :=
  Iso.symm (Arrow.isoMk (Iso.refl _) (adjUnitIso.app _))

instance (S F : DeltaGenerated'.{u}) :
    Fibration (toTopCat.map (fst S F)) := by
  have h : Fibration (fst (toTopCat.obj S) (toTopCat.obj F)) := inferInstance
  rw [‚Üê fibration_toTopCat_map_toDeltaGenerated'_map_iff] at h
  rw [fibration_iff] at h ‚ä¢
  refine (((fibrations TopCat).inverseImage toTopCat).arrow_mk_iso_iff ?_).2 h
  exact Arrow.isoMk (Iso.refl _) (adjUnitIso.app _)

lemma fibration_toTopCat_map_of_locally_trivialBundle
    (hp : (trivialBundles.locally GeneratedByTopCat.grothendieckTopology p)) :
      Fibration (toTopCat.map p) := by
  apply fibration_toTopCat_map_of_locally
  refine locally_monotone ?_ _ _ hp
  intro X S f hf
  rw [mem_trivialBundles_iff] at hf
  obtain ‚ü®F, ‚ü®hf‚ü©‚ü© := hf
  let e : Arrow.mk f ‚âÖ Arrow.mk (fst S F) := Arrow.isoMk hf.isoTensor (Iso.refl _)
  refine (((fibrations TopCat).inverseImage toTopCat).arrow_iso_iff e).2 ?_
  dsimp
  simp only [inverseImage_iff, ‚Üê fibration_iff]
  infer_instance

end DeltaGenerated'
