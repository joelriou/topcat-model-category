import Mathlib.CategoryTheory.Bicategory.Functor.Pseudofunctor
import Mathlib.CategoryTheory.Bicategory.LocallyDiscrete
import Mathlib.CategoryTheory.CommSq
import Mathlib.CategoryTheory.CatCommSq

universe w‚ÇÇ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

namespace Pseudofunctor

section

variable {B C : Type*} [Bicategory B] [Bicategory C] (F : Pseudofunctor B C)

/-- More flexible variant of `mapId`. -/
def mapId' {b : B} (f : b ‚ü∂ b) (hf : f = ùüô b) :
    F.map f ‚âÖ ùüô _ :=
  F.map‚ÇÇIso (eqToIso (by rw [hf])) ‚â™‚â´ F.mapId _

lemma mapId'_eq_mapId (b : B) :
    F.mapId' (ùüô b) rfl = F.mapId b := by
  simp [mapId']

/-- More flexible variant of `mapComp`. -/
def mapComp' {b‚ÇÄ b‚ÇÅ b‚ÇÇ : B} (f : b‚ÇÄ ‚ü∂ b‚ÇÅ) (g : b‚ÇÅ ‚ü∂ b‚ÇÇ) (fg : b‚ÇÄ ‚ü∂ b‚ÇÇ) (h : fg = f ‚â´ g) :
    F.map fg ‚âÖ F.map f ‚â´ F.map g :=
  F.map‚ÇÇIso (eqToIso (by rw [h])) ‚â™‚â´ F.mapComp f g

lemma mapComp'_eq_mapComp {b‚ÇÄ b‚ÇÅ b‚ÇÇ : B} (f : b‚ÇÄ ‚ü∂ b‚ÇÅ) (g : b‚ÇÅ ‚ü∂ b‚ÇÇ) :
    F.mapComp' f g _ rfl = F.mapComp f g := by
  simp [mapComp']

end

section

variable {B : Type u‚ÇÅ} [Category.{v‚ÇÅ} B]
  {F : Pseudofunctor (LocallyDiscrete B) Cat.{v‚ÇÇ, u‚ÇÇ}}

def catCommSqOfSq {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ : B} {t : X‚ÇÅ ‚ü∂ Y‚ÇÅ} {l : X‚ÇÅ ‚ü∂ X‚ÇÇ} {r : Y‚ÇÅ ‚ü∂ Y‚ÇÇ} {b : X‚ÇÇ ‚ü∂ Y‚ÇÇ}
    (sq : CommSq t l r b) :
    CatCommSq (F.map ‚ü®t‚ü©) (F.map ‚ü®l‚ü©) (F.map ‚ü®r‚ü©) (F.map ‚ü®b‚ü©) :=
  ‚ü®(F.mapComp ‚ü®t‚ü© ‚ü®r‚ü©).symm ‚â™‚â´ F.mapComp' _ _ _ (by
    dsimp
    erw [‚Üê Quiver.Hom.comp_toLoc, ‚Üê Quiver.Hom.comp_toLoc]
    rw [sq.w])‚ü©

end

end Pseudofunctor

end CategoryTheory
